
nucleof072rb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004668  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004728  08004728  00005728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004794  08004794  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004794  08004794  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004794  08004794  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004794  08004794  00005794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004798  08004798  00005798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800479c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  2000000c  080047a8  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  080047a8  00006164  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dafc  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f28  00000000  00000000  00013b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  00015a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a6d  00000000  00000000  00016798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a395  00000000  00000000  00017205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010fe1  00000000  00000000  0003159a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099c6e  00000000  00000000  0004257b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dc1e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003198  00000000  00000000  000dc22c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000df3c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004710 	.word	0x08004710

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004710 	.word	0x08004710

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_d2uiz>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2200      	movs	r2, #0
 8000224:	4b0c      	ldr	r3, [pc, #48]	@ (8000258 <__aeabi_d2uiz+0x38>)
 8000226:	0004      	movs	r4, r0
 8000228:	000d      	movs	r5, r1
 800022a:	f001 faff 	bl	800182c <__aeabi_dcmpge>
 800022e:	2800      	cmp	r0, #0
 8000230:	d104      	bne.n	800023c <__aeabi_d2uiz+0x1c>
 8000232:	0020      	movs	r0, r4
 8000234:	0029      	movs	r1, r5
 8000236:	f001 f98f 	bl	8001558 <__aeabi_d2iz>
 800023a:	bd70      	pop	{r4, r5, r6, pc}
 800023c:	4b06      	ldr	r3, [pc, #24]	@ (8000258 <__aeabi_d2uiz+0x38>)
 800023e:	2200      	movs	r2, #0
 8000240:	0020      	movs	r0, r4
 8000242:	0029      	movs	r1, r5
 8000244:	f000 fdec 	bl	8000e20 <__aeabi_dsub>
 8000248:	f001 f986 	bl	8001558 <__aeabi_d2iz>
 800024c:	2380      	movs	r3, #128	@ 0x80
 800024e:	061b      	lsls	r3, r3, #24
 8000250:	469c      	mov	ip, r3
 8000252:	4460      	add	r0, ip
 8000254:	e7f1      	b.n	800023a <__aeabi_d2uiz+0x1a>
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	41e00000 	.word	0x41e00000

0800025c <__aeabi_ddiv>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	46de      	mov	lr, fp
 8000260:	4645      	mov	r5, r8
 8000262:	4657      	mov	r7, sl
 8000264:	464e      	mov	r6, r9
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	b087      	sub	sp, #28
 800026a:	9200      	str	r2, [sp, #0]
 800026c:	9301      	str	r3, [sp, #4]
 800026e:	030b      	lsls	r3, r1, #12
 8000270:	0b1b      	lsrs	r3, r3, #12
 8000272:	469b      	mov	fp, r3
 8000274:	0fca      	lsrs	r2, r1, #31
 8000276:	004b      	lsls	r3, r1, #1
 8000278:	0004      	movs	r4, r0
 800027a:	4680      	mov	r8, r0
 800027c:	0d5b      	lsrs	r3, r3, #21
 800027e:	9202      	str	r2, [sp, #8]
 8000280:	d100      	bne.n	8000284 <__aeabi_ddiv+0x28>
 8000282:	e16a      	b.n	800055a <__aeabi_ddiv+0x2fe>
 8000284:	4ad4      	ldr	r2, [pc, #848]	@ (80005d8 <__aeabi_ddiv+0x37c>)
 8000286:	4293      	cmp	r3, r2
 8000288:	d100      	bne.n	800028c <__aeabi_ddiv+0x30>
 800028a:	e18c      	b.n	80005a6 <__aeabi_ddiv+0x34a>
 800028c:	4659      	mov	r1, fp
 800028e:	0f42      	lsrs	r2, r0, #29
 8000290:	00c9      	lsls	r1, r1, #3
 8000292:	430a      	orrs	r2, r1
 8000294:	2180      	movs	r1, #128	@ 0x80
 8000296:	0409      	lsls	r1, r1, #16
 8000298:	4311      	orrs	r1, r2
 800029a:	00c2      	lsls	r2, r0, #3
 800029c:	4690      	mov	r8, r2
 800029e:	4acf      	ldr	r2, [pc, #828]	@ (80005dc <__aeabi_ddiv+0x380>)
 80002a0:	4689      	mov	r9, r1
 80002a2:	4692      	mov	sl, r2
 80002a4:	449a      	add	sl, r3
 80002a6:	2300      	movs	r3, #0
 80002a8:	2400      	movs	r4, #0
 80002aa:	9303      	str	r3, [sp, #12]
 80002ac:	9e00      	ldr	r6, [sp, #0]
 80002ae:	9f01      	ldr	r7, [sp, #4]
 80002b0:	033b      	lsls	r3, r7, #12
 80002b2:	0b1b      	lsrs	r3, r3, #12
 80002b4:	469b      	mov	fp, r3
 80002b6:	007b      	lsls	r3, r7, #1
 80002b8:	0030      	movs	r0, r6
 80002ba:	0d5b      	lsrs	r3, r3, #21
 80002bc:	0ffd      	lsrs	r5, r7, #31
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d100      	bne.n	80002c4 <__aeabi_ddiv+0x68>
 80002c2:	e128      	b.n	8000516 <__aeabi_ddiv+0x2ba>
 80002c4:	4ac4      	ldr	r2, [pc, #784]	@ (80005d8 <__aeabi_ddiv+0x37c>)
 80002c6:	4293      	cmp	r3, r2
 80002c8:	d100      	bne.n	80002cc <__aeabi_ddiv+0x70>
 80002ca:	e177      	b.n	80005bc <__aeabi_ddiv+0x360>
 80002cc:	4659      	mov	r1, fp
 80002ce:	0f72      	lsrs	r2, r6, #29
 80002d0:	00c9      	lsls	r1, r1, #3
 80002d2:	430a      	orrs	r2, r1
 80002d4:	2180      	movs	r1, #128	@ 0x80
 80002d6:	0409      	lsls	r1, r1, #16
 80002d8:	4311      	orrs	r1, r2
 80002da:	468b      	mov	fp, r1
 80002dc:	49bf      	ldr	r1, [pc, #764]	@ (80005dc <__aeabi_ddiv+0x380>)
 80002de:	00f2      	lsls	r2, r6, #3
 80002e0:	468c      	mov	ip, r1
 80002e2:	4651      	mov	r1, sl
 80002e4:	4463      	add	r3, ip
 80002e6:	1acb      	subs	r3, r1, r3
 80002e8:	469a      	mov	sl, r3
 80002ea:	2300      	movs	r3, #0
 80002ec:	9e02      	ldr	r6, [sp, #8]
 80002ee:	406e      	eors	r6, r5
 80002f0:	2c0f      	cmp	r4, #15
 80002f2:	d827      	bhi.n	8000344 <__aeabi_ddiv+0xe8>
 80002f4:	49ba      	ldr	r1, [pc, #744]	@ (80005e0 <__aeabi_ddiv+0x384>)
 80002f6:	00a4      	lsls	r4, r4, #2
 80002f8:	5909      	ldr	r1, [r1, r4]
 80002fa:	468f      	mov	pc, r1
 80002fc:	46cb      	mov	fp, r9
 80002fe:	4642      	mov	r2, r8
 8000300:	9e02      	ldr	r6, [sp, #8]
 8000302:	9b03      	ldr	r3, [sp, #12]
 8000304:	2b02      	cmp	r3, #2
 8000306:	d016      	beq.n	8000336 <__aeabi_ddiv+0xda>
 8000308:	2b03      	cmp	r3, #3
 800030a:	d100      	bne.n	800030e <__aeabi_ddiv+0xb2>
 800030c:	e2a6      	b.n	800085c <__aeabi_ddiv+0x600>
 800030e:	2b01      	cmp	r3, #1
 8000310:	d000      	beq.n	8000314 <__aeabi_ddiv+0xb8>
 8000312:	e0df      	b.n	80004d4 <__aeabi_ddiv+0x278>
 8000314:	2200      	movs	r2, #0
 8000316:	2300      	movs	r3, #0
 8000318:	2400      	movs	r4, #0
 800031a:	4690      	mov	r8, r2
 800031c:	051b      	lsls	r3, r3, #20
 800031e:	4323      	orrs	r3, r4
 8000320:	07f6      	lsls	r6, r6, #31
 8000322:	4333      	orrs	r3, r6
 8000324:	4640      	mov	r0, r8
 8000326:	0019      	movs	r1, r3
 8000328:	b007      	add	sp, #28
 800032a:	bcf0      	pop	{r4, r5, r6, r7}
 800032c:	46bb      	mov	fp, r7
 800032e:	46b2      	mov	sl, r6
 8000330:	46a9      	mov	r9, r5
 8000332:	46a0      	mov	r8, r4
 8000334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000336:	2200      	movs	r2, #0
 8000338:	2400      	movs	r4, #0
 800033a:	4690      	mov	r8, r2
 800033c:	4ba6      	ldr	r3, [pc, #664]	@ (80005d8 <__aeabi_ddiv+0x37c>)
 800033e:	e7ed      	b.n	800031c <__aeabi_ddiv+0xc0>
 8000340:	002e      	movs	r6, r5
 8000342:	e7df      	b.n	8000304 <__aeabi_ddiv+0xa8>
 8000344:	45cb      	cmp	fp, r9
 8000346:	d200      	bcs.n	800034a <__aeabi_ddiv+0xee>
 8000348:	e1d4      	b.n	80006f4 <__aeabi_ddiv+0x498>
 800034a:	d100      	bne.n	800034e <__aeabi_ddiv+0xf2>
 800034c:	e1cf      	b.n	80006ee <__aeabi_ddiv+0x492>
 800034e:	2301      	movs	r3, #1
 8000350:	425b      	negs	r3, r3
 8000352:	469c      	mov	ip, r3
 8000354:	4644      	mov	r4, r8
 8000356:	4648      	mov	r0, r9
 8000358:	2700      	movs	r7, #0
 800035a:	44e2      	add	sl, ip
 800035c:	465b      	mov	r3, fp
 800035e:	0e15      	lsrs	r5, r2, #24
 8000360:	021b      	lsls	r3, r3, #8
 8000362:	431d      	orrs	r5, r3
 8000364:	0c19      	lsrs	r1, r3, #16
 8000366:	042b      	lsls	r3, r5, #16
 8000368:	0212      	lsls	r2, r2, #8
 800036a:	9500      	str	r5, [sp, #0]
 800036c:	0c1d      	lsrs	r5, r3, #16
 800036e:	4691      	mov	r9, r2
 8000370:	9102      	str	r1, [sp, #8]
 8000372:	9503      	str	r5, [sp, #12]
 8000374:	f7ff ff4e 	bl	8000214 <__aeabi_uidivmod>
 8000378:	0002      	movs	r2, r0
 800037a:	436a      	muls	r2, r5
 800037c:	040b      	lsls	r3, r1, #16
 800037e:	0c21      	lsrs	r1, r4, #16
 8000380:	4680      	mov	r8, r0
 8000382:	4319      	orrs	r1, r3
 8000384:	428a      	cmp	r2, r1
 8000386:	d909      	bls.n	800039c <__aeabi_ddiv+0x140>
 8000388:	9d00      	ldr	r5, [sp, #0]
 800038a:	2301      	movs	r3, #1
 800038c:	46ac      	mov	ip, r5
 800038e:	425b      	negs	r3, r3
 8000390:	4461      	add	r1, ip
 8000392:	469c      	mov	ip, r3
 8000394:	44e0      	add	r8, ip
 8000396:	428d      	cmp	r5, r1
 8000398:	d800      	bhi.n	800039c <__aeabi_ddiv+0x140>
 800039a:	e1fb      	b.n	8000794 <__aeabi_ddiv+0x538>
 800039c:	1a88      	subs	r0, r1, r2
 800039e:	9902      	ldr	r1, [sp, #8]
 80003a0:	f7ff ff38 	bl	8000214 <__aeabi_uidivmod>
 80003a4:	9a03      	ldr	r2, [sp, #12]
 80003a6:	0424      	lsls	r4, r4, #16
 80003a8:	4342      	muls	r2, r0
 80003aa:	0409      	lsls	r1, r1, #16
 80003ac:	0c24      	lsrs	r4, r4, #16
 80003ae:	0003      	movs	r3, r0
 80003b0:	430c      	orrs	r4, r1
 80003b2:	42a2      	cmp	r2, r4
 80003b4:	d906      	bls.n	80003c4 <__aeabi_ddiv+0x168>
 80003b6:	9900      	ldr	r1, [sp, #0]
 80003b8:	3b01      	subs	r3, #1
 80003ba:	468c      	mov	ip, r1
 80003bc:	4464      	add	r4, ip
 80003be:	42a1      	cmp	r1, r4
 80003c0:	d800      	bhi.n	80003c4 <__aeabi_ddiv+0x168>
 80003c2:	e1e1      	b.n	8000788 <__aeabi_ddiv+0x52c>
 80003c4:	1aa0      	subs	r0, r4, r2
 80003c6:	4642      	mov	r2, r8
 80003c8:	0412      	lsls	r2, r2, #16
 80003ca:	431a      	orrs	r2, r3
 80003cc:	4693      	mov	fp, r2
 80003ce:	464b      	mov	r3, r9
 80003d0:	4659      	mov	r1, fp
 80003d2:	0c1b      	lsrs	r3, r3, #16
 80003d4:	001d      	movs	r5, r3
 80003d6:	9304      	str	r3, [sp, #16]
 80003d8:	040b      	lsls	r3, r1, #16
 80003da:	4649      	mov	r1, r9
 80003dc:	0409      	lsls	r1, r1, #16
 80003de:	0c09      	lsrs	r1, r1, #16
 80003e0:	000c      	movs	r4, r1
 80003e2:	0c1b      	lsrs	r3, r3, #16
 80003e4:	435c      	muls	r4, r3
 80003e6:	0c12      	lsrs	r2, r2, #16
 80003e8:	436b      	muls	r3, r5
 80003ea:	4688      	mov	r8, r1
 80003ec:	4351      	muls	r1, r2
 80003ee:	436a      	muls	r2, r5
 80003f0:	0c25      	lsrs	r5, r4, #16
 80003f2:	46ac      	mov	ip, r5
 80003f4:	185b      	adds	r3, r3, r1
 80003f6:	4463      	add	r3, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d903      	bls.n	8000404 <__aeabi_ddiv+0x1a8>
 80003fc:	2180      	movs	r1, #128	@ 0x80
 80003fe:	0249      	lsls	r1, r1, #9
 8000400:	468c      	mov	ip, r1
 8000402:	4462      	add	r2, ip
 8000404:	0c19      	lsrs	r1, r3, #16
 8000406:	0424      	lsls	r4, r4, #16
 8000408:	041b      	lsls	r3, r3, #16
 800040a:	0c24      	lsrs	r4, r4, #16
 800040c:	188a      	adds	r2, r1, r2
 800040e:	191c      	adds	r4, r3, r4
 8000410:	4290      	cmp	r0, r2
 8000412:	d302      	bcc.n	800041a <__aeabi_ddiv+0x1be>
 8000414:	d116      	bne.n	8000444 <__aeabi_ddiv+0x1e8>
 8000416:	42a7      	cmp	r7, r4
 8000418:	d214      	bcs.n	8000444 <__aeabi_ddiv+0x1e8>
 800041a:	465b      	mov	r3, fp
 800041c:	9d00      	ldr	r5, [sp, #0]
 800041e:	3b01      	subs	r3, #1
 8000420:	444f      	add	r7, r9
 8000422:	9305      	str	r3, [sp, #20]
 8000424:	454f      	cmp	r7, r9
 8000426:	419b      	sbcs	r3, r3
 8000428:	46ac      	mov	ip, r5
 800042a:	425b      	negs	r3, r3
 800042c:	4463      	add	r3, ip
 800042e:	18c0      	adds	r0, r0, r3
 8000430:	4285      	cmp	r5, r0
 8000432:	d300      	bcc.n	8000436 <__aeabi_ddiv+0x1da>
 8000434:	e1a1      	b.n	800077a <__aeabi_ddiv+0x51e>
 8000436:	4282      	cmp	r2, r0
 8000438:	d900      	bls.n	800043c <__aeabi_ddiv+0x1e0>
 800043a:	e1f6      	b.n	800082a <__aeabi_ddiv+0x5ce>
 800043c:	d100      	bne.n	8000440 <__aeabi_ddiv+0x1e4>
 800043e:	e1f1      	b.n	8000824 <__aeabi_ddiv+0x5c8>
 8000440:	9b05      	ldr	r3, [sp, #20]
 8000442:	469b      	mov	fp, r3
 8000444:	1b3c      	subs	r4, r7, r4
 8000446:	42a7      	cmp	r7, r4
 8000448:	41bf      	sbcs	r7, r7
 800044a:	9d00      	ldr	r5, [sp, #0]
 800044c:	1a80      	subs	r0, r0, r2
 800044e:	427f      	negs	r7, r7
 8000450:	1bc0      	subs	r0, r0, r7
 8000452:	4285      	cmp	r5, r0
 8000454:	d100      	bne.n	8000458 <__aeabi_ddiv+0x1fc>
 8000456:	e1d0      	b.n	80007fa <__aeabi_ddiv+0x59e>
 8000458:	9902      	ldr	r1, [sp, #8]
 800045a:	f7ff fedb 	bl	8000214 <__aeabi_uidivmod>
 800045e:	9a03      	ldr	r2, [sp, #12]
 8000460:	040b      	lsls	r3, r1, #16
 8000462:	4342      	muls	r2, r0
 8000464:	0c21      	lsrs	r1, r4, #16
 8000466:	0007      	movs	r7, r0
 8000468:	4319      	orrs	r1, r3
 800046a:	428a      	cmp	r2, r1
 800046c:	d900      	bls.n	8000470 <__aeabi_ddiv+0x214>
 800046e:	e178      	b.n	8000762 <__aeabi_ddiv+0x506>
 8000470:	1a88      	subs	r0, r1, r2
 8000472:	9902      	ldr	r1, [sp, #8]
 8000474:	f7ff fece 	bl	8000214 <__aeabi_uidivmod>
 8000478:	9a03      	ldr	r2, [sp, #12]
 800047a:	0424      	lsls	r4, r4, #16
 800047c:	4342      	muls	r2, r0
 800047e:	0409      	lsls	r1, r1, #16
 8000480:	0c24      	lsrs	r4, r4, #16
 8000482:	0003      	movs	r3, r0
 8000484:	430c      	orrs	r4, r1
 8000486:	42a2      	cmp	r2, r4
 8000488:	d900      	bls.n	800048c <__aeabi_ddiv+0x230>
 800048a:	e15d      	b.n	8000748 <__aeabi_ddiv+0x4ec>
 800048c:	4641      	mov	r1, r8
 800048e:	1aa4      	subs	r4, r4, r2
 8000490:	043a      	lsls	r2, r7, #16
 8000492:	431a      	orrs	r2, r3
 8000494:	9d04      	ldr	r5, [sp, #16]
 8000496:	0413      	lsls	r3, r2, #16
 8000498:	0c1b      	lsrs	r3, r3, #16
 800049a:	4359      	muls	r1, r3
 800049c:	4647      	mov	r7, r8
 800049e:	436b      	muls	r3, r5
 80004a0:	469c      	mov	ip, r3
 80004a2:	0c10      	lsrs	r0, r2, #16
 80004a4:	4347      	muls	r7, r0
 80004a6:	0c0b      	lsrs	r3, r1, #16
 80004a8:	44bc      	add	ip, r7
 80004aa:	4463      	add	r3, ip
 80004ac:	4368      	muls	r0, r5
 80004ae:	429f      	cmp	r7, r3
 80004b0:	d903      	bls.n	80004ba <__aeabi_ddiv+0x25e>
 80004b2:	2580      	movs	r5, #128	@ 0x80
 80004b4:	026d      	lsls	r5, r5, #9
 80004b6:	46ac      	mov	ip, r5
 80004b8:	4460      	add	r0, ip
 80004ba:	0c1f      	lsrs	r7, r3, #16
 80004bc:	0409      	lsls	r1, r1, #16
 80004be:	041b      	lsls	r3, r3, #16
 80004c0:	0c09      	lsrs	r1, r1, #16
 80004c2:	183f      	adds	r7, r7, r0
 80004c4:	185b      	adds	r3, r3, r1
 80004c6:	42bc      	cmp	r4, r7
 80004c8:	d200      	bcs.n	80004cc <__aeabi_ddiv+0x270>
 80004ca:	e102      	b.n	80006d2 <__aeabi_ddiv+0x476>
 80004cc:	d100      	bne.n	80004d0 <__aeabi_ddiv+0x274>
 80004ce:	e0fd      	b.n	80006cc <__aeabi_ddiv+0x470>
 80004d0:	2301      	movs	r3, #1
 80004d2:	431a      	orrs	r2, r3
 80004d4:	4b43      	ldr	r3, [pc, #268]	@ (80005e4 <__aeabi_ddiv+0x388>)
 80004d6:	4453      	add	r3, sl
 80004d8:	2b00      	cmp	r3, #0
 80004da:	dc00      	bgt.n	80004de <__aeabi_ddiv+0x282>
 80004dc:	e0ae      	b.n	800063c <__aeabi_ddiv+0x3e0>
 80004de:	0751      	lsls	r1, r2, #29
 80004e0:	d000      	beq.n	80004e4 <__aeabi_ddiv+0x288>
 80004e2:	e198      	b.n	8000816 <__aeabi_ddiv+0x5ba>
 80004e4:	4659      	mov	r1, fp
 80004e6:	01c9      	lsls	r1, r1, #7
 80004e8:	d506      	bpl.n	80004f8 <__aeabi_ddiv+0x29c>
 80004ea:	4659      	mov	r1, fp
 80004ec:	4b3e      	ldr	r3, [pc, #248]	@ (80005e8 <__aeabi_ddiv+0x38c>)
 80004ee:	4019      	ands	r1, r3
 80004f0:	2380      	movs	r3, #128	@ 0x80
 80004f2:	468b      	mov	fp, r1
 80004f4:	00db      	lsls	r3, r3, #3
 80004f6:	4453      	add	r3, sl
 80004f8:	493c      	ldr	r1, [pc, #240]	@ (80005ec <__aeabi_ddiv+0x390>)
 80004fa:	428b      	cmp	r3, r1
 80004fc:	dd00      	ble.n	8000500 <__aeabi_ddiv+0x2a4>
 80004fe:	e71a      	b.n	8000336 <__aeabi_ddiv+0xda>
 8000500:	4659      	mov	r1, fp
 8000502:	08d2      	lsrs	r2, r2, #3
 8000504:	0749      	lsls	r1, r1, #29
 8000506:	4311      	orrs	r1, r2
 8000508:	465a      	mov	r2, fp
 800050a:	055b      	lsls	r3, r3, #21
 800050c:	0254      	lsls	r4, r2, #9
 800050e:	4688      	mov	r8, r1
 8000510:	0b24      	lsrs	r4, r4, #12
 8000512:	0d5b      	lsrs	r3, r3, #21
 8000514:	e702      	b.n	800031c <__aeabi_ddiv+0xc0>
 8000516:	465a      	mov	r2, fp
 8000518:	9b00      	ldr	r3, [sp, #0]
 800051a:	431a      	orrs	r2, r3
 800051c:	d100      	bne.n	8000520 <__aeabi_ddiv+0x2c4>
 800051e:	e07e      	b.n	800061e <__aeabi_ddiv+0x3c2>
 8000520:	465b      	mov	r3, fp
 8000522:	2b00      	cmp	r3, #0
 8000524:	d100      	bne.n	8000528 <__aeabi_ddiv+0x2cc>
 8000526:	e100      	b.n	800072a <__aeabi_ddiv+0x4ce>
 8000528:	4658      	mov	r0, fp
 800052a:	f001 f989 	bl	8001840 <__clzsi2>
 800052e:	0002      	movs	r2, r0
 8000530:	0003      	movs	r3, r0
 8000532:	3a0b      	subs	r2, #11
 8000534:	271d      	movs	r7, #29
 8000536:	9e00      	ldr	r6, [sp, #0]
 8000538:	1aba      	subs	r2, r7, r2
 800053a:	0019      	movs	r1, r3
 800053c:	4658      	mov	r0, fp
 800053e:	40d6      	lsrs	r6, r2
 8000540:	3908      	subs	r1, #8
 8000542:	4088      	lsls	r0, r1
 8000544:	0032      	movs	r2, r6
 8000546:	4302      	orrs	r2, r0
 8000548:	4693      	mov	fp, r2
 800054a:	9a00      	ldr	r2, [sp, #0]
 800054c:	408a      	lsls	r2, r1
 800054e:	4928      	ldr	r1, [pc, #160]	@ (80005f0 <__aeabi_ddiv+0x394>)
 8000550:	4453      	add	r3, sl
 8000552:	468a      	mov	sl, r1
 8000554:	449a      	add	sl, r3
 8000556:	2300      	movs	r3, #0
 8000558:	e6c8      	b.n	80002ec <__aeabi_ddiv+0x90>
 800055a:	465b      	mov	r3, fp
 800055c:	4303      	orrs	r3, r0
 800055e:	4699      	mov	r9, r3
 8000560:	d056      	beq.n	8000610 <__aeabi_ddiv+0x3b4>
 8000562:	465b      	mov	r3, fp
 8000564:	2b00      	cmp	r3, #0
 8000566:	d100      	bne.n	800056a <__aeabi_ddiv+0x30e>
 8000568:	e0cd      	b.n	8000706 <__aeabi_ddiv+0x4aa>
 800056a:	4658      	mov	r0, fp
 800056c:	f001 f968 	bl	8001840 <__clzsi2>
 8000570:	230b      	movs	r3, #11
 8000572:	425b      	negs	r3, r3
 8000574:	469c      	mov	ip, r3
 8000576:	0002      	movs	r2, r0
 8000578:	4484      	add	ip, r0
 800057a:	4666      	mov	r6, ip
 800057c:	231d      	movs	r3, #29
 800057e:	1b9b      	subs	r3, r3, r6
 8000580:	0026      	movs	r6, r4
 8000582:	0011      	movs	r1, r2
 8000584:	4658      	mov	r0, fp
 8000586:	40de      	lsrs	r6, r3
 8000588:	3908      	subs	r1, #8
 800058a:	4088      	lsls	r0, r1
 800058c:	0033      	movs	r3, r6
 800058e:	4303      	orrs	r3, r0
 8000590:	4699      	mov	r9, r3
 8000592:	0023      	movs	r3, r4
 8000594:	408b      	lsls	r3, r1
 8000596:	4698      	mov	r8, r3
 8000598:	4b16      	ldr	r3, [pc, #88]	@ (80005f4 <__aeabi_ddiv+0x398>)
 800059a:	2400      	movs	r4, #0
 800059c:	1a9b      	subs	r3, r3, r2
 800059e:	469a      	mov	sl, r3
 80005a0:	2300      	movs	r3, #0
 80005a2:	9303      	str	r3, [sp, #12]
 80005a4:	e682      	b.n	80002ac <__aeabi_ddiv+0x50>
 80005a6:	465a      	mov	r2, fp
 80005a8:	4302      	orrs	r2, r0
 80005aa:	4691      	mov	r9, r2
 80005ac:	d12a      	bne.n	8000604 <__aeabi_ddiv+0x3a8>
 80005ae:	2200      	movs	r2, #0
 80005b0:	469a      	mov	sl, r3
 80005b2:	2302      	movs	r3, #2
 80005b4:	4690      	mov	r8, r2
 80005b6:	2408      	movs	r4, #8
 80005b8:	9303      	str	r3, [sp, #12]
 80005ba:	e677      	b.n	80002ac <__aeabi_ddiv+0x50>
 80005bc:	465a      	mov	r2, fp
 80005be:	9b00      	ldr	r3, [sp, #0]
 80005c0:	431a      	orrs	r2, r3
 80005c2:	4b0d      	ldr	r3, [pc, #52]	@ (80005f8 <__aeabi_ddiv+0x39c>)
 80005c4:	469c      	mov	ip, r3
 80005c6:	44e2      	add	sl, ip
 80005c8:	2a00      	cmp	r2, #0
 80005ca:	d117      	bne.n	80005fc <__aeabi_ddiv+0x3a0>
 80005cc:	2302      	movs	r3, #2
 80005ce:	431c      	orrs	r4, r3
 80005d0:	2300      	movs	r3, #0
 80005d2:	469b      	mov	fp, r3
 80005d4:	3302      	adds	r3, #2
 80005d6:	e689      	b.n	80002ec <__aeabi_ddiv+0x90>
 80005d8:	000007ff 	.word	0x000007ff
 80005dc:	fffffc01 	.word	0xfffffc01
 80005e0:	0800474c 	.word	0x0800474c
 80005e4:	000003ff 	.word	0x000003ff
 80005e8:	feffffff 	.word	0xfeffffff
 80005ec:	000007fe 	.word	0x000007fe
 80005f0:	000003f3 	.word	0x000003f3
 80005f4:	fffffc0d 	.word	0xfffffc0d
 80005f8:	fffff801 	.word	0xfffff801
 80005fc:	2303      	movs	r3, #3
 80005fe:	0032      	movs	r2, r6
 8000600:	431c      	orrs	r4, r3
 8000602:	e673      	b.n	80002ec <__aeabi_ddiv+0x90>
 8000604:	469a      	mov	sl, r3
 8000606:	2303      	movs	r3, #3
 8000608:	46d9      	mov	r9, fp
 800060a:	240c      	movs	r4, #12
 800060c:	9303      	str	r3, [sp, #12]
 800060e:	e64d      	b.n	80002ac <__aeabi_ddiv+0x50>
 8000610:	2300      	movs	r3, #0
 8000612:	4698      	mov	r8, r3
 8000614:	469a      	mov	sl, r3
 8000616:	3301      	adds	r3, #1
 8000618:	2404      	movs	r4, #4
 800061a:	9303      	str	r3, [sp, #12]
 800061c:	e646      	b.n	80002ac <__aeabi_ddiv+0x50>
 800061e:	2301      	movs	r3, #1
 8000620:	431c      	orrs	r4, r3
 8000622:	2300      	movs	r3, #0
 8000624:	469b      	mov	fp, r3
 8000626:	3301      	adds	r3, #1
 8000628:	e660      	b.n	80002ec <__aeabi_ddiv+0x90>
 800062a:	2300      	movs	r3, #0
 800062c:	2480      	movs	r4, #128	@ 0x80
 800062e:	4698      	mov	r8, r3
 8000630:	2600      	movs	r6, #0
 8000632:	4b92      	ldr	r3, [pc, #584]	@ (800087c <__aeabi_ddiv+0x620>)
 8000634:	0324      	lsls	r4, r4, #12
 8000636:	e671      	b.n	800031c <__aeabi_ddiv+0xc0>
 8000638:	2201      	movs	r2, #1
 800063a:	4252      	negs	r2, r2
 800063c:	2101      	movs	r1, #1
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	2938      	cmp	r1, #56	@ 0x38
 8000642:	dd00      	ble.n	8000646 <__aeabi_ddiv+0x3ea>
 8000644:	e666      	b.n	8000314 <__aeabi_ddiv+0xb8>
 8000646:	291f      	cmp	r1, #31
 8000648:	dc00      	bgt.n	800064c <__aeabi_ddiv+0x3f0>
 800064a:	e0ab      	b.n	80007a4 <__aeabi_ddiv+0x548>
 800064c:	201f      	movs	r0, #31
 800064e:	4240      	negs	r0, r0
 8000650:	1ac3      	subs	r3, r0, r3
 8000652:	4658      	mov	r0, fp
 8000654:	40d8      	lsrs	r0, r3
 8000656:	0003      	movs	r3, r0
 8000658:	2920      	cmp	r1, #32
 800065a:	d004      	beq.n	8000666 <__aeabi_ddiv+0x40a>
 800065c:	4658      	mov	r0, fp
 800065e:	4988      	ldr	r1, [pc, #544]	@ (8000880 <__aeabi_ddiv+0x624>)
 8000660:	4451      	add	r1, sl
 8000662:	4088      	lsls	r0, r1
 8000664:	4302      	orrs	r2, r0
 8000666:	1e51      	subs	r1, r2, #1
 8000668:	418a      	sbcs	r2, r1
 800066a:	431a      	orrs	r2, r3
 800066c:	2307      	movs	r3, #7
 800066e:	0019      	movs	r1, r3
 8000670:	2400      	movs	r4, #0
 8000672:	4011      	ands	r1, r2
 8000674:	4213      	tst	r3, r2
 8000676:	d00c      	beq.n	8000692 <__aeabi_ddiv+0x436>
 8000678:	230f      	movs	r3, #15
 800067a:	4013      	ands	r3, r2
 800067c:	2b04      	cmp	r3, #4
 800067e:	d100      	bne.n	8000682 <__aeabi_ddiv+0x426>
 8000680:	e0f9      	b.n	8000876 <__aeabi_ddiv+0x61a>
 8000682:	1d11      	adds	r1, r2, #4
 8000684:	4291      	cmp	r1, r2
 8000686:	419b      	sbcs	r3, r3
 8000688:	000a      	movs	r2, r1
 800068a:	425b      	negs	r3, r3
 800068c:	0759      	lsls	r1, r3, #29
 800068e:	025b      	lsls	r3, r3, #9
 8000690:	0b1c      	lsrs	r4, r3, #12
 8000692:	08d2      	lsrs	r2, r2, #3
 8000694:	430a      	orrs	r2, r1
 8000696:	4690      	mov	r8, r2
 8000698:	2300      	movs	r3, #0
 800069a:	e63f      	b.n	800031c <__aeabi_ddiv+0xc0>
 800069c:	2480      	movs	r4, #128	@ 0x80
 800069e:	464b      	mov	r3, r9
 80006a0:	0324      	lsls	r4, r4, #12
 80006a2:	4223      	tst	r3, r4
 80006a4:	d009      	beq.n	80006ba <__aeabi_ddiv+0x45e>
 80006a6:	465b      	mov	r3, fp
 80006a8:	4223      	tst	r3, r4
 80006aa:	d106      	bne.n	80006ba <__aeabi_ddiv+0x45e>
 80006ac:	431c      	orrs	r4, r3
 80006ae:	0324      	lsls	r4, r4, #12
 80006b0:	002e      	movs	r6, r5
 80006b2:	4690      	mov	r8, r2
 80006b4:	4b71      	ldr	r3, [pc, #452]	@ (800087c <__aeabi_ddiv+0x620>)
 80006b6:	0b24      	lsrs	r4, r4, #12
 80006b8:	e630      	b.n	800031c <__aeabi_ddiv+0xc0>
 80006ba:	2480      	movs	r4, #128	@ 0x80
 80006bc:	464b      	mov	r3, r9
 80006be:	0324      	lsls	r4, r4, #12
 80006c0:	431c      	orrs	r4, r3
 80006c2:	0324      	lsls	r4, r4, #12
 80006c4:	9e02      	ldr	r6, [sp, #8]
 80006c6:	4b6d      	ldr	r3, [pc, #436]	@ (800087c <__aeabi_ddiv+0x620>)
 80006c8:	0b24      	lsrs	r4, r4, #12
 80006ca:	e627      	b.n	800031c <__aeabi_ddiv+0xc0>
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d100      	bne.n	80006d2 <__aeabi_ddiv+0x476>
 80006d0:	e700      	b.n	80004d4 <__aeabi_ddiv+0x278>
 80006d2:	9800      	ldr	r0, [sp, #0]
 80006d4:	1e51      	subs	r1, r2, #1
 80006d6:	4684      	mov	ip, r0
 80006d8:	4464      	add	r4, ip
 80006da:	4284      	cmp	r4, r0
 80006dc:	d200      	bcs.n	80006e0 <__aeabi_ddiv+0x484>
 80006de:	e084      	b.n	80007ea <__aeabi_ddiv+0x58e>
 80006e0:	42bc      	cmp	r4, r7
 80006e2:	d200      	bcs.n	80006e6 <__aeabi_ddiv+0x48a>
 80006e4:	e0ae      	b.n	8000844 <__aeabi_ddiv+0x5e8>
 80006e6:	d100      	bne.n	80006ea <__aeabi_ddiv+0x48e>
 80006e8:	e0c1      	b.n	800086e <__aeabi_ddiv+0x612>
 80006ea:	000a      	movs	r2, r1
 80006ec:	e6f0      	b.n	80004d0 <__aeabi_ddiv+0x274>
 80006ee:	4542      	cmp	r2, r8
 80006f0:	d900      	bls.n	80006f4 <__aeabi_ddiv+0x498>
 80006f2:	e62c      	b.n	800034e <__aeabi_ddiv+0xf2>
 80006f4:	464b      	mov	r3, r9
 80006f6:	07dc      	lsls	r4, r3, #31
 80006f8:	0858      	lsrs	r0, r3, #1
 80006fa:	4643      	mov	r3, r8
 80006fc:	085b      	lsrs	r3, r3, #1
 80006fe:	431c      	orrs	r4, r3
 8000700:	4643      	mov	r3, r8
 8000702:	07df      	lsls	r7, r3, #31
 8000704:	e62a      	b.n	800035c <__aeabi_ddiv+0x100>
 8000706:	f001 f89b 	bl	8001840 <__clzsi2>
 800070a:	2315      	movs	r3, #21
 800070c:	469c      	mov	ip, r3
 800070e:	4484      	add	ip, r0
 8000710:	0002      	movs	r2, r0
 8000712:	4663      	mov	r3, ip
 8000714:	3220      	adds	r2, #32
 8000716:	2b1c      	cmp	r3, #28
 8000718:	dc00      	bgt.n	800071c <__aeabi_ddiv+0x4c0>
 800071a:	e72e      	b.n	800057a <__aeabi_ddiv+0x31e>
 800071c:	0023      	movs	r3, r4
 800071e:	3808      	subs	r0, #8
 8000720:	4083      	lsls	r3, r0
 8000722:	4699      	mov	r9, r3
 8000724:	2300      	movs	r3, #0
 8000726:	4698      	mov	r8, r3
 8000728:	e736      	b.n	8000598 <__aeabi_ddiv+0x33c>
 800072a:	f001 f889 	bl	8001840 <__clzsi2>
 800072e:	0002      	movs	r2, r0
 8000730:	0003      	movs	r3, r0
 8000732:	3215      	adds	r2, #21
 8000734:	3320      	adds	r3, #32
 8000736:	2a1c      	cmp	r2, #28
 8000738:	dc00      	bgt.n	800073c <__aeabi_ddiv+0x4e0>
 800073a:	e6fb      	b.n	8000534 <__aeabi_ddiv+0x2d8>
 800073c:	9900      	ldr	r1, [sp, #0]
 800073e:	3808      	subs	r0, #8
 8000740:	4081      	lsls	r1, r0
 8000742:	2200      	movs	r2, #0
 8000744:	468b      	mov	fp, r1
 8000746:	e702      	b.n	800054e <__aeabi_ddiv+0x2f2>
 8000748:	9900      	ldr	r1, [sp, #0]
 800074a:	3b01      	subs	r3, #1
 800074c:	468c      	mov	ip, r1
 800074e:	4464      	add	r4, ip
 8000750:	42a1      	cmp	r1, r4
 8000752:	d900      	bls.n	8000756 <__aeabi_ddiv+0x4fa>
 8000754:	e69a      	b.n	800048c <__aeabi_ddiv+0x230>
 8000756:	42a2      	cmp	r2, r4
 8000758:	d800      	bhi.n	800075c <__aeabi_ddiv+0x500>
 800075a:	e697      	b.n	800048c <__aeabi_ddiv+0x230>
 800075c:	1e83      	subs	r3, r0, #2
 800075e:	4464      	add	r4, ip
 8000760:	e694      	b.n	800048c <__aeabi_ddiv+0x230>
 8000762:	46ac      	mov	ip, r5
 8000764:	4461      	add	r1, ip
 8000766:	3f01      	subs	r7, #1
 8000768:	428d      	cmp	r5, r1
 800076a:	d900      	bls.n	800076e <__aeabi_ddiv+0x512>
 800076c:	e680      	b.n	8000470 <__aeabi_ddiv+0x214>
 800076e:	428a      	cmp	r2, r1
 8000770:	d800      	bhi.n	8000774 <__aeabi_ddiv+0x518>
 8000772:	e67d      	b.n	8000470 <__aeabi_ddiv+0x214>
 8000774:	1e87      	subs	r7, r0, #2
 8000776:	4461      	add	r1, ip
 8000778:	e67a      	b.n	8000470 <__aeabi_ddiv+0x214>
 800077a:	4285      	cmp	r5, r0
 800077c:	d000      	beq.n	8000780 <__aeabi_ddiv+0x524>
 800077e:	e65f      	b.n	8000440 <__aeabi_ddiv+0x1e4>
 8000780:	45b9      	cmp	r9, r7
 8000782:	d900      	bls.n	8000786 <__aeabi_ddiv+0x52a>
 8000784:	e65c      	b.n	8000440 <__aeabi_ddiv+0x1e4>
 8000786:	e656      	b.n	8000436 <__aeabi_ddiv+0x1da>
 8000788:	42a2      	cmp	r2, r4
 800078a:	d800      	bhi.n	800078e <__aeabi_ddiv+0x532>
 800078c:	e61a      	b.n	80003c4 <__aeabi_ddiv+0x168>
 800078e:	1e83      	subs	r3, r0, #2
 8000790:	4464      	add	r4, ip
 8000792:	e617      	b.n	80003c4 <__aeabi_ddiv+0x168>
 8000794:	428a      	cmp	r2, r1
 8000796:	d800      	bhi.n	800079a <__aeabi_ddiv+0x53e>
 8000798:	e600      	b.n	800039c <__aeabi_ddiv+0x140>
 800079a:	46ac      	mov	ip, r5
 800079c:	1e83      	subs	r3, r0, #2
 800079e:	4698      	mov	r8, r3
 80007a0:	4461      	add	r1, ip
 80007a2:	e5fb      	b.n	800039c <__aeabi_ddiv+0x140>
 80007a4:	4837      	ldr	r0, [pc, #220]	@ (8000884 <__aeabi_ddiv+0x628>)
 80007a6:	0014      	movs	r4, r2
 80007a8:	4450      	add	r0, sl
 80007aa:	4082      	lsls	r2, r0
 80007ac:	465b      	mov	r3, fp
 80007ae:	0017      	movs	r7, r2
 80007b0:	4083      	lsls	r3, r0
 80007b2:	40cc      	lsrs	r4, r1
 80007b4:	1e7a      	subs	r2, r7, #1
 80007b6:	4197      	sbcs	r7, r2
 80007b8:	4323      	orrs	r3, r4
 80007ba:	433b      	orrs	r3, r7
 80007bc:	001a      	movs	r2, r3
 80007be:	465b      	mov	r3, fp
 80007c0:	40cb      	lsrs	r3, r1
 80007c2:	0751      	lsls	r1, r2, #29
 80007c4:	d009      	beq.n	80007da <__aeabi_ddiv+0x57e>
 80007c6:	210f      	movs	r1, #15
 80007c8:	4011      	ands	r1, r2
 80007ca:	2904      	cmp	r1, #4
 80007cc:	d005      	beq.n	80007da <__aeabi_ddiv+0x57e>
 80007ce:	1d11      	adds	r1, r2, #4
 80007d0:	4291      	cmp	r1, r2
 80007d2:	4192      	sbcs	r2, r2
 80007d4:	4252      	negs	r2, r2
 80007d6:	189b      	adds	r3, r3, r2
 80007d8:	000a      	movs	r2, r1
 80007da:	0219      	lsls	r1, r3, #8
 80007dc:	d400      	bmi.n	80007e0 <__aeabi_ddiv+0x584>
 80007de:	e755      	b.n	800068c <__aeabi_ddiv+0x430>
 80007e0:	2200      	movs	r2, #0
 80007e2:	2301      	movs	r3, #1
 80007e4:	2400      	movs	r4, #0
 80007e6:	4690      	mov	r8, r2
 80007e8:	e598      	b.n	800031c <__aeabi_ddiv+0xc0>
 80007ea:	000a      	movs	r2, r1
 80007ec:	42bc      	cmp	r4, r7
 80007ee:	d000      	beq.n	80007f2 <__aeabi_ddiv+0x596>
 80007f0:	e66e      	b.n	80004d0 <__aeabi_ddiv+0x274>
 80007f2:	454b      	cmp	r3, r9
 80007f4:	d000      	beq.n	80007f8 <__aeabi_ddiv+0x59c>
 80007f6:	e66b      	b.n	80004d0 <__aeabi_ddiv+0x274>
 80007f8:	e66c      	b.n	80004d4 <__aeabi_ddiv+0x278>
 80007fa:	4b23      	ldr	r3, [pc, #140]	@ (8000888 <__aeabi_ddiv+0x62c>)
 80007fc:	4a23      	ldr	r2, [pc, #140]	@ (800088c <__aeabi_ddiv+0x630>)
 80007fe:	4453      	add	r3, sl
 8000800:	4592      	cmp	sl, r2
 8000802:	da00      	bge.n	8000806 <__aeabi_ddiv+0x5aa>
 8000804:	e718      	b.n	8000638 <__aeabi_ddiv+0x3dc>
 8000806:	2101      	movs	r1, #1
 8000808:	4249      	negs	r1, r1
 800080a:	1d0a      	adds	r2, r1, #4
 800080c:	428a      	cmp	r2, r1
 800080e:	4189      	sbcs	r1, r1
 8000810:	4249      	negs	r1, r1
 8000812:	448b      	add	fp, r1
 8000814:	e666      	b.n	80004e4 <__aeabi_ddiv+0x288>
 8000816:	210f      	movs	r1, #15
 8000818:	4011      	ands	r1, r2
 800081a:	2904      	cmp	r1, #4
 800081c:	d100      	bne.n	8000820 <__aeabi_ddiv+0x5c4>
 800081e:	e661      	b.n	80004e4 <__aeabi_ddiv+0x288>
 8000820:	0011      	movs	r1, r2
 8000822:	e7f2      	b.n	800080a <__aeabi_ddiv+0x5ae>
 8000824:	42bc      	cmp	r4, r7
 8000826:	d800      	bhi.n	800082a <__aeabi_ddiv+0x5ce>
 8000828:	e60a      	b.n	8000440 <__aeabi_ddiv+0x1e4>
 800082a:	2302      	movs	r3, #2
 800082c:	425b      	negs	r3, r3
 800082e:	469c      	mov	ip, r3
 8000830:	9900      	ldr	r1, [sp, #0]
 8000832:	444f      	add	r7, r9
 8000834:	454f      	cmp	r7, r9
 8000836:	419b      	sbcs	r3, r3
 8000838:	44e3      	add	fp, ip
 800083a:	468c      	mov	ip, r1
 800083c:	425b      	negs	r3, r3
 800083e:	4463      	add	r3, ip
 8000840:	18c0      	adds	r0, r0, r3
 8000842:	e5ff      	b.n	8000444 <__aeabi_ddiv+0x1e8>
 8000844:	4649      	mov	r1, r9
 8000846:	9d00      	ldr	r5, [sp, #0]
 8000848:	0048      	lsls	r0, r1, #1
 800084a:	4548      	cmp	r0, r9
 800084c:	4189      	sbcs	r1, r1
 800084e:	46ac      	mov	ip, r5
 8000850:	4249      	negs	r1, r1
 8000852:	4461      	add	r1, ip
 8000854:	4681      	mov	r9, r0
 8000856:	3a02      	subs	r2, #2
 8000858:	1864      	adds	r4, r4, r1
 800085a:	e7c7      	b.n	80007ec <__aeabi_ddiv+0x590>
 800085c:	2480      	movs	r4, #128	@ 0x80
 800085e:	465b      	mov	r3, fp
 8000860:	0324      	lsls	r4, r4, #12
 8000862:	431c      	orrs	r4, r3
 8000864:	0324      	lsls	r4, r4, #12
 8000866:	4690      	mov	r8, r2
 8000868:	4b04      	ldr	r3, [pc, #16]	@ (800087c <__aeabi_ddiv+0x620>)
 800086a:	0b24      	lsrs	r4, r4, #12
 800086c:	e556      	b.n	800031c <__aeabi_ddiv+0xc0>
 800086e:	4599      	cmp	r9, r3
 8000870:	d3e8      	bcc.n	8000844 <__aeabi_ddiv+0x5e8>
 8000872:	000a      	movs	r2, r1
 8000874:	e7bd      	b.n	80007f2 <__aeabi_ddiv+0x596>
 8000876:	2300      	movs	r3, #0
 8000878:	e708      	b.n	800068c <__aeabi_ddiv+0x430>
 800087a:	46c0      	nop			@ (mov r8, r8)
 800087c:	000007ff 	.word	0x000007ff
 8000880:	0000043e 	.word	0x0000043e
 8000884:	0000041e 	.word	0x0000041e
 8000888:	000003ff 	.word	0x000003ff
 800088c:	fffffc02 	.word	0xfffffc02

08000890 <__aeabi_dmul>:
 8000890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000892:	4657      	mov	r7, sl
 8000894:	46de      	mov	lr, fp
 8000896:	464e      	mov	r6, r9
 8000898:	4645      	mov	r5, r8
 800089a:	b5e0      	push	{r5, r6, r7, lr}
 800089c:	001f      	movs	r7, r3
 800089e:	030b      	lsls	r3, r1, #12
 80008a0:	0b1b      	lsrs	r3, r3, #12
 80008a2:	0016      	movs	r6, r2
 80008a4:	469a      	mov	sl, r3
 80008a6:	0fca      	lsrs	r2, r1, #31
 80008a8:	004b      	lsls	r3, r1, #1
 80008aa:	0004      	movs	r4, r0
 80008ac:	4693      	mov	fp, r2
 80008ae:	b087      	sub	sp, #28
 80008b0:	0d5b      	lsrs	r3, r3, #21
 80008b2:	d100      	bne.n	80008b6 <__aeabi_dmul+0x26>
 80008b4:	e0d5      	b.n	8000a62 <__aeabi_dmul+0x1d2>
 80008b6:	4abb      	ldr	r2, [pc, #748]	@ (8000ba4 <__aeabi_dmul+0x314>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d100      	bne.n	80008be <__aeabi_dmul+0x2e>
 80008bc:	e0f8      	b.n	8000ab0 <__aeabi_dmul+0x220>
 80008be:	4651      	mov	r1, sl
 80008c0:	0f42      	lsrs	r2, r0, #29
 80008c2:	00c9      	lsls	r1, r1, #3
 80008c4:	430a      	orrs	r2, r1
 80008c6:	2180      	movs	r1, #128	@ 0x80
 80008c8:	0409      	lsls	r1, r1, #16
 80008ca:	4311      	orrs	r1, r2
 80008cc:	00c2      	lsls	r2, r0, #3
 80008ce:	4691      	mov	r9, r2
 80008d0:	4ab5      	ldr	r2, [pc, #724]	@ (8000ba8 <__aeabi_dmul+0x318>)
 80008d2:	468a      	mov	sl, r1
 80008d4:	189d      	adds	r5, r3, r2
 80008d6:	2300      	movs	r3, #0
 80008d8:	4698      	mov	r8, r3
 80008da:	9302      	str	r3, [sp, #8]
 80008dc:	033c      	lsls	r4, r7, #12
 80008de:	007b      	lsls	r3, r7, #1
 80008e0:	0ffa      	lsrs	r2, r7, #31
 80008e2:	0030      	movs	r0, r6
 80008e4:	0b24      	lsrs	r4, r4, #12
 80008e6:	0d5b      	lsrs	r3, r3, #21
 80008e8:	9200      	str	r2, [sp, #0]
 80008ea:	d100      	bne.n	80008ee <__aeabi_dmul+0x5e>
 80008ec:	e096      	b.n	8000a1c <__aeabi_dmul+0x18c>
 80008ee:	4aad      	ldr	r2, [pc, #692]	@ (8000ba4 <__aeabi_dmul+0x314>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d031      	beq.n	8000958 <__aeabi_dmul+0xc8>
 80008f4:	0f72      	lsrs	r2, r6, #29
 80008f6:	00e4      	lsls	r4, r4, #3
 80008f8:	4322      	orrs	r2, r4
 80008fa:	2480      	movs	r4, #128	@ 0x80
 80008fc:	0424      	lsls	r4, r4, #16
 80008fe:	4314      	orrs	r4, r2
 8000900:	4aa9      	ldr	r2, [pc, #676]	@ (8000ba8 <__aeabi_dmul+0x318>)
 8000902:	00f0      	lsls	r0, r6, #3
 8000904:	4694      	mov	ip, r2
 8000906:	4463      	add	r3, ip
 8000908:	195b      	adds	r3, r3, r5
 800090a:	1c5a      	adds	r2, r3, #1
 800090c:	9201      	str	r2, [sp, #4]
 800090e:	4642      	mov	r2, r8
 8000910:	2600      	movs	r6, #0
 8000912:	2a0a      	cmp	r2, #10
 8000914:	dc42      	bgt.n	800099c <__aeabi_dmul+0x10c>
 8000916:	465a      	mov	r2, fp
 8000918:	9900      	ldr	r1, [sp, #0]
 800091a:	404a      	eors	r2, r1
 800091c:	4693      	mov	fp, r2
 800091e:	4642      	mov	r2, r8
 8000920:	2a02      	cmp	r2, #2
 8000922:	dc32      	bgt.n	800098a <__aeabi_dmul+0xfa>
 8000924:	3a01      	subs	r2, #1
 8000926:	2a01      	cmp	r2, #1
 8000928:	d900      	bls.n	800092c <__aeabi_dmul+0x9c>
 800092a:	e149      	b.n	8000bc0 <__aeabi_dmul+0x330>
 800092c:	2e02      	cmp	r6, #2
 800092e:	d100      	bne.n	8000932 <__aeabi_dmul+0xa2>
 8000930:	e0ca      	b.n	8000ac8 <__aeabi_dmul+0x238>
 8000932:	2e01      	cmp	r6, #1
 8000934:	d13d      	bne.n	80009b2 <__aeabi_dmul+0x122>
 8000936:	2300      	movs	r3, #0
 8000938:	2400      	movs	r4, #0
 800093a:	2200      	movs	r2, #0
 800093c:	0010      	movs	r0, r2
 800093e:	465a      	mov	r2, fp
 8000940:	051b      	lsls	r3, r3, #20
 8000942:	4323      	orrs	r3, r4
 8000944:	07d2      	lsls	r2, r2, #31
 8000946:	4313      	orrs	r3, r2
 8000948:	0019      	movs	r1, r3
 800094a:	b007      	add	sp, #28
 800094c:	bcf0      	pop	{r4, r5, r6, r7}
 800094e:	46bb      	mov	fp, r7
 8000950:	46b2      	mov	sl, r6
 8000952:	46a9      	mov	r9, r5
 8000954:	46a0      	mov	r8, r4
 8000956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000958:	4b92      	ldr	r3, [pc, #584]	@ (8000ba4 <__aeabi_dmul+0x314>)
 800095a:	4326      	orrs	r6, r4
 800095c:	18eb      	adds	r3, r5, r3
 800095e:	2e00      	cmp	r6, #0
 8000960:	d100      	bne.n	8000964 <__aeabi_dmul+0xd4>
 8000962:	e0bb      	b.n	8000adc <__aeabi_dmul+0x24c>
 8000964:	2203      	movs	r2, #3
 8000966:	4641      	mov	r1, r8
 8000968:	4311      	orrs	r1, r2
 800096a:	465a      	mov	r2, fp
 800096c:	4688      	mov	r8, r1
 800096e:	9900      	ldr	r1, [sp, #0]
 8000970:	404a      	eors	r2, r1
 8000972:	2180      	movs	r1, #128	@ 0x80
 8000974:	0109      	lsls	r1, r1, #4
 8000976:	468c      	mov	ip, r1
 8000978:	0029      	movs	r1, r5
 800097a:	4461      	add	r1, ip
 800097c:	9101      	str	r1, [sp, #4]
 800097e:	4641      	mov	r1, r8
 8000980:	290a      	cmp	r1, #10
 8000982:	dd00      	ble.n	8000986 <__aeabi_dmul+0xf6>
 8000984:	e233      	b.n	8000dee <__aeabi_dmul+0x55e>
 8000986:	4693      	mov	fp, r2
 8000988:	2603      	movs	r6, #3
 800098a:	4642      	mov	r2, r8
 800098c:	2701      	movs	r7, #1
 800098e:	4097      	lsls	r7, r2
 8000990:	21a6      	movs	r1, #166	@ 0xa6
 8000992:	003a      	movs	r2, r7
 8000994:	00c9      	lsls	r1, r1, #3
 8000996:	400a      	ands	r2, r1
 8000998:	420f      	tst	r7, r1
 800099a:	d031      	beq.n	8000a00 <__aeabi_dmul+0x170>
 800099c:	9e02      	ldr	r6, [sp, #8]
 800099e:	2e02      	cmp	r6, #2
 80009a0:	d100      	bne.n	80009a4 <__aeabi_dmul+0x114>
 80009a2:	e235      	b.n	8000e10 <__aeabi_dmul+0x580>
 80009a4:	2e03      	cmp	r6, #3
 80009a6:	d100      	bne.n	80009aa <__aeabi_dmul+0x11a>
 80009a8:	e1d2      	b.n	8000d50 <__aeabi_dmul+0x4c0>
 80009aa:	4654      	mov	r4, sl
 80009ac:	4648      	mov	r0, r9
 80009ae:	2e01      	cmp	r6, #1
 80009b0:	d0c1      	beq.n	8000936 <__aeabi_dmul+0xa6>
 80009b2:	9a01      	ldr	r2, [sp, #4]
 80009b4:	4b7d      	ldr	r3, [pc, #500]	@ (8000bac <__aeabi_dmul+0x31c>)
 80009b6:	4694      	mov	ip, r2
 80009b8:	4463      	add	r3, ip
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	dc00      	bgt.n	80009c0 <__aeabi_dmul+0x130>
 80009be:	e0c0      	b.n	8000b42 <__aeabi_dmul+0x2b2>
 80009c0:	0742      	lsls	r2, r0, #29
 80009c2:	d009      	beq.n	80009d8 <__aeabi_dmul+0x148>
 80009c4:	220f      	movs	r2, #15
 80009c6:	4002      	ands	r2, r0
 80009c8:	2a04      	cmp	r2, #4
 80009ca:	d005      	beq.n	80009d8 <__aeabi_dmul+0x148>
 80009cc:	1d02      	adds	r2, r0, #4
 80009ce:	4282      	cmp	r2, r0
 80009d0:	4180      	sbcs	r0, r0
 80009d2:	4240      	negs	r0, r0
 80009d4:	1824      	adds	r4, r4, r0
 80009d6:	0010      	movs	r0, r2
 80009d8:	01e2      	lsls	r2, r4, #7
 80009da:	d506      	bpl.n	80009ea <__aeabi_dmul+0x15a>
 80009dc:	4b74      	ldr	r3, [pc, #464]	@ (8000bb0 <__aeabi_dmul+0x320>)
 80009de:	9a01      	ldr	r2, [sp, #4]
 80009e0:	401c      	ands	r4, r3
 80009e2:	2380      	movs	r3, #128	@ 0x80
 80009e4:	4694      	mov	ip, r2
 80009e6:	00db      	lsls	r3, r3, #3
 80009e8:	4463      	add	r3, ip
 80009ea:	4a72      	ldr	r2, [pc, #456]	@ (8000bb4 <__aeabi_dmul+0x324>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	dc6b      	bgt.n	8000ac8 <__aeabi_dmul+0x238>
 80009f0:	0762      	lsls	r2, r4, #29
 80009f2:	08c0      	lsrs	r0, r0, #3
 80009f4:	0264      	lsls	r4, r4, #9
 80009f6:	055b      	lsls	r3, r3, #21
 80009f8:	4302      	orrs	r2, r0
 80009fa:	0b24      	lsrs	r4, r4, #12
 80009fc:	0d5b      	lsrs	r3, r3, #21
 80009fe:	e79d      	b.n	800093c <__aeabi_dmul+0xac>
 8000a00:	2190      	movs	r1, #144	@ 0x90
 8000a02:	0089      	lsls	r1, r1, #2
 8000a04:	420f      	tst	r7, r1
 8000a06:	d163      	bne.n	8000ad0 <__aeabi_dmul+0x240>
 8000a08:	2288      	movs	r2, #136	@ 0x88
 8000a0a:	423a      	tst	r2, r7
 8000a0c:	d100      	bne.n	8000a10 <__aeabi_dmul+0x180>
 8000a0e:	e0d7      	b.n	8000bc0 <__aeabi_dmul+0x330>
 8000a10:	9b00      	ldr	r3, [sp, #0]
 8000a12:	46a2      	mov	sl, r4
 8000a14:	469b      	mov	fp, r3
 8000a16:	4681      	mov	r9, r0
 8000a18:	9602      	str	r6, [sp, #8]
 8000a1a:	e7bf      	b.n	800099c <__aeabi_dmul+0x10c>
 8000a1c:	0023      	movs	r3, r4
 8000a1e:	4333      	orrs	r3, r6
 8000a20:	d100      	bne.n	8000a24 <__aeabi_dmul+0x194>
 8000a22:	e07f      	b.n	8000b24 <__aeabi_dmul+0x294>
 8000a24:	2c00      	cmp	r4, #0
 8000a26:	d100      	bne.n	8000a2a <__aeabi_dmul+0x19a>
 8000a28:	e1ad      	b.n	8000d86 <__aeabi_dmul+0x4f6>
 8000a2a:	0020      	movs	r0, r4
 8000a2c:	f000 ff08 	bl	8001840 <__clzsi2>
 8000a30:	0002      	movs	r2, r0
 8000a32:	0003      	movs	r3, r0
 8000a34:	3a0b      	subs	r2, #11
 8000a36:	201d      	movs	r0, #29
 8000a38:	0019      	movs	r1, r3
 8000a3a:	1a82      	subs	r2, r0, r2
 8000a3c:	0030      	movs	r0, r6
 8000a3e:	3908      	subs	r1, #8
 8000a40:	40d0      	lsrs	r0, r2
 8000a42:	408c      	lsls	r4, r1
 8000a44:	4304      	orrs	r4, r0
 8000a46:	0030      	movs	r0, r6
 8000a48:	4088      	lsls	r0, r1
 8000a4a:	4a5b      	ldr	r2, [pc, #364]	@ (8000bb8 <__aeabi_dmul+0x328>)
 8000a4c:	1aeb      	subs	r3, r5, r3
 8000a4e:	4694      	mov	ip, r2
 8000a50:	4463      	add	r3, ip
 8000a52:	1c5a      	adds	r2, r3, #1
 8000a54:	9201      	str	r2, [sp, #4]
 8000a56:	4642      	mov	r2, r8
 8000a58:	2600      	movs	r6, #0
 8000a5a:	2a0a      	cmp	r2, #10
 8000a5c:	dc00      	bgt.n	8000a60 <__aeabi_dmul+0x1d0>
 8000a5e:	e75a      	b.n	8000916 <__aeabi_dmul+0x86>
 8000a60:	e79c      	b.n	800099c <__aeabi_dmul+0x10c>
 8000a62:	4653      	mov	r3, sl
 8000a64:	4303      	orrs	r3, r0
 8000a66:	4699      	mov	r9, r3
 8000a68:	d054      	beq.n	8000b14 <__aeabi_dmul+0x284>
 8000a6a:	4653      	mov	r3, sl
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d100      	bne.n	8000a72 <__aeabi_dmul+0x1e2>
 8000a70:	e177      	b.n	8000d62 <__aeabi_dmul+0x4d2>
 8000a72:	4650      	mov	r0, sl
 8000a74:	f000 fee4 	bl	8001840 <__clzsi2>
 8000a78:	230b      	movs	r3, #11
 8000a7a:	425b      	negs	r3, r3
 8000a7c:	469c      	mov	ip, r3
 8000a7e:	0002      	movs	r2, r0
 8000a80:	4484      	add	ip, r0
 8000a82:	0011      	movs	r1, r2
 8000a84:	4650      	mov	r0, sl
 8000a86:	3908      	subs	r1, #8
 8000a88:	4088      	lsls	r0, r1
 8000a8a:	231d      	movs	r3, #29
 8000a8c:	4680      	mov	r8, r0
 8000a8e:	4660      	mov	r0, ip
 8000a90:	1a1b      	subs	r3, r3, r0
 8000a92:	0020      	movs	r0, r4
 8000a94:	40d8      	lsrs	r0, r3
 8000a96:	0003      	movs	r3, r0
 8000a98:	4640      	mov	r0, r8
 8000a9a:	4303      	orrs	r3, r0
 8000a9c:	469a      	mov	sl, r3
 8000a9e:	0023      	movs	r3, r4
 8000aa0:	408b      	lsls	r3, r1
 8000aa2:	4699      	mov	r9, r3
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	4d44      	ldr	r5, [pc, #272]	@ (8000bb8 <__aeabi_dmul+0x328>)
 8000aa8:	4698      	mov	r8, r3
 8000aaa:	1aad      	subs	r5, r5, r2
 8000aac:	9302      	str	r3, [sp, #8]
 8000aae:	e715      	b.n	80008dc <__aeabi_dmul+0x4c>
 8000ab0:	4652      	mov	r2, sl
 8000ab2:	4302      	orrs	r2, r0
 8000ab4:	4691      	mov	r9, r2
 8000ab6:	d126      	bne.n	8000b06 <__aeabi_dmul+0x276>
 8000ab8:	2200      	movs	r2, #0
 8000aba:	001d      	movs	r5, r3
 8000abc:	2302      	movs	r3, #2
 8000abe:	4692      	mov	sl, r2
 8000ac0:	3208      	adds	r2, #8
 8000ac2:	4690      	mov	r8, r2
 8000ac4:	9302      	str	r3, [sp, #8]
 8000ac6:	e709      	b.n	80008dc <__aeabi_dmul+0x4c>
 8000ac8:	2400      	movs	r4, #0
 8000aca:	2200      	movs	r2, #0
 8000acc:	4b35      	ldr	r3, [pc, #212]	@ (8000ba4 <__aeabi_dmul+0x314>)
 8000ace:	e735      	b.n	800093c <__aeabi_dmul+0xac>
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	2480      	movs	r4, #128	@ 0x80
 8000ad4:	469b      	mov	fp, r3
 8000ad6:	0324      	lsls	r4, r4, #12
 8000ad8:	4b32      	ldr	r3, [pc, #200]	@ (8000ba4 <__aeabi_dmul+0x314>)
 8000ada:	e72f      	b.n	800093c <__aeabi_dmul+0xac>
 8000adc:	2202      	movs	r2, #2
 8000ade:	4641      	mov	r1, r8
 8000ae0:	4311      	orrs	r1, r2
 8000ae2:	2280      	movs	r2, #128	@ 0x80
 8000ae4:	0112      	lsls	r2, r2, #4
 8000ae6:	4694      	mov	ip, r2
 8000ae8:	002a      	movs	r2, r5
 8000aea:	4462      	add	r2, ip
 8000aec:	4688      	mov	r8, r1
 8000aee:	9201      	str	r2, [sp, #4]
 8000af0:	290a      	cmp	r1, #10
 8000af2:	dd00      	ble.n	8000af6 <__aeabi_dmul+0x266>
 8000af4:	e752      	b.n	800099c <__aeabi_dmul+0x10c>
 8000af6:	465a      	mov	r2, fp
 8000af8:	2000      	movs	r0, #0
 8000afa:	9900      	ldr	r1, [sp, #0]
 8000afc:	0004      	movs	r4, r0
 8000afe:	404a      	eors	r2, r1
 8000b00:	4693      	mov	fp, r2
 8000b02:	2602      	movs	r6, #2
 8000b04:	e70b      	b.n	800091e <__aeabi_dmul+0x8e>
 8000b06:	220c      	movs	r2, #12
 8000b08:	001d      	movs	r5, r3
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	4681      	mov	r9, r0
 8000b0e:	4690      	mov	r8, r2
 8000b10:	9302      	str	r3, [sp, #8]
 8000b12:	e6e3      	b.n	80008dc <__aeabi_dmul+0x4c>
 8000b14:	2300      	movs	r3, #0
 8000b16:	469a      	mov	sl, r3
 8000b18:	3304      	adds	r3, #4
 8000b1a:	4698      	mov	r8, r3
 8000b1c:	3b03      	subs	r3, #3
 8000b1e:	2500      	movs	r5, #0
 8000b20:	9302      	str	r3, [sp, #8]
 8000b22:	e6db      	b.n	80008dc <__aeabi_dmul+0x4c>
 8000b24:	4642      	mov	r2, r8
 8000b26:	3301      	adds	r3, #1
 8000b28:	431a      	orrs	r2, r3
 8000b2a:	002b      	movs	r3, r5
 8000b2c:	4690      	mov	r8, r2
 8000b2e:	1c5a      	adds	r2, r3, #1
 8000b30:	9201      	str	r2, [sp, #4]
 8000b32:	4642      	mov	r2, r8
 8000b34:	2400      	movs	r4, #0
 8000b36:	2000      	movs	r0, #0
 8000b38:	2601      	movs	r6, #1
 8000b3a:	2a0a      	cmp	r2, #10
 8000b3c:	dc00      	bgt.n	8000b40 <__aeabi_dmul+0x2b0>
 8000b3e:	e6ea      	b.n	8000916 <__aeabi_dmul+0x86>
 8000b40:	e72c      	b.n	800099c <__aeabi_dmul+0x10c>
 8000b42:	2201      	movs	r2, #1
 8000b44:	1ad2      	subs	r2, r2, r3
 8000b46:	2a38      	cmp	r2, #56	@ 0x38
 8000b48:	dd00      	ble.n	8000b4c <__aeabi_dmul+0x2bc>
 8000b4a:	e6f4      	b.n	8000936 <__aeabi_dmul+0xa6>
 8000b4c:	2a1f      	cmp	r2, #31
 8000b4e:	dc00      	bgt.n	8000b52 <__aeabi_dmul+0x2c2>
 8000b50:	e12a      	b.n	8000da8 <__aeabi_dmul+0x518>
 8000b52:	211f      	movs	r1, #31
 8000b54:	4249      	negs	r1, r1
 8000b56:	1acb      	subs	r3, r1, r3
 8000b58:	0021      	movs	r1, r4
 8000b5a:	40d9      	lsrs	r1, r3
 8000b5c:	000b      	movs	r3, r1
 8000b5e:	2a20      	cmp	r2, #32
 8000b60:	d005      	beq.n	8000b6e <__aeabi_dmul+0x2de>
 8000b62:	4a16      	ldr	r2, [pc, #88]	@ (8000bbc <__aeabi_dmul+0x32c>)
 8000b64:	9d01      	ldr	r5, [sp, #4]
 8000b66:	4694      	mov	ip, r2
 8000b68:	4465      	add	r5, ip
 8000b6a:	40ac      	lsls	r4, r5
 8000b6c:	4320      	orrs	r0, r4
 8000b6e:	1e42      	subs	r2, r0, #1
 8000b70:	4190      	sbcs	r0, r2
 8000b72:	4318      	orrs	r0, r3
 8000b74:	2307      	movs	r3, #7
 8000b76:	0019      	movs	r1, r3
 8000b78:	2400      	movs	r4, #0
 8000b7a:	4001      	ands	r1, r0
 8000b7c:	4203      	tst	r3, r0
 8000b7e:	d00c      	beq.n	8000b9a <__aeabi_dmul+0x30a>
 8000b80:	230f      	movs	r3, #15
 8000b82:	4003      	ands	r3, r0
 8000b84:	2b04      	cmp	r3, #4
 8000b86:	d100      	bne.n	8000b8a <__aeabi_dmul+0x2fa>
 8000b88:	e140      	b.n	8000e0c <__aeabi_dmul+0x57c>
 8000b8a:	1d03      	adds	r3, r0, #4
 8000b8c:	4283      	cmp	r3, r0
 8000b8e:	41a4      	sbcs	r4, r4
 8000b90:	0018      	movs	r0, r3
 8000b92:	4264      	negs	r4, r4
 8000b94:	0761      	lsls	r1, r4, #29
 8000b96:	0264      	lsls	r4, r4, #9
 8000b98:	0b24      	lsrs	r4, r4, #12
 8000b9a:	08c2      	lsrs	r2, r0, #3
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	430a      	orrs	r2, r1
 8000ba0:	e6cc      	b.n	800093c <__aeabi_dmul+0xac>
 8000ba2:	46c0      	nop			@ (mov r8, r8)
 8000ba4:	000007ff 	.word	0x000007ff
 8000ba8:	fffffc01 	.word	0xfffffc01
 8000bac:	000003ff 	.word	0x000003ff
 8000bb0:	feffffff 	.word	0xfeffffff
 8000bb4:	000007fe 	.word	0x000007fe
 8000bb8:	fffffc0d 	.word	0xfffffc0d
 8000bbc:	0000043e 	.word	0x0000043e
 8000bc0:	4649      	mov	r1, r9
 8000bc2:	464a      	mov	r2, r9
 8000bc4:	0409      	lsls	r1, r1, #16
 8000bc6:	0c09      	lsrs	r1, r1, #16
 8000bc8:	000d      	movs	r5, r1
 8000bca:	0c16      	lsrs	r6, r2, #16
 8000bcc:	0c02      	lsrs	r2, r0, #16
 8000bce:	0400      	lsls	r0, r0, #16
 8000bd0:	0c00      	lsrs	r0, r0, #16
 8000bd2:	4345      	muls	r5, r0
 8000bd4:	46ac      	mov	ip, r5
 8000bd6:	0005      	movs	r5, r0
 8000bd8:	4375      	muls	r5, r6
 8000bda:	46a8      	mov	r8, r5
 8000bdc:	0015      	movs	r5, r2
 8000bde:	000f      	movs	r7, r1
 8000be0:	4375      	muls	r5, r6
 8000be2:	9200      	str	r2, [sp, #0]
 8000be4:	9502      	str	r5, [sp, #8]
 8000be6:	002a      	movs	r2, r5
 8000be8:	9d00      	ldr	r5, [sp, #0]
 8000bea:	436f      	muls	r7, r5
 8000bec:	4665      	mov	r5, ip
 8000bee:	0c2d      	lsrs	r5, r5, #16
 8000bf0:	46a9      	mov	r9, r5
 8000bf2:	4447      	add	r7, r8
 8000bf4:	444f      	add	r7, r9
 8000bf6:	45b8      	cmp	r8, r7
 8000bf8:	d905      	bls.n	8000c06 <__aeabi_dmul+0x376>
 8000bfa:	0015      	movs	r5, r2
 8000bfc:	2280      	movs	r2, #128	@ 0x80
 8000bfe:	0252      	lsls	r2, r2, #9
 8000c00:	4690      	mov	r8, r2
 8000c02:	4445      	add	r5, r8
 8000c04:	9502      	str	r5, [sp, #8]
 8000c06:	0c3d      	lsrs	r5, r7, #16
 8000c08:	9503      	str	r5, [sp, #12]
 8000c0a:	4665      	mov	r5, ip
 8000c0c:	042d      	lsls	r5, r5, #16
 8000c0e:	043f      	lsls	r7, r7, #16
 8000c10:	0c2d      	lsrs	r5, r5, #16
 8000c12:	46ac      	mov	ip, r5
 8000c14:	003d      	movs	r5, r7
 8000c16:	4465      	add	r5, ip
 8000c18:	9504      	str	r5, [sp, #16]
 8000c1a:	0c25      	lsrs	r5, r4, #16
 8000c1c:	0424      	lsls	r4, r4, #16
 8000c1e:	0c24      	lsrs	r4, r4, #16
 8000c20:	46ac      	mov	ip, r5
 8000c22:	0025      	movs	r5, r4
 8000c24:	4375      	muls	r5, r6
 8000c26:	46a8      	mov	r8, r5
 8000c28:	4665      	mov	r5, ip
 8000c2a:	000f      	movs	r7, r1
 8000c2c:	4369      	muls	r1, r5
 8000c2e:	4441      	add	r1, r8
 8000c30:	4689      	mov	r9, r1
 8000c32:	4367      	muls	r7, r4
 8000c34:	0c39      	lsrs	r1, r7, #16
 8000c36:	4449      	add	r1, r9
 8000c38:	436e      	muls	r6, r5
 8000c3a:	4588      	cmp	r8, r1
 8000c3c:	d903      	bls.n	8000c46 <__aeabi_dmul+0x3b6>
 8000c3e:	2280      	movs	r2, #128	@ 0x80
 8000c40:	0252      	lsls	r2, r2, #9
 8000c42:	4690      	mov	r8, r2
 8000c44:	4446      	add	r6, r8
 8000c46:	0c0d      	lsrs	r5, r1, #16
 8000c48:	46a8      	mov	r8, r5
 8000c4a:	0035      	movs	r5, r6
 8000c4c:	4445      	add	r5, r8
 8000c4e:	9505      	str	r5, [sp, #20]
 8000c50:	9d03      	ldr	r5, [sp, #12]
 8000c52:	043f      	lsls	r7, r7, #16
 8000c54:	46a8      	mov	r8, r5
 8000c56:	0c3f      	lsrs	r7, r7, #16
 8000c58:	0409      	lsls	r1, r1, #16
 8000c5a:	19c9      	adds	r1, r1, r7
 8000c5c:	4488      	add	r8, r1
 8000c5e:	4645      	mov	r5, r8
 8000c60:	9503      	str	r5, [sp, #12]
 8000c62:	4655      	mov	r5, sl
 8000c64:	042e      	lsls	r6, r5, #16
 8000c66:	0c36      	lsrs	r6, r6, #16
 8000c68:	0c2f      	lsrs	r7, r5, #16
 8000c6a:	0035      	movs	r5, r6
 8000c6c:	4345      	muls	r5, r0
 8000c6e:	4378      	muls	r0, r7
 8000c70:	4681      	mov	r9, r0
 8000c72:	0038      	movs	r0, r7
 8000c74:	46a8      	mov	r8, r5
 8000c76:	0c2d      	lsrs	r5, r5, #16
 8000c78:	46aa      	mov	sl, r5
 8000c7a:	9a00      	ldr	r2, [sp, #0]
 8000c7c:	4350      	muls	r0, r2
 8000c7e:	4372      	muls	r2, r6
 8000c80:	444a      	add	r2, r9
 8000c82:	4452      	add	r2, sl
 8000c84:	4591      	cmp	r9, r2
 8000c86:	d903      	bls.n	8000c90 <__aeabi_dmul+0x400>
 8000c88:	2580      	movs	r5, #128	@ 0x80
 8000c8a:	026d      	lsls	r5, r5, #9
 8000c8c:	46a9      	mov	r9, r5
 8000c8e:	4448      	add	r0, r9
 8000c90:	0c15      	lsrs	r5, r2, #16
 8000c92:	46a9      	mov	r9, r5
 8000c94:	4645      	mov	r5, r8
 8000c96:	042d      	lsls	r5, r5, #16
 8000c98:	0c2d      	lsrs	r5, r5, #16
 8000c9a:	46a8      	mov	r8, r5
 8000c9c:	4665      	mov	r5, ip
 8000c9e:	437d      	muls	r5, r7
 8000ca0:	0412      	lsls	r2, r2, #16
 8000ca2:	4448      	add	r0, r9
 8000ca4:	4490      	add	r8, r2
 8000ca6:	46a9      	mov	r9, r5
 8000ca8:	0032      	movs	r2, r6
 8000caa:	4665      	mov	r5, ip
 8000cac:	4362      	muls	r2, r4
 8000cae:	436e      	muls	r6, r5
 8000cb0:	437c      	muls	r4, r7
 8000cb2:	0c17      	lsrs	r7, r2, #16
 8000cb4:	1936      	adds	r6, r6, r4
 8000cb6:	19bf      	adds	r7, r7, r6
 8000cb8:	42bc      	cmp	r4, r7
 8000cba:	d903      	bls.n	8000cc4 <__aeabi_dmul+0x434>
 8000cbc:	2480      	movs	r4, #128	@ 0x80
 8000cbe:	0264      	lsls	r4, r4, #9
 8000cc0:	46a4      	mov	ip, r4
 8000cc2:	44e1      	add	r9, ip
 8000cc4:	9c02      	ldr	r4, [sp, #8]
 8000cc6:	9e03      	ldr	r6, [sp, #12]
 8000cc8:	46a4      	mov	ip, r4
 8000cca:	9d05      	ldr	r5, [sp, #20]
 8000ccc:	4466      	add	r6, ip
 8000cce:	428e      	cmp	r6, r1
 8000cd0:	4189      	sbcs	r1, r1
 8000cd2:	46ac      	mov	ip, r5
 8000cd4:	0412      	lsls	r2, r2, #16
 8000cd6:	043c      	lsls	r4, r7, #16
 8000cd8:	0c12      	lsrs	r2, r2, #16
 8000cda:	18a2      	adds	r2, r4, r2
 8000cdc:	4462      	add	r2, ip
 8000cde:	4249      	negs	r1, r1
 8000ce0:	1854      	adds	r4, r2, r1
 8000ce2:	4446      	add	r6, r8
 8000ce4:	46a4      	mov	ip, r4
 8000ce6:	4546      	cmp	r6, r8
 8000ce8:	41a4      	sbcs	r4, r4
 8000cea:	4682      	mov	sl, r0
 8000cec:	4264      	negs	r4, r4
 8000cee:	46a0      	mov	r8, r4
 8000cf0:	42aa      	cmp	r2, r5
 8000cf2:	4192      	sbcs	r2, r2
 8000cf4:	458c      	cmp	ip, r1
 8000cf6:	4189      	sbcs	r1, r1
 8000cf8:	44e2      	add	sl, ip
 8000cfa:	44d0      	add	r8, sl
 8000cfc:	4249      	negs	r1, r1
 8000cfe:	4252      	negs	r2, r2
 8000d00:	430a      	orrs	r2, r1
 8000d02:	45a0      	cmp	r8, r4
 8000d04:	41a4      	sbcs	r4, r4
 8000d06:	4582      	cmp	sl, r0
 8000d08:	4189      	sbcs	r1, r1
 8000d0a:	4264      	negs	r4, r4
 8000d0c:	4249      	negs	r1, r1
 8000d0e:	430c      	orrs	r4, r1
 8000d10:	4641      	mov	r1, r8
 8000d12:	0c3f      	lsrs	r7, r7, #16
 8000d14:	19d2      	adds	r2, r2, r7
 8000d16:	1912      	adds	r2, r2, r4
 8000d18:	0dcc      	lsrs	r4, r1, #23
 8000d1a:	9904      	ldr	r1, [sp, #16]
 8000d1c:	0270      	lsls	r0, r6, #9
 8000d1e:	4308      	orrs	r0, r1
 8000d20:	1e41      	subs	r1, r0, #1
 8000d22:	4188      	sbcs	r0, r1
 8000d24:	4641      	mov	r1, r8
 8000d26:	444a      	add	r2, r9
 8000d28:	0df6      	lsrs	r6, r6, #23
 8000d2a:	0252      	lsls	r2, r2, #9
 8000d2c:	4330      	orrs	r0, r6
 8000d2e:	0249      	lsls	r1, r1, #9
 8000d30:	4314      	orrs	r4, r2
 8000d32:	4308      	orrs	r0, r1
 8000d34:	01d2      	lsls	r2, r2, #7
 8000d36:	d535      	bpl.n	8000da4 <__aeabi_dmul+0x514>
 8000d38:	2201      	movs	r2, #1
 8000d3a:	0843      	lsrs	r3, r0, #1
 8000d3c:	4002      	ands	r2, r0
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	07e0      	lsls	r0, r4, #31
 8000d42:	4318      	orrs	r0, r3
 8000d44:	0864      	lsrs	r4, r4, #1
 8000d46:	e634      	b.n	80009b2 <__aeabi_dmul+0x122>
 8000d48:	9b00      	ldr	r3, [sp, #0]
 8000d4a:	46a2      	mov	sl, r4
 8000d4c:	469b      	mov	fp, r3
 8000d4e:	4681      	mov	r9, r0
 8000d50:	2480      	movs	r4, #128	@ 0x80
 8000d52:	4653      	mov	r3, sl
 8000d54:	0324      	lsls	r4, r4, #12
 8000d56:	431c      	orrs	r4, r3
 8000d58:	0324      	lsls	r4, r4, #12
 8000d5a:	464a      	mov	r2, r9
 8000d5c:	4b2e      	ldr	r3, [pc, #184]	@ (8000e18 <__aeabi_dmul+0x588>)
 8000d5e:	0b24      	lsrs	r4, r4, #12
 8000d60:	e5ec      	b.n	800093c <__aeabi_dmul+0xac>
 8000d62:	f000 fd6d 	bl	8001840 <__clzsi2>
 8000d66:	2315      	movs	r3, #21
 8000d68:	469c      	mov	ip, r3
 8000d6a:	4484      	add	ip, r0
 8000d6c:	0002      	movs	r2, r0
 8000d6e:	4663      	mov	r3, ip
 8000d70:	3220      	adds	r2, #32
 8000d72:	2b1c      	cmp	r3, #28
 8000d74:	dc00      	bgt.n	8000d78 <__aeabi_dmul+0x4e8>
 8000d76:	e684      	b.n	8000a82 <__aeabi_dmul+0x1f2>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	4699      	mov	r9, r3
 8000d7c:	0023      	movs	r3, r4
 8000d7e:	3808      	subs	r0, #8
 8000d80:	4083      	lsls	r3, r0
 8000d82:	469a      	mov	sl, r3
 8000d84:	e68e      	b.n	8000aa4 <__aeabi_dmul+0x214>
 8000d86:	f000 fd5b 	bl	8001840 <__clzsi2>
 8000d8a:	0002      	movs	r2, r0
 8000d8c:	0003      	movs	r3, r0
 8000d8e:	3215      	adds	r2, #21
 8000d90:	3320      	adds	r3, #32
 8000d92:	2a1c      	cmp	r2, #28
 8000d94:	dc00      	bgt.n	8000d98 <__aeabi_dmul+0x508>
 8000d96:	e64e      	b.n	8000a36 <__aeabi_dmul+0x1a6>
 8000d98:	0002      	movs	r2, r0
 8000d9a:	0034      	movs	r4, r6
 8000d9c:	3a08      	subs	r2, #8
 8000d9e:	2000      	movs	r0, #0
 8000da0:	4094      	lsls	r4, r2
 8000da2:	e652      	b.n	8000a4a <__aeabi_dmul+0x1ba>
 8000da4:	9301      	str	r3, [sp, #4]
 8000da6:	e604      	b.n	80009b2 <__aeabi_dmul+0x122>
 8000da8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e1c <__aeabi_dmul+0x58c>)
 8000daa:	0021      	movs	r1, r4
 8000dac:	469c      	mov	ip, r3
 8000dae:	0003      	movs	r3, r0
 8000db0:	9d01      	ldr	r5, [sp, #4]
 8000db2:	40d3      	lsrs	r3, r2
 8000db4:	4465      	add	r5, ip
 8000db6:	40a9      	lsls	r1, r5
 8000db8:	4319      	orrs	r1, r3
 8000dba:	0003      	movs	r3, r0
 8000dbc:	40ab      	lsls	r3, r5
 8000dbe:	1e58      	subs	r0, r3, #1
 8000dc0:	4183      	sbcs	r3, r0
 8000dc2:	4319      	orrs	r1, r3
 8000dc4:	0008      	movs	r0, r1
 8000dc6:	40d4      	lsrs	r4, r2
 8000dc8:	074b      	lsls	r3, r1, #29
 8000dca:	d009      	beq.n	8000de0 <__aeabi_dmul+0x550>
 8000dcc:	230f      	movs	r3, #15
 8000dce:	400b      	ands	r3, r1
 8000dd0:	2b04      	cmp	r3, #4
 8000dd2:	d005      	beq.n	8000de0 <__aeabi_dmul+0x550>
 8000dd4:	1d0b      	adds	r3, r1, #4
 8000dd6:	428b      	cmp	r3, r1
 8000dd8:	4180      	sbcs	r0, r0
 8000dda:	4240      	negs	r0, r0
 8000ddc:	1824      	adds	r4, r4, r0
 8000dde:	0018      	movs	r0, r3
 8000de0:	0223      	lsls	r3, r4, #8
 8000de2:	d400      	bmi.n	8000de6 <__aeabi_dmul+0x556>
 8000de4:	e6d6      	b.n	8000b94 <__aeabi_dmul+0x304>
 8000de6:	2301      	movs	r3, #1
 8000de8:	2400      	movs	r4, #0
 8000dea:	2200      	movs	r2, #0
 8000dec:	e5a6      	b.n	800093c <__aeabi_dmul+0xac>
 8000dee:	290f      	cmp	r1, #15
 8000df0:	d1aa      	bne.n	8000d48 <__aeabi_dmul+0x4b8>
 8000df2:	2380      	movs	r3, #128	@ 0x80
 8000df4:	4652      	mov	r2, sl
 8000df6:	031b      	lsls	r3, r3, #12
 8000df8:	421a      	tst	r2, r3
 8000dfa:	d0a9      	beq.n	8000d50 <__aeabi_dmul+0x4c0>
 8000dfc:	421c      	tst	r4, r3
 8000dfe:	d1a7      	bne.n	8000d50 <__aeabi_dmul+0x4c0>
 8000e00:	431c      	orrs	r4, r3
 8000e02:	9b00      	ldr	r3, [sp, #0]
 8000e04:	0002      	movs	r2, r0
 8000e06:	469b      	mov	fp, r3
 8000e08:	4b03      	ldr	r3, [pc, #12]	@ (8000e18 <__aeabi_dmul+0x588>)
 8000e0a:	e597      	b.n	800093c <__aeabi_dmul+0xac>
 8000e0c:	2400      	movs	r4, #0
 8000e0e:	e6c1      	b.n	8000b94 <__aeabi_dmul+0x304>
 8000e10:	2400      	movs	r4, #0
 8000e12:	4b01      	ldr	r3, [pc, #4]	@ (8000e18 <__aeabi_dmul+0x588>)
 8000e14:	0022      	movs	r2, r4
 8000e16:	e591      	b.n	800093c <__aeabi_dmul+0xac>
 8000e18:	000007ff 	.word	0x000007ff
 8000e1c:	0000041e 	.word	0x0000041e

08000e20 <__aeabi_dsub>:
 8000e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e22:	464e      	mov	r6, r9
 8000e24:	4645      	mov	r5, r8
 8000e26:	46de      	mov	lr, fp
 8000e28:	4657      	mov	r7, sl
 8000e2a:	b5e0      	push	{r5, r6, r7, lr}
 8000e2c:	b085      	sub	sp, #20
 8000e2e:	9000      	str	r0, [sp, #0]
 8000e30:	9101      	str	r1, [sp, #4]
 8000e32:	030c      	lsls	r4, r1, #12
 8000e34:	004f      	lsls	r7, r1, #1
 8000e36:	0fce      	lsrs	r6, r1, #31
 8000e38:	0a61      	lsrs	r1, r4, #9
 8000e3a:	9c00      	ldr	r4, [sp, #0]
 8000e3c:	46b0      	mov	r8, r6
 8000e3e:	0f64      	lsrs	r4, r4, #29
 8000e40:	430c      	orrs	r4, r1
 8000e42:	9900      	ldr	r1, [sp, #0]
 8000e44:	0d7f      	lsrs	r7, r7, #21
 8000e46:	00c8      	lsls	r0, r1, #3
 8000e48:	0011      	movs	r1, r2
 8000e4a:	001a      	movs	r2, r3
 8000e4c:	031b      	lsls	r3, r3, #12
 8000e4e:	469c      	mov	ip, r3
 8000e50:	9100      	str	r1, [sp, #0]
 8000e52:	9201      	str	r2, [sp, #4]
 8000e54:	0051      	lsls	r1, r2, #1
 8000e56:	0d4b      	lsrs	r3, r1, #21
 8000e58:	4699      	mov	r9, r3
 8000e5a:	9b01      	ldr	r3, [sp, #4]
 8000e5c:	9d00      	ldr	r5, [sp, #0]
 8000e5e:	0fd9      	lsrs	r1, r3, #31
 8000e60:	4663      	mov	r3, ip
 8000e62:	0f6a      	lsrs	r2, r5, #29
 8000e64:	0a5b      	lsrs	r3, r3, #9
 8000e66:	4313      	orrs	r3, r2
 8000e68:	00ea      	lsls	r2, r5, #3
 8000e6a:	4694      	mov	ip, r2
 8000e6c:	4693      	mov	fp, r2
 8000e6e:	4ac1      	ldr	r2, [pc, #772]	@ (8001174 <__aeabi_dsub+0x354>)
 8000e70:	9003      	str	r0, [sp, #12]
 8000e72:	9302      	str	r3, [sp, #8]
 8000e74:	4591      	cmp	r9, r2
 8000e76:	d100      	bne.n	8000e7a <__aeabi_dsub+0x5a>
 8000e78:	e0cd      	b.n	8001016 <__aeabi_dsub+0x1f6>
 8000e7a:	2501      	movs	r5, #1
 8000e7c:	4069      	eors	r1, r5
 8000e7e:	464d      	mov	r5, r9
 8000e80:	1b7d      	subs	r5, r7, r5
 8000e82:	46aa      	mov	sl, r5
 8000e84:	428e      	cmp	r6, r1
 8000e86:	d100      	bne.n	8000e8a <__aeabi_dsub+0x6a>
 8000e88:	e080      	b.n	8000f8c <__aeabi_dsub+0x16c>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	dc00      	bgt.n	8000e90 <__aeabi_dsub+0x70>
 8000e8e:	e335      	b.n	80014fc <__aeabi_dsub+0x6dc>
 8000e90:	4649      	mov	r1, r9
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d100      	bne.n	8000e98 <__aeabi_dsub+0x78>
 8000e96:	e0df      	b.n	8001058 <__aeabi_dsub+0x238>
 8000e98:	4297      	cmp	r7, r2
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_dsub+0x7e>
 8000e9c:	e194      	b.n	80011c8 <__aeabi_dsub+0x3a8>
 8000e9e:	4652      	mov	r2, sl
 8000ea0:	2501      	movs	r5, #1
 8000ea2:	2a38      	cmp	r2, #56	@ 0x38
 8000ea4:	dc19      	bgt.n	8000eda <__aeabi_dsub+0xba>
 8000ea6:	2280      	movs	r2, #128	@ 0x80
 8000ea8:	9b02      	ldr	r3, [sp, #8]
 8000eaa:	0412      	lsls	r2, r2, #16
 8000eac:	4313      	orrs	r3, r2
 8000eae:	9302      	str	r3, [sp, #8]
 8000eb0:	4652      	mov	r2, sl
 8000eb2:	2a1f      	cmp	r2, #31
 8000eb4:	dd00      	ble.n	8000eb8 <__aeabi_dsub+0x98>
 8000eb6:	e1e3      	b.n	8001280 <__aeabi_dsub+0x460>
 8000eb8:	4653      	mov	r3, sl
 8000eba:	2220      	movs	r2, #32
 8000ebc:	4661      	mov	r1, ip
 8000ebe:	9d02      	ldr	r5, [sp, #8]
 8000ec0:	1ad2      	subs	r2, r2, r3
 8000ec2:	4095      	lsls	r5, r2
 8000ec4:	40d9      	lsrs	r1, r3
 8000ec6:	430d      	orrs	r5, r1
 8000ec8:	4661      	mov	r1, ip
 8000eca:	4091      	lsls	r1, r2
 8000ecc:	000a      	movs	r2, r1
 8000ece:	1e51      	subs	r1, r2, #1
 8000ed0:	418a      	sbcs	r2, r1
 8000ed2:	4315      	orrs	r5, r2
 8000ed4:	9a02      	ldr	r2, [sp, #8]
 8000ed6:	40da      	lsrs	r2, r3
 8000ed8:	1aa4      	subs	r4, r4, r2
 8000eda:	1b45      	subs	r5, r0, r5
 8000edc:	42a8      	cmp	r0, r5
 8000ede:	4180      	sbcs	r0, r0
 8000ee0:	4240      	negs	r0, r0
 8000ee2:	1a24      	subs	r4, r4, r0
 8000ee4:	0223      	lsls	r3, r4, #8
 8000ee6:	d400      	bmi.n	8000eea <__aeabi_dsub+0xca>
 8000ee8:	e13d      	b.n	8001166 <__aeabi_dsub+0x346>
 8000eea:	0264      	lsls	r4, r4, #9
 8000eec:	0a64      	lsrs	r4, r4, #9
 8000eee:	2c00      	cmp	r4, #0
 8000ef0:	d100      	bne.n	8000ef4 <__aeabi_dsub+0xd4>
 8000ef2:	e147      	b.n	8001184 <__aeabi_dsub+0x364>
 8000ef4:	0020      	movs	r0, r4
 8000ef6:	f000 fca3 	bl	8001840 <__clzsi2>
 8000efa:	0003      	movs	r3, r0
 8000efc:	3b08      	subs	r3, #8
 8000efe:	2120      	movs	r1, #32
 8000f00:	0028      	movs	r0, r5
 8000f02:	1aca      	subs	r2, r1, r3
 8000f04:	40d0      	lsrs	r0, r2
 8000f06:	409c      	lsls	r4, r3
 8000f08:	0002      	movs	r2, r0
 8000f0a:	409d      	lsls	r5, r3
 8000f0c:	4322      	orrs	r2, r4
 8000f0e:	429f      	cmp	r7, r3
 8000f10:	dd00      	ble.n	8000f14 <__aeabi_dsub+0xf4>
 8000f12:	e177      	b.n	8001204 <__aeabi_dsub+0x3e4>
 8000f14:	1bd8      	subs	r0, r3, r7
 8000f16:	3001      	adds	r0, #1
 8000f18:	1a09      	subs	r1, r1, r0
 8000f1a:	002c      	movs	r4, r5
 8000f1c:	408d      	lsls	r5, r1
 8000f1e:	40c4      	lsrs	r4, r0
 8000f20:	1e6b      	subs	r3, r5, #1
 8000f22:	419d      	sbcs	r5, r3
 8000f24:	0013      	movs	r3, r2
 8000f26:	40c2      	lsrs	r2, r0
 8000f28:	408b      	lsls	r3, r1
 8000f2a:	4325      	orrs	r5, r4
 8000f2c:	2700      	movs	r7, #0
 8000f2e:	0014      	movs	r4, r2
 8000f30:	431d      	orrs	r5, r3
 8000f32:	076b      	lsls	r3, r5, #29
 8000f34:	d009      	beq.n	8000f4a <__aeabi_dsub+0x12a>
 8000f36:	230f      	movs	r3, #15
 8000f38:	402b      	ands	r3, r5
 8000f3a:	2b04      	cmp	r3, #4
 8000f3c:	d005      	beq.n	8000f4a <__aeabi_dsub+0x12a>
 8000f3e:	1d2b      	adds	r3, r5, #4
 8000f40:	42ab      	cmp	r3, r5
 8000f42:	41ad      	sbcs	r5, r5
 8000f44:	426d      	negs	r5, r5
 8000f46:	1964      	adds	r4, r4, r5
 8000f48:	001d      	movs	r5, r3
 8000f4a:	0223      	lsls	r3, r4, #8
 8000f4c:	d400      	bmi.n	8000f50 <__aeabi_dsub+0x130>
 8000f4e:	e140      	b.n	80011d2 <__aeabi_dsub+0x3b2>
 8000f50:	4a88      	ldr	r2, [pc, #544]	@ (8001174 <__aeabi_dsub+0x354>)
 8000f52:	3701      	adds	r7, #1
 8000f54:	4297      	cmp	r7, r2
 8000f56:	d100      	bne.n	8000f5a <__aeabi_dsub+0x13a>
 8000f58:	e101      	b.n	800115e <__aeabi_dsub+0x33e>
 8000f5a:	2601      	movs	r6, #1
 8000f5c:	4643      	mov	r3, r8
 8000f5e:	4986      	ldr	r1, [pc, #536]	@ (8001178 <__aeabi_dsub+0x358>)
 8000f60:	08ed      	lsrs	r5, r5, #3
 8000f62:	4021      	ands	r1, r4
 8000f64:	074a      	lsls	r2, r1, #29
 8000f66:	432a      	orrs	r2, r5
 8000f68:	057c      	lsls	r4, r7, #21
 8000f6a:	024d      	lsls	r5, r1, #9
 8000f6c:	0b2d      	lsrs	r5, r5, #12
 8000f6e:	0d64      	lsrs	r4, r4, #21
 8000f70:	401e      	ands	r6, r3
 8000f72:	0524      	lsls	r4, r4, #20
 8000f74:	432c      	orrs	r4, r5
 8000f76:	07f6      	lsls	r6, r6, #31
 8000f78:	4334      	orrs	r4, r6
 8000f7a:	0010      	movs	r0, r2
 8000f7c:	0021      	movs	r1, r4
 8000f7e:	b005      	add	sp, #20
 8000f80:	bcf0      	pop	{r4, r5, r6, r7}
 8000f82:	46bb      	mov	fp, r7
 8000f84:	46b2      	mov	sl, r6
 8000f86:	46a9      	mov	r9, r5
 8000f88:	46a0      	mov	r8, r4
 8000f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f8c:	2d00      	cmp	r5, #0
 8000f8e:	dc00      	bgt.n	8000f92 <__aeabi_dsub+0x172>
 8000f90:	e2d0      	b.n	8001534 <__aeabi_dsub+0x714>
 8000f92:	4649      	mov	r1, r9
 8000f94:	2900      	cmp	r1, #0
 8000f96:	d000      	beq.n	8000f9a <__aeabi_dsub+0x17a>
 8000f98:	e0d4      	b.n	8001144 <__aeabi_dsub+0x324>
 8000f9a:	4661      	mov	r1, ip
 8000f9c:	9b02      	ldr	r3, [sp, #8]
 8000f9e:	4319      	orrs	r1, r3
 8000fa0:	d100      	bne.n	8000fa4 <__aeabi_dsub+0x184>
 8000fa2:	e12b      	b.n	80011fc <__aeabi_dsub+0x3dc>
 8000fa4:	1e69      	subs	r1, r5, #1
 8000fa6:	2d01      	cmp	r5, #1
 8000fa8:	d100      	bne.n	8000fac <__aeabi_dsub+0x18c>
 8000faa:	e1d9      	b.n	8001360 <__aeabi_dsub+0x540>
 8000fac:	4295      	cmp	r5, r2
 8000fae:	d100      	bne.n	8000fb2 <__aeabi_dsub+0x192>
 8000fb0:	e10a      	b.n	80011c8 <__aeabi_dsub+0x3a8>
 8000fb2:	2501      	movs	r5, #1
 8000fb4:	2938      	cmp	r1, #56	@ 0x38
 8000fb6:	dc17      	bgt.n	8000fe8 <__aeabi_dsub+0x1c8>
 8000fb8:	468a      	mov	sl, r1
 8000fba:	4653      	mov	r3, sl
 8000fbc:	2b1f      	cmp	r3, #31
 8000fbe:	dd00      	ble.n	8000fc2 <__aeabi_dsub+0x1a2>
 8000fc0:	e1e7      	b.n	8001392 <__aeabi_dsub+0x572>
 8000fc2:	2220      	movs	r2, #32
 8000fc4:	1ad2      	subs	r2, r2, r3
 8000fc6:	9b02      	ldr	r3, [sp, #8]
 8000fc8:	4661      	mov	r1, ip
 8000fca:	4093      	lsls	r3, r2
 8000fcc:	001d      	movs	r5, r3
 8000fce:	4653      	mov	r3, sl
 8000fd0:	40d9      	lsrs	r1, r3
 8000fd2:	4663      	mov	r3, ip
 8000fd4:	4093      	lsls	r3, r2
 8000fd6:	001a      	movs	r2, r3
 8000fd8:	430d      	orrs	r5, r1
 8000fda:	1e51      	subs	r1, r2, #1
 8000fdc:	418a      	sbcs	r2, r1
 8000fde:	4653      	mov	r3, sl
 8000fe0:	4315      	orrs	r5, r2
 8000fe2:	9a02      	ldr	r2, [sp, #8]
 8000fe4:	40da      	lsrs	r2, r3
 8000fe6:	18a4      	adds	r4, r4, r2
 8000fe8:	182d      	adds	r5, r5, r0
 8000fea:	4285      	cmp	r5, r0
 8000fec:	4180      	sbcs	r0, r0
 8000fee:	4240      	negs	r0, r0
 8000ff0:	1824      	adds	r4, r4, r0
 8000ff2:	0223      	lsls	r3, r4, #8
 8000ff4:	d400      	bmi.n	8000ff8 <__aeabi_dsub+0x1d8>
 8000ff6:	e0b6      	b.n	8001166 <__aeabi_dsub+0x346>
 8000ff8:	4b5e      	ldr	r3, [pc, #376]	@ (8001174 <__aeabi_dsub+0x354>)
 8000ffa:	3701      	adds	r7, #1
 8000ffc:	429f      	cmp	r7, r3
 8000ffe:	d100      	bne.n	8001002 <__aeabi_dsub+0x1e2>
 8001000:	e0ad      	b.n	800115e <__aeabi_dsub+0x33e>
 8001002:	2101      	movs	r1, #1
 8001004:	4b5c      	ldr	r3, [pc, #368]	@ (8001178 <__aeabi_dsub+0x358>)
 8001006:	086a      	lsrs	r2, r5, #1
 8001008:	401c      	ands	r4, r3
 800100a:	4029      	ands	r1, r5
 800100c:	430a      	orrs	r2, r1
 800100e:	07e5      	lsls	r5, r4, #31
 8001010:	4315      	orrs	r5, r2
 8001012:	0864      	lsrs	r4, r4, #1
 8001014:	e78d      	b.n	8000f32 <__aeabi_dsub+0x112>
 8001016:	4a59      	ldr	r2, [pc, #356]	@ (800117c <__aeabi_dsub+0x35c>)
 8001018:	9b02      	ldr	r3, [sp, #8]
 800101a:	4692      	mov	sl, r2
 800101c:	4662      	mov	r2, ip
 800101e:	44ba      	add	sl, r7
 8001020:	431a      	orrs	r2, r3
 8001022:	d02c      	beq.n	800107e <__aeabi_dsub+0x25e>
 8001024:	428e      	cmp	r6, r1
 8001026:	d02e      	beq.n	8001086 <__aeabi_dsub+0x266>
 8001028:	4652      	mov	r2, sl
 800102a:	2a00      	cmp	r2, #0
 800102c:	d060      	beq.n	80010f0 <__aeabi_dsub+0x2d0>
 800102e:	2f00      	cmp	r7, #0
 8001030:	d100      	bne.n	8001034 <__aeabi_dsub+0x214>
 8001032:	e0db      	b.n	80011ec <__aeabi_dsub+0x3cc>
 8001034:	4663      	mov	r3, ip
 8001036:	000e      	movs	r6, r1
 8001038:	9c02      	ldr	r4, [sp, #8]
 800103a:	08d8      	lsrs	r0, r3, #3
 800103c:	0762      	lsls	r2, r4, #29
 800103e:	4302      	orrs	r2, r0
 8001040:	08e4      	lsrs	r4, r4, #3
 8001042:	0013      	movs	r3, r2
 8001044:	4323      	orrs	r3, r4
 8001046:	d100      	bne.n	800104a <__aeabi_dsub+0x22a>
 8001048:	e254      	b.n	80014f4 <__aeabi_dsub+0x6d4>
 800104a:	2580      	movs	r5, #128	@ 0x80
 800104c:	032d      	lsls	r5, r5, #12
 800104e:	4325      	orrs	r5, r4
 8001050:	032d      	lsls	r5, r5, #12
 8001052:	4c48      	ldr	r4, [pc, #288]	@ (8001174 <__aeabi_dsub+0x354>)
 8001054:	0b2d      	lsrs	r5, r5, #12
 8001056:	e78c      	b.n	8000f72 <__aeabi_dsub+0x152>
 8001058:	4661      	mov	r1, ip
 800105a:	9b02      	ldr	r3, [sp, #8]
 800105c:	4319      	orrs	r1, r3
 800105e:	d100      	bne.n	8001062 <__aeabi_dsub+0x242>
 8001060:	e0cc      	b.n	80011fc <__aeabi_dsub+0x3dc>
 8001062:	0029      	movs	r1, r5
 8001064:	3901      	subs	r1, #1
 8001066:	2d01      	cmp	r5, #1
 8001068:	d100      	bne.n	800106c <__aeabi_dsub+0x24c>
 800106a:	e188      	b.n	800137e <__aeabi_dsub+0x55e>
 800106c:	4295      	cmp	r5, r2
 800106e:	d100      	bne.n	8001072 <__aeabi_dsub+0x252>
 8001070:	e0aa      	b.n	80011c8 <__aeabi_dsub+0x3a8>
 8001072:	2501      	movs	r5, #1
 8001074:	2938      	cmp	r1, #56	@ 0x38
 8001076:	dd00      	ble.n	800107a <__aeabi_dsub+0x25a>
 8001078:	e72f      	b.n	8000eda <__aeabi_dsub+0xba>
 800107a:	468a      	mov	sl, r1
 800107c:	e718      	b.n	8000eb0 <__aeabi_dsub+0x90>
 800107e:	2201      	movs	r2, #1
 8001080:	4051      	eors	r1, r2
 8001082:	428e      	cmp	r6, r1
 8001084:	d1d0      	bne.n	8001028 <__aeabi_dsub+0x208>
 8001086:	4653      	mov	r3, sl
 8001088:	2b00      	cmp	r3, #0
 800108a:	d100      	bne.n	800108e <__aeabi_dsub+0x26e>
 800108c:	e0be      	b.n	800120c <__aeabi_dsub+0x3ec>
 800108e:	2f00      	cmp	r7, #0
 8001090:	d000      	beq.n	8001094 <__aeabi_dsub+0x274>
 8001092:	e138      	b.n	8001306 <__aeabi_dsub+0x4e6>
 8001094:	46ca      	mov	sl, r9
 8001096:	0022      	movs	r2, r4
 8001098:	4302      	orrs	r2, r0
 800109a:	d100      	bne.n	800109e <__aeabi_dsub+0x27e>
 800109c:	e1e2      	b.n	8001464 <__aeabi_dsub+0x644>
 800109e:	4653      	mov	r3, sl
 80010a0:	1e59      	subs	r1, r3, #1
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d100      	bne.n	80010a8 <__aeabi_dsub+0x288>
 80010a6:	e20d      	b.n	80014c4 <__aeabi_dsub+0x6a4>
 80010a8:	4a32      	ldr	r2, [pc, #200]	@ (8001174 <__aeabi_dsub+0x354>)
 80010aa:	4592      	cmp	sl, r2
 80010ac:	d100      	bne.n	80010b0 <__aeabi_dsub+0x290>
 80010ae:	e1d2      	b.n	8001456 <__aeabi_dsub+0x636>
 80010b0:	2701      	movs	r7, #1
 80010b2:	2938      	cmp	r1, #56	@ 0x38
 80010b4:	dc13      	bgt.n	80010de <__aeabi_dsub+0x2be>
 80010b6:	291f      	cmp	r1, #31
 80010b8:	dd00      	ble.n	80010bc <__aeabi_dsub+0x29c>
 80010ba:	e1ee      	b.n	800149a <__aeabi_dsub+0x67a>
 80010bc:	2220      	movs	r2, #32
 80010be:	9b02      	ldr	r3, [sp, #8]
 80010c0:	1a52      	subs	r2, r2, r1
 80010c2:	0025      	movs	r5, r4
 80010c4:	0007      	movs	r7, r0
 80010c6:	469a      	mov	sl, r3
 80010c8:	40cc      	lsrs	r4, r1
 80010ca:	4090      	lsls	r0, r2
 80010cc:	4095      	lsls	r5, r2
 80010ce:	40cf      	lsrs	r7, r1
 80010d0:	44a2      	add	sl, r4
 80010d2:	1e42      	subs	r2, r0, #1
 80010d4:	4190      	sbcs	r0, r2
 80010d6:	4653      	mov	r3, sl
 80010d8:	432f      	orrs	r7, r5
 80010da:	4307      	orrs	r7, r0
 80010dc:	9302      	str	r3, [sp, #8]
 80010de:	003d      	movs	r5, r7
 80010e0:	4465      	add	r5, ip
 80010e2:	4565      	cmp	r5, ip
 80010e4:	4192      	sbcs	r2, r2
 80010e6:	9b02      	ldr	r3, [sp, #8]
 80010e8:	4252      	negs	r2, r2
 80010ea:	464f      	mov	r7, r9
 80010ec:	18d4      	adds	r4, r2, r3
 80010ee:	e780      	b.n	8000ff2 <__aeabi_dsub+0x1d2>
 80010f0:	4a23      	ldr	r2, [pc, #140]	@ (8001180 <__aeabi_dsub+0x360>)
 80010f2:	1c7d      	adds	r5, r7, #1
 80010f4:	4215      	tst	r5, r2
 80010f6:	d000      	beq.n	80010fa <__aeabi_dsub+0x2da>
 80010f8:	e0aa      	b.n	8001250 <__aeabi_dsub+0x430>
 80010fa:	4662      	mov	r2, ip
 80010fc:	0025      	movs	r5, r4
 80010fe:	9b02      	ldr	r3, [sp, #8]
 8001100:	4305      	orrs	r5, r0
 8001102:	431a      	orrs	r2, r3
 8001104:	2f00      	cmp	r7, #0
 8001106:	d000      	beq.n	800110a <__aeabi_dsub+0x2ea>
 8001108:	e0f5      	b.n	80012f6 <__aeabi_dsub+0x4d6>
 800110a:	2d00      	cmp	r5, #0
 800110c:	d100      	bne.n	8001110 <__aeabi_dsub+0x2f0>
 800110e:	e16b      	b.n	80013e8 <__aeabi_dsub+0x5c8>
 8001110:	2a00      	cmp	r2, #0
 8001112:	d100      	bne.n	8001116 <__aeabi_dsub+0x2f6>
 8001114:	e152      	b.n	80013bc <__aeabi_dsub+0x59c>
 8001116:	4663      	mov	r3, ip
 8001118:	1ac5      	subs	r5, r0, r3
 800111a:	9b02      	ldr	r3, [sp, #8]
 800111c:	1ae2      	subs	r2, r4, r3
 800111e:	42a8      	cmp	r0, r5
 8001120:	419b      	sbcs	r3, r3
 8001122:	425b      	negs	r3, r3
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	021a      	lsls	r2, r3, #8
 8001128:	d400      	bmi.n	800112c <__aeabi_dsub+0x30c>
 800112a:	e1d5      	b.n	80014d8 <__aeabi_dsub+0x6b8>
 800112c:	4663      	mov	r3, ip
 800112e:	1a1d      	subs	r5, r3, r0
 8001130:	45ac      	cmp	ip, r5
 8001132:	4192      	sbcs	r2, r2
 8001134:	2601      	movs	r6, #1
 8001136:	9b02      	ldr	r3, [sp, #8]
 8001138:	4252      	negs	r2, r2
 800113a:	1b1c      	subs	r4, r3, r4
 800113c:	4688      	mov	r8, r1
 800113e:	1aa4      	subs	r4, r4, r2
 8001140:	400e      	ands	r6, r1
 8001142:	e6f6      	b.n	8000f32 <__aeabi_dsub+0x112>
 8001144:	4297      	cmp	r7, r2
 8001146:	d03f      	beq.n	80011c8 <__aeabi_dsub+0x3a8>
 8001148:	4652      	mov	r2, sl
 800114a:	2501      	movs	r5, #1
 800114c:	2a38      	cmp	r2, #56	@ 0x38
 800114e:	dd00      	ble.n	8001152 <__aeabi_dsub+0x332>
 8001150:	e74a      	b.n	8000fe8 <__aeabi_dsub+0x1c8>
 8001152:	2280      	movs	r2, #128	@ 0x80
 8001154:	9b02      	ldr	r3, [sp, #8]
 8001156:	0412      	lsls	r2, r2, #16
 8001158:	4313      	orrs	r3, r2
 800115a:	9302      	str	r3, [sp, #8]
 800115c:	e72d      	b.n	8000fba <__aeabi_dsub+0x19a>
 800115e:	003c      	movs	r4, r7
 8001160:	2500      	movs	r5, #0
 8001162:	2200      	movs	r2, #0
 8001164:	e705      	b.n	8000f72 <__aeabi_dsub+0x152>
 8001166:	2307      	movs	r3, #7
 8001168:	402b      	ands	r3, r5
 800116a:	2b00      	cmp	r3, #0
 800116c:	d000      	beq.n	8001170 <__aeabi_dsub+0x350>
 800116e:	e6e2      	b.n	8000f36 <__aeabi_dsub+0x116>
 8001170:	e06b      	b.n	800124a <__aeabi_dsub+0x42a>
 8001172:	46c0      	nop			@ (mov r8, r8)
 8001174:	000007ff 	.word	0x000007ff
 8001178:	ff7fffff 	.word	0xff7fffff
 800117c:	fffff801 	.word	0xfffff801
 8001180:	000007fe 	.word	0x000007fe
 8001184:	0028      	movs	r0, r5
 8001186:	f000 fb5b 	bl	8001840 <__clzsi2>
 800118a:	0003      	movs	r3, r0
 800118c:	3318      	adds	r3, #24
 800118e:	2b1f      	cmp	r3, #31
 8001190:	dc00      	bgt.n	8001194 <__aeabi_dsub+0x374>
 8001192:	e6b4      	b.n	8000efe <__aeabi_dsub+0xde>
 8001194:	002a      	movs	r2, r5
 8001196:	3808      	subs	r0, #8
 8001198:	4082      	lsls	r2, r0
 800119a:	429f      	cmp	r7, r3
 800119c:	dd00      	ble.n	80011a0 <__aeabi_dsub+0x380>
 800119e:	e0b9      	b.n	8001314 <__aeabi_dsub+0x4f4>
 80011a0:	1bdb      	subs	r3, r3, r7
 80011a2:	1c58      	adds	r0, r3, #1
 80011a4:	281f      	cmp	r0, #31
 80011a6:	dc00      	bgt.n	80011aa <__aeabi_dsub+0x38a>
 80011a8:	e1a0      	b.n	80014ec <__aeabi_dsub+0x6cc>
 80011aa:	0015      	movs	r5, r2
 80011ac:	3b1f      	subs	r3, #31
 80011ae:	40dd      	lsrs	r5, r3
 80011b0:	2820      	cmp	r0, #32
 80011b2:	d005      	beq.n	80011c0 <__aeabi_dsub+0x3a0>
 80011b4:	2340      	movs	r3, #64	@ 0x40
 80011b6:	1a1b      	subs	r3, r3, r0
 80011b8:	409a      	lsls	r2, r3
 80011ba:	1e53      	subs	r3, r2, #1
 80011bc:	419a      	sbcs	r2, r3
 80011be:	4315      	orrs	r5, r2
 80011c0:	2307      	movs	r3, #7
 80011c2:	2700      	movs	r7, #0
 80011c4:	402b      	ands	r3, r5
 80011c6:	e7d0      	b.n	800116a <__aeabi_dsub+0x34a>
 80011c8:	08c0      	lsrs	r0, r0, #3
 80011ca:	0762      	lsls	r2, r4, #29
 80011cc:	4302      	orrs	r2, r0
 80011ce:	08e4      	lsrs	r4, r4, #3
 80011d0:	e737      	b.n	8001042 <__aeabi_dsub+0x222>
 80011d2:	08ea      	lsrs	r2, r5, #3
 80011d4:	0763      	lsls	r3, r4, #29
 80011d6:	431a      	orrs	r2, r3
 80011d8:	4bd3      	ldr	r3, [pc, #844]	@ (8001528 <__aeabi_dsub+0x708>)
 80011da:	08e4      	lsrs	r4, r4, #3
 80011dc:	429f      	cmp	r7, r3
 80011de:	d100      	bne.n	80011e2 <__aeabi_dsub+0x3c2>
 80011e0:	e72f      	b.n	8001042 <__aeabi_dsub+0x222>
 80011e2:	0324      	lsls	r4, r4, #12
 80011e4:	0b25      	lsrs	r5, r4, #12
 80011e6:	057c      	lsls	r4, r7, #21
 80011e8:	0d64      	lsrs	r4, r4, #21
 80011ea:	e6c2      	b.n	8000f72 <__aeabi_dsub+0x152>
 80011ec:	46ca      	mov	sl, r9
 80011ee:	0022      	movs	r2, r4
 80011f0:	4302      	orrs	r2, r0
 80011f2:	d158      	bne.n	80012a6 <__aeabi_dsub+0x486>
 80011f4:	4663      	mov	r3, ip
 80011f6:	000e      	movs	r6, r1
 80011f8:	9c02      	ldr	r4, [sp, #8]
 80011fa:	9303      	str	r3, [sp, #12]
 80011fc:	9b03      	ldr	r3, [sp, #12]
 80011fe:	4657      	mov	r7, sl
 8001200:	08da      	lsrs	r2, r3, #3
 8001202:	e7e7      	b.n	80011d4 <__aeabi_dsub+0x3b4>
 8001204:	4cc9      	ldr	r4, [pc, #804]	@ (800152c <__aeabi_dsub+0x70c>)
 8001206:	1aff      	subs	r7, r7, r3
 8001208:	4014      	ands	r4, r2
 800120a:	e692      	b.n	8000f32 <__aeabi_dsub+0x112>
 800120c:	4dc8      	ldr	r5, [pc, #800]	@ (8001530 <__aeabi_dsub+0x710>)
 800120e:	1c7a      	adds	r2, r7, #1
 8001210:	422a      	tst	r2, r5
 8001212:	d000      	beq.n	8001216 <__aeabi_dsub+0x3f6>
 8001214:	e084      	b.n	8001320 <__aeabi_dsub+0x500>
 8001216:	0022      	movs	r2, r4
 8001218:	4302      	orrs	r2, r0
 800121a:	2f00      	cmp	r7, #0
 800121c:	d000      	beq.n	8001220 <__aeabi_dsub+0x400>
 800121e:	e0ef      	b.n	8001400 <__aeabi_dsub+0x5e0>
 8001220:	2a00      	cmp	r2, #0
 8001222:	d100      	bne.n	8001226 <__aeabi_dsub+0x406>
 8001224:	e0e5      	b.n	80013f2 <__aeabi_dsub+0x5d2>
 8001226:	4662      	mov	r2, ip
 8001228:	9902      	ldr	r1, [sp, #8]
 800122a:	430a      	orrs	r2, r1
 800122c:	d100      	bne.n	8001230 <__aeabi_dsub+0x410>
 800122e:	e0c5      	b.n	80013bc <__aeabi_dsub+0x59c>
 8001230:	4663      	mov	r3, ip
 8001232:	18c5      	adds	r5, r0, r3
 8001234:	468c      	mov	ip, r1
 8001236:	4285      	cmp	r5, r0
 8001238:	4180      	sbcs	r0, r0
 800123a:	4464      	add	r4, ip
 800123c:	4240      	negs	r0, r0
 800123e:	1824      	adds	r4, r4, r0
 8001240:	0223      	lsls	r3, r4, #8
 8001242:	d502      	bpl.n	800124a <__aeabi_dsub+0x42a>
 8001244:	4bb9      	ldr	r3, [pc, #740]	@ (800152c <__aeabi_dsub+0x70c>)
 8001246:	3701      	adds	r7, #1
 8001248:	401c      	ands	r4, r3
 800124a:	46ba      	mov	sl, r7
 800124c:	9503      	str	r5, [sp, #12]
 800124e:	e7d5      	b.n	80011fc <__aeabi_dsub+0x3dc>
 8001250:	4662      	mov	r2, ip
 8001252:	1a85      	subs	r5, r0, r2
 8001254:	42a8      	cmp	r0, r5
 8001256:	4192      	sbcs	r2, r2
 8001258:	4252      	negs	r2, r2
 800125a:	4691      	mov	r9, r2
 800125c:	9b02      	ldr	r3, [sp, #8]
 800125e:	1ae3      	subs	r3, r4, r3
 8001260:	001a      	movs	r2, r3
 8001262:	464b      	mov	r3, r9
 8001264:	1ad2      	subs	r2, r2, r3
 8001266:	0013      	movs	r3, r2
 8001268:	4691      	mov	r9, r2
 800126a:	021a      	lsls	r2, r3, #8
 800126c:	d46c      	bmi.n	8001348 <__aeabi_dsub+0x528>
 800126e:	464a      	mov	r2, r9
 8001270:	464c      	mov	r4, r9
 8001272:	432a      	orrs	r2, r5
 8001274:	d000      	beq.n	8001278 <__aeabi_dsub+0x458>
 8001276:	e63a      	b.n	8000eee <__aeabi_dsub+0xce>
 8001278:	2600      	movs	r6, #0
 800127a:	2400      	movs	r4, #0
 800127c:	2500      	movs	r5, #0
 800127e:	e678      	b.n	8000f72 <__aeabi_dsub+0x152>
 8001280:	9902      	ldr	r1, [sp, #8]
 8001282:	4653      	mov	r3, sl
 8001284:	000d      	movs	r5, r1
 8001286:	3a20      	subs	r2, #32
 8001288:	40d5      	lsrs	r5, r2
 800128a:	2b20      	cmp	r3, #32
 800128c:	d006      	beq.n	800129c <__aeabi_dsub+0x47c>
 800128e:	2240      	movs	r2, #64	@ 0x40
 8001290:	1ad2      	subs	r2, r2, r3
 8001292:	000b      	movs	r3, r1
 8001294:	4093      	lsls	r3, r2
 8001296:	4662      	mov	r2, ip
 8001298:	431a      	orrs	r2, r3
 800129a:	4693      	mov	fp, r2
 800129c:	465b      	mov	r3, fp
 800129e:	1e5a      	subs	r2, r3, #1
 80012a0:	4193      	sbcs	r3, r2
 80012a2:	431d      	orrs	r5, r3
 80012a4:	e619      	b.n	8000eda <__aeabi_dsub+0xba>
 80012a6:	4653      	mov	r3, sl
 80012a8:	1e5a      	subs	r2, r3, #1
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d100      	bne.n	80012b0 <__aeabi_dsub+0x490>
 80012ae:	e0c6      	b.n	800143e <__aeabi_dsub+0x61e>
 80012b0:	4e9d      	ldr	r6, [pc, #628]	@ (8001528 <__aeabi_dsub+0x708>)
 80012b2:	45b2      	cmp	sl, r6
 80012b4:	d100      	bne.n	80012b8 <__aeabi_dsub+0x498>
 80012b6:	e6bd      	b.n	8001034 <__aeabi_dsub+0x214>
 80012b8:	4688      	mov	r8, r1
 80012ba:	000e      	movs	r6, r1
 80012bc:	2501      	movs	r5, #1
 80012be:	2a38      	cmp	r2, #56	@ 0x38
 80012c0:	dc10      	bgt.n	80012e4 <__aeabi_dsub+0x4c4>
 80012c2:	2a1f      	cmp	r2, #31
 80012c4:	dc7f      	bgt.n	80013c6 <__aeabi_dsub+0x5a6>
 80012c6:	2120      	movs	r1, #32
 80012c8:	0025      	movs	r5, r4
 80012ca:	1a89      	subs	r1, r1, r2
 80012cc:	0007      	movs	r7, r0
 80012ce:	4088      	lsls	r0, r1
 80012d0:	408d      	lsls	r5, r1
 80012d2:	40d7      	lsrs	r7, r2
 80012d4:	40d4      	lsrs	r4, r2
 80012d6:	1e41      	subs	r1, r0, #1
 80012d8:	4188      	sbcs	r0, r1
 80012da:	9b02      	ldr	r3, [sp, #8]
 80012dc:	433d      	orrs	r5, r7
 80012de:	1b1b      	subs	r3, r3, r4
 80012e0:	4305      	orrs	r5, r0
 80012e2:	9302      	str	r3, [sp, #8]
 80012e4:	4662      	mov	r2, ip
 80012e6:	1b55      	subs	r5, r2, r5
 80012e8:	45ac      	cmp	ip, r5
 80012ea:	4192      	sbcs	r2, r2
 80012ec:	9b02      	ldr	r3, [sp, #8]
 80012ee:	4252      	negs	r2, r2
 80012f0:	464f      	mov	r7, r9
 80012f2:	1a9c      	subs	r4, r3, r2
 80012f4:	e5f6      	b.n	8000ee4 <__aeabi_dsub+0xc4>
 80012f6:	2d00      	cmp	r5, #0
 80012f8:	d000      	beq.n	80012fc <__aeabi_dsub+0x4dc>
 80012fa:	e0b7      	b.n	800146c <__aeabi_dsub+0x64c>
 80012fc:	2a00      	cmp	r2, #0
 80012fe:	d100      	bne.n	8001302 <__aeabi_dsub+0x4e2>
 8001300:	e0f0      	b.n	80014e4 <__aeabi_dsub+0x6c4>
 8001302:	2601      	movs	r6, #1
 8001304:	400e      	ands	r6, r1
 8001306:	4663      	mov	r3, ip
 8001308:	9802      	ldr	r0, [sp, #8]
 800130a:	08d9      	lsrs	r1, r3, #3
 800130c:	0742      	lsls	r2, r0, #29
 800130e:	430a      	orrs	r2, r1
 8001310:	08c4      	lsrs	r4, r0, #3
 8001312:	e696      	b.n	8001042 <__aeabi_dsub+0x222>
 8001314:	4c85      	ldr	r4, [pc, #532]	@ (800152c <__aeabi_dsub+0x70c>)
 8001316:	1aff      	subs	r7, r7, r3
 8001318:	4014      	ands	r4, r2
 800131a:	0762      	lsls	r2, r4, #29
 800131c:	08e4      	lsrs	r4, r4, #3
 800131e:	e760      	b.n	80011e2 <__aeabi_dsub+0x3c2>
 8001320:	4981      	ldr	r1, [pc, #516]	@ (8001528 <__aeabi_dsub+0x708>)
 8001322:	428a      	cmp	r2, r1
 8001324:	d100      	bne.n	8001328 <__aeabi_dsub+0x508>
 8001326:	e0c9      	b.n	80014bc <__aeabi_dsub+0x69c>
 8001328:	4663      	mov	r3, ip
 800132a:	18c1      	adds	r1, r0, r3
 800132c:	4281      	cmp	r1, r0
 800132e:	4180      	sbcs	r0, r0
 8001330:	9b02      	ldr	r3, [sp, #8]
 8001332:	4240      	negs	r0, r0
 8001334:	18e3      	adds	r3, r4, r3
 8001336:	181b      	adds	r3, r3, r0
 8001338:	07dd      	lsls	r5, r3, #31
 800133a:	085c      	lsrs	r4, r3, #1
 800133c:	2307      	movs	r3, #7
 800133e:	0849      	lsrs	r1, r1, #1
 8001340:	430d      	orrs	r5, r1
 8001342:	0017      	movs	r7, r2
 8001344:	402b      	ands	r3, r5
 8001346:	e710      	b.n	800116a <__aeabi_dsub+0x34a>
 8001348:	4663      	mov	r3, ip
 800134a:	1a1d      	subs	r5, r3, r0
 800134c:	45ac      	cmp	ip, r5
 800134e:	4192      	sbcs	r2, r2
 8001350:	2601      	movs	r6, #1
 8001352:	9b02      	ldr	r3, [sp, #8]
 8001354:	4252      	negs	r2, r2
 8001356:	1b1c      	subs	r4, r3, r4
 8001358:	4688      	mov	r8, r1
 800135a:	1aa4      	subs	r4, r4, r2
 800135c:	400e      	ands	r6, r1
 800135e:	e5c6      	b.n	8000eee <__aeabi_dsub+0xce>
 8001360:	4663      	mov	r3, ip
 8001362:	18c5      	adds	r5, r0, r3
 8001364:	9b02      	ldr	r3, [sp, #8]
 8001366:	4285      	cmp	r5, r0
 8001368:	4180      	sbcs	r0, r0
 800136a:	469c      	mov	ip, r3
 800136c:	4240      	negs	r0, r0
 800136e:	4464      	add	r4, ip
 8001370:	1824      	adds	r4, r4, r0
 8001372:	2701      	movs	r7, #1
 8001374:	0223      	lsls	r3, r4, #8
 8001376:	d400      	bmi.n	800137a <__aeabi_dsub+0x55a>
 8001378:	e6f5      	b.n	8001166 <__aeabi_dsub+0x346>
 800137a:	2702      	movs	r7, #2
 800137c:	e641      	b.n	8001002 <__aeabi_dsub+0x1e2>
 800137e:	4663      	mov	r3, ip
 8001380:	1ac5      	subs	r5, r0, r3
 8001382:	42a8      	cmp	r0, r5
 8001384:	4180      	sbcs	r0, r0
 8001386:	9b02      	ldr	r3, [sp, #8]
 8001388:	4240      	negs	r0, r0
 800138a:	1ae4      	subs	r4, r4, r3
 800138c:	2701      	movs	r7, #1
 800138e:	1a24      	subs	r4, r4, r0
 8001390:	e5a8      	b.n	8000ee4 <__aeabi_dsub+0xc4>
 8001392:	9d02      	ldr	r5, [sp, #8]
 8001394:	4652      	mov	r2, sl
 8001396:	002b      	movs	r3, r5
 8001398:	3a20      	subs	r2, #32
 800139a:	40d3      	lsrs	r3, r2
 800139c:	0019      	movs	r1, r3
 800139e:	4653      	mov	r3, sl
 80013a0:	2b20      	cmp	r3, #32
 80013a2:	d006      	beq.n	80013b2 <__aeabi_dsub+0x592>
 80013a4:	2240      	movs	r2, #64	@ 0x40
 80013a6:	1ad2      	subs	r2, r2, r3
 80013a8:	002b      	movs	r3, r5
 80013aa:	4093      	lsls	r3, r2
 80013ac:	4662      	mov	r2, ip
 80013ae:	431a      	orrs	r2, r3
 80013b0:	4693      	mov	fp, r2
 80013b2:	465d      	mov	r5, fp
 80013b4:	1e6b      	subs	r3, r5, #1
 80013b6:	419d      	sbcs	r5, r3
 80013b8:	430d      	orrs	r5, r1
 80013ba:	e615      	b.n	8000fe8 <__aeabi_dsub+0x1c8>
 80013bc:	0762      	lsls	r2, r4, #29
 80013be:	08c0      	lsrs	r0, r0, #3
 80013c0:	4302      	orrs	r2, r0
 80013c2:	08e4      	lsrs	r4, r4, #3
 80013c4:	e70d      	b.n	80011e2 <__aeabi_dsub+0x3c2>
 80013c6:	0011      	movs	r1, r2
 80013c8:	0027      	movs	r7, r4
 80013ca:	3920      	subs	r1, #32
 80013cc:	40cf      	lsrs	r7, r1
 80013ce:	2a20      	cmp	r2, #32
 80013d0:	d005      	beq.n	80013de <__aeabi_dsub+0x5be>
 80013d2:	2140      	movs	r1, #64	@ 0x40
 80013d4:	1a8a      	subs	r2, r1, r2
 80013d6:	4094      	lsls	r4, r2
 80013d8:	0025      	movs	r5, r4
 80013da:	4305      	orrs	r5, r0
 80013dc:	9503      	str	r5, [sp, #12]
 80013de:	9d03      	ldr	r5, [sp, #12]
 80013e0:	1e6a      	subs	r2, r5, #1
 80013e2:	4195      	sbcs	r5, r2
 80013e4:	433d      	orrs	r5, r7
 80013e6:	e77d      	b.n	80012e4 <__aeabi_dsub+0x4c4>
 80013e8:	2a00      	cmp	r2, #0
 80013ea:	d100      	bne.n	80013ee <__aeabi_dsub+0x5ce>
 80013ec:	e744      	b.n	8001278 <__aeabi_dsub+0x458>
 80013ee:	2601      	movs	r6, #1
 80013f0:	400e      	ands	r6, r1
 80013f2:	4663      	mov	r3, ip
 80013f4:	08d9      	lsrs	r1, r3, #3
 80013f6:	9b02      	ldr	r3, [sp, #8]
 80013f8:	075a      	lsls	r2, r3, #29
 80013fa:	430a      	orrs	r2, r1
 80013fc:	08dc      	lsrs	r4, r3, #3
 80013fe:	e6f0      	b.n	80011e2 <__aeabi_dsub+0x3c2>
 8001400:	2a00      	cmp	r2, #0
 8001402:	d028      	beq.n	8001456 <__aeabi_dsub+0x636>
 8001404:	4662      	mov	r2, ip
 8001406:	9f02      	ldr	r7, [sp, #8]
 8001408:	08c0      	lsrs	r0, r0, #3
 800140a:	433a      	orrs	r2, r7
 800140c:	d100      	bne.n	8001410 <__aeabi_dsub+0x5f0>
 800140e:	e6dc      	b.n	80011ca <__aeabi_dsub+0x3aa>
 8001410:	0762      	lsls	r2, r4, #29
 8001412:	4310      	orrs	r0, r2
 8001414:	2280      	movs	r2, #128	@ 0x80
 8001416:	08e4      	lsrs	r4, r4, #3
 8001418:	0312      	lsls	r2, r2, #12
 800141a:	4214      	tst	r4, r2
 800141c:	d009      	beq.n	8001432 <__aeabi_dsub+0x612>
 800141e:	08fd      	lsrs	r5, r7, #3
 8001420:	4215      	tst	r5, r2
 8001422:	d106      	bne.n	8001432 <__aeabi_dsub+0x612>
 8001424:	4663      	mov	r3, ip
 8001426:	2601      	movs	r6, #1
 8001428:	002c      	movs	r4, r5
 800142a:	08d8      	lsrs	r0, r3, #3
 800142c:	077b      	lsls	r3, r7, #29
 800142e:	4318      	orrs	r0, r3
 8001430:	400e      	ands	r6, r1
 8001432:	0f42      	lsrs	r2, r0, #29
 8001434:	00c0      	lsls	r0, r0, #3
 8001436:	08c0      	lsrs	r0, r0, #3
 8001438:	0752      	lsls	r2, r2, #29
 800143a:	4302      	orrs	r2, r0
 800143c:	e601      	b.n	8001042 <__aeabi_dsub+0x222>
 800143e:	4663      	mov	r3, ip
 8001440:	1a1d      	subs	r5, r3, r0
 8001442:	45ac      	cmp	ip, r5
 8001444:	4192      	sbcs	r2, r2
 8001446:	9b02      	ldr	r3, [sp, #8]
 8001448:	4252      	negs	r2, r2
 800144a:	1b1c      	subs	r4, r3, r4
 800144c:	000e      	movs	r6, r1
 800144e:	4688      	mov	r8, r1
 8001450:	2701      	movs	r7, #1
 8001452:	1aa4      	subs	r4, r4, r2
 8001454:	e546      	b.n	8000ee4 <__aeabi_dsub+0xc4>
 8001456:	4663      	mov	r3, ip
 8001458:	08d9      	lsrs	r1, r3, #3
 800145a:	9b02      	ldr	r3, [sp, #8]
 800145c:	075a      	lsls	r2, r3, #29
 800145e:	430a      	orrs	r2, r1
 8001460:	08dc      	lsrs	r4, r3, #3
 8001462:	e5ee      	b.n	8001042 <__aeabi_dsub+0x222>
 8001464:	4663      	mov	r3, ip
 8001466:	9c02      	ldr	r4, [sp, #8]
 8001468:	9303      	str	r3, [sp, #12]
 800146a:	e6c7      	b.n	80011fc <__aeabi_dsub+0x3dc>
 800146c:	08c0      	lsrs	r0, r0, #3
 800146e:	2a00      	cmp	r2, #0
 8001470:	d100      	bne.n	8001474 <__aeabi_dsub+0x654>
 8001472:	e6aa      	b.n	80011ca <__aeabi_dsub+0x3aa>
 8001474:	0762      	lsls	r2, r4, #29
 8001476:	4310      	orrs	r0, r2
 8001478:	2280      	movs	r2, #128	@ 0x80
 800147a:	08e4      	lsrs	r4, r4, #3
 800147c:	0312      	lsls	r2, r2, #12
 800147e:	4214      	tst	r4, r2
 8001480:	d0d7      	beq.n	8001432 <__aeabi_dsub+0x612>
 8001482:	9f02      	ldr	r7, [sp, #8]
 8001484:	08fd      	lsrs	r5, r7, #3
 8001486:	4215      	tst	r5, r2
 8001488:	d1d3      	bne.n	8001432 <__aeabi_dsub+0x612>
 800148a:	4663      	mov	r3, ip
 800148c:	2601      	movs	r6, #1
 800148e:	08d8      	lsrs	r0, r3, #3
 8001490:	077b      	lsls	r3, r7, #29
 8001492:	002c      	movs	r4, r5
 8001494:	4318      	orrs	r0, r3
 8001496:	400e      	ands	r6, r1
 8001498:	e7cb      	b.n	8001432 <__aeabi_dsub+0x612>
 800149a:	000a      	movs	r2, r1
 800149c:	0027      	movs	r7, r4
 800149e:	3a20      	subs	r2, #32
 80014a0:	40d7      	lsrs	r7, r2
 80014a2:	2920      	cmp	r1, #32
 80014a4:	d005      	beq.n	80014b2 <__aeabi_dsub+0x692>
 80014a6:	2240      	movs	r2, #64	@ 0x40
 80014a8:	1a52      	subs	r2, r2, r1
 80014aa:	4094      	lsls	r4, r2
 80014ac:	0025      	movs	r5, r4
 80014ae:	4305      	orrs	r5, r0
 80014b0:	9503      	str	r5, [sp, #12]
 80014b2:	9d03      	ldr	r5, [sp, #12]
 80014b4:	1e6a      	subs	r2, r5, #1
 80014b6:	4195      	sbcs	r5, r2
 80014b8:	432f      	orrs	r7, r5
 80014ba:	e610      	b.n	80010de <__aeabi_dsub+0x2be>
 80014bc:	0014      	movs	r4, r2
 80014be:	2500      	movs	r5, #0
 80014c0:	2200      	movs	r2, #0
 80014c2:	e556      	b.n	8000f72 <__aeabi_dsub+0x152>
 80014c4:	9b02      	ldr	r3, [sp, #8]
 80014c6:	4460      	add	r0, ip
 80014c8:	4699      	mov	r9, r3
 80014ca:	4560      	cmp	r0, ip
 80014cc:	4192      	sbcs	r2, r2
 80014ce:	444c      	add	r4, r9
 80014d0:	4252      	negs	r2, r2
 80014d2:	0005      	movs	r5, r0
 80014d4:	18a4      	adds	r4, r4, r2
 80014d6:	e74c      	b.n	8001372 <__aeabi_dsub+0x552>
 80014d8:	001a      	movs	r2, r3
 80014da:	001c      	movs	r4, r3
 80014dc:	432a      	orrs	r2, r5
 80014de:	d000      	beq.n	80014e2 <__aeabi_dsub+0x6c2>
 80014e0:	e6b3      	b.n	800124a <__aeabi_dsub+0x42a>
 80014e2:	e6c9      	b.n	8001278 <__aeabi_dsub+0x458>
 80014e4:	2480      	movs	r4, #128	@ 0x80
 80014e6:	2600      	movs	r6, #0
 80014e8:	0324      	lsls	r4, r4, #12
 80014ea:	e5ae      	b.n	800104a <__aeabi_dsub+0x22a>
 80014ec:	2120      	movs	r1, #32
 80014ee:	2500      	movs	r5, #0
 80014f0:	1a09      	subs	r1, r1, r0
 80014f2:	e517      	b.n	8000f24 <__aeabi_dsub+0x104>
 80014f4:	2200      	movs	r2, #0
 80014f6:	2500      	movs	r5, #0
 80014f8:	4c0b      	ldr	r4, [pc, #44]	@ (8001528 <__aeabi_dsub+0x708>)
 80014fa:	e53a      	b.n	8000f72 <__aeabi_dsub+0x152>
 80014fc:	2d00      	cmp	r5, #0
 80014fe:	d100      	bne.n	8001502 <__aeabi_dsub+0x6e2>
 8001500:	e5f6      	b.n	80010f0 <__aeabi_dsub+0x2d0>
 8001502:	464b      	mov	r3, r9
 8001504:	1bda      	subs	r2, r3, r7
 8001506:	4692      	mov	sl, r2
 8001508:	2f00      	cmp	r7, #0
 800150a:	d100      	bne.n	800150e <__aeabi_dsub+0x6ee>
 800150c:	e66f      	b.n	80011ee <__aeabi_dsub+0x3ce>
 800150e:	2a38      	cmp	r2, #56	@ 0x38
 8001510:	dc05      	bgt.n	800151e <__aeabi_dsub+0x6fe>
 8001512:	2680      	movs	r6, #128	@ 0x80
 8001514:	0436      	lsls	r6, r6, #16
 8001516:	4334      	orrs	r4, r6
 8001518:	4688      	mov	r8, r1
 800151a:	000e      	movs	r6, r1
 800151c:	e6d1      	b.n	80012c2 <__aeabi_dsub+0x4a2>
 800151e:	4688      	mov	r8, r1
 8001520:	000e      	movs	r6, r1
 8001522:	2501      	movs	r5, #1
 8001524:	e6de      	b.n	80012e4 <__aeabi_dsub+0x4c4>
 8001526:	46c0      	nop			@ (mov r8, r8)
 8001528:	000007ff 	.word	0x000007ff
 800152c:	ff7fffff 	.word	0xff7fffff
 8001530:	000007fe 	.word	0x000007fe
 8001534:	2d00      	cmp	r5, #0
 8001536:	d100      	bne.n	800153a <__aeabi_dsub+0x71a>
 8001538:	e668      	b.n	800120c <__aeabi_dsub+0x3ec>
 800153a:	464b      	mov	r3, r9
 800153c:	1bd9      	subs	r1, r3, r7
 800153e:	2f00      	cmp	r7, #0
 8001540:	d101      	bne.n	8001546 <__aeabi_dsub+0x726>
 8001542:	468a      	mov	sl, r1
 8001544:	e5a7      	b.n	8001096 <__aeabi_dsub+0x276>
 8001546:	2701      	movs	r7, #1
 8001548:	2938      	cmp	r1, #56	@ 0x38
 800154a:	dd00      	ble.n	800154e <__aeabi_dsub+0x72e>
 800154c:	e5c7      	b.n	80010de <__aeabi_dsub+0x2be>
 800154e:	2280      	movs	r2, #128	@ 0x80
 8001550:	0412      	lsls	r2, r2, #16
 8001552:	4314      	orrs	r4, r2
 8001554:	e5af      	b.n	80010b6 <__aeabi_dsub+0x296>
 8001556:	46c0      	nop			@ (mov r8, r8)

08001558 <__aeabi_d2iz>:
 8001558:	000b      	movs	r3, r1
 800155a:	0002      	movs	r2, r0
 800155c:	b570      	push	{r4, r5, r6, lr}
 800155e:	4d16      	ldr	r5, [pc, #88]	@ (80015b8 <__aeabi_d2iz+0x60>)
 8001560:	030c      	lsls	r4, r1, #12
 8001562:	b082      	sub	sp, #8
 8001564:	0049      	lsls	r1, r1, #1
 8001566:	2000      	movs	r0, #0
 8001568:	9200      	str	r2, [sp, #0]
 800156a:	9301      	str	r3, [sp, #4]
 800156c:	0b24      	lsrs	r4, r4, #12
 800156e:	0d49      	lsrs	r1, r1, #21
 8001570:	0fde      	lsrs	r6, r3, #31
 8001572:	42a9      	cmp	r1, r5
 8001574:	dd04      	ble.n	8001580 <__aeabi_d2iz+0x28>
 8001576:	4811      	ldr	r0, [pc, #68]	@ (80015bc <__aeabi_d2iz+0x64>)
 8001578:	4281      	cmp	r1, r0
 800157a:	dd03      	ble.n	8001584 <__aeabi_d2iz+0x2c>
 800157c:	4b10      	ldr	r3, [pc, #64]	@ (80015c0 <__aeabi_d2iz+0x68>)
 800157e:	18f0      	adds	r0, r6, r3
 8001580:	b002      	add	sp, #8
 8001582:	bd70      	pop	{r4, r5, r6, pc}
 8001584:	2080      	movs	r0, #128	@ 0x80
 8001586:	0340      	lsls	r0, r0, #13
 8001588:	4320      	orrs	r0, r4
 800158a:	4c0e      	ldr	r4, [pc, #56]	@ (80015c4 <__aeabi_d2iz+0x6c>)
 800158c:	1a64      	subs	r4, r4, r1
 800158e:	2c1f      	cmp	r4, #31
 8001590:	dd08      	ble.n	80015a4 <__aeabi_d2iz+0x4c>
 8001592:	4b0d      	ldr	r3, [pc, #52]	@ (80015c8 <__aeabi_d2iz+0x70>)
 8001594:	1a5b      	subs	r3, r3, r1
 8001596:	40d8      	lsrs	r0, r3
 8001598:	0003      	movs	r3, r0
 800159a:	4258      	negs	r0, r3
 800159c:	2e00      	cmp	r6, #0
 800159e:	d1ef      	bne.n	8001580 <__aeabi_d2iz+0x28>
 80015a0:	0018      	movs	r0, r3
 80015a2:	e7ed      	b.n	8001580 <__aeabi_d2iz+0x28>
 80015a4:	4b09      	ldr	r3, [pc, #36]	@ (80015cc <__aeabi_d2iz+0x74>)
 80015a6:	9a00      	ldr	r2, [sp, #0]
 80015a8:	469c      	mov	ip, r3
 80015aa:	0003      	movs	r3, r0
 80015ac:	4461      	add	r1, ip
 80015ae:	408b      	lsls	r3, r1
 80015b0:	40e2      	lsrs	r2, r4
 80015b2:	4313      	orrs	r3, r2
 80015b4:	e7f1      	b.n	800159a <__aeabi_d2iz+0x42>
 80015b6:	46c0      	nop			@ (mov r8, r8)
 80015b8:	000003fe 	.word	0x000003fe
 80015bc:	0000041d 	.word	0x0000041d
 80015c0:	7fffffff 	.word	0x7fffffff
 80015c4:	00000433 	.word	0x00000433
 80015c8:	00000413 	.word	0x00000413
 80015cc:	fffffbed 	.word	0xfffffbed

080015d0 <__aeabi_i2d>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d016      	beq.n	8001604 <__aeabi_i2d+0x34>
 80015d6:	17c3      	asrs	r3, r0, #31
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	405d      	eors	r5, r3
 80015dc:	0fc4      	lsrs	r4, r0, #31
 80015de:	0028      	movs	r0, r5
 80015e0:	f000 f92e 	bl	8001840 <__clzsi2>
 80015e4:	4b10      	ldr	r3, [pc, #64]	@ (8001628 <__aeabi_i2d+0x58>)
 80015e6:	1a1b      	subs	r3, r3, r0
 80015e8:	055b      	lsls	r3, r3, #21
 80015ea:	0d5b      	lsrs	r3, r3, #21
 80015ec:	280a      	cmp	r0, #10
 80015ee:	dc14      	bgt.n	800161a <__aeabi_i2d+0x4a>
 80015f0:	0002      	movs	r2, r0
 80015f2:	002e      	movs	r6, r5
 80015f4:	3215      	adds	r2, #21
 80015f6:	4096      	lsls	r6, r2
 80015f8:	220b      	movs	r2, #11
 80015fa:	1a12      	subs	r2, r2, r0
 80015fc:	40d5      	lsrs	r5, r2
 80015fe:	032d      	lsls	r5, r5, #12
 8001600:	0b2d      	lsrs	r5, r5, #12
 8001602:	e003      	b.n	800160c <__aeabi_i2d+0x3c>
 8001604:	2400      	movs	r4, #0
 8001606:	2300      	movs	r3, #0
 8001608:	2500      	movs	r5, #0
 800160a:	2600      	movs	r6, #0
 800160c:	051b      	lsls	r3, r3, #20
 800160e:	432b      	orrs	r3, r5
 8001610:	07e4      	lsls	r4, r4, #31
 8001612:	4323      	orrs	r3, r4
 8001614:	0030      	movs	r0, r6
 8001616:	0019      	movs	r1, r3
 8001618:	bd70      	pop	{r4, r5, r6, pc}
 800161a:	380b      	subs	r0, #11
 800161c:	4085      	lsls	r5, r0
 800161e:	032d      	lsls	r5, r5, #12
 8001620:	2600      	movs	r6, #0
 8001622:	0b2d      	lsrs	r5, r5, #12
 8001624:	e7f2      	b.n	800160c <__aeabi_i2d+0x3c>
 8001626:	46c0      	nop			@ (mov r8, r8)
 8001628:	0000041e 	.word	0x0000041e

0800162c <__aeabi_f2d>:
 800162c:	b570      	push	{r4, r5, r6, lr}
 800162e:	0242      	lsls	r2, r0, #9
 8001630:	0043      	lsls	r3, r0, #1
 8001632:	0fc4      	lsrs	r4, r0, #31
 8001634:	20fe      	movs	r0, #254	@ 0xfe
 8001636:	0e1b      	lsrs	r3, r3, #24
 8001638:	1c59      	adds	r1, r3, #1
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	4208      	tst	r0, r1
 800163e:	d00c      	beq.n	800165a <__aeabi_f2d+0x2e>
 8001640:	21e0      	movs	r1, #224	@ 0xe0
 8001642:	0089      	lsls	r1, r1, #2
 8001644:	468c      	mov	ip, r1
 8001646:	076d      	lsls	r5, r5, #29
 8001648:	0b12      	lsrs	r2, r2, #12
 800164a:	4463      	add	r3, ip
 800164c:	051b      	lsls	r3, r3, #20
 800164e:	4313      	orrs	r3, r2
 8001650:	07e4      	lsls	r4, r4, #31
 8001652:	4323      	orrs	r3, r4
 8001654:	0028      	movs	r0, r5
 8001656:	0019      	movs	r1, r3
 8001658:	bd70      	pop	{r4, r5, r6, pc}
 800165a:	2b00      	cmp	r3, #0
 800165c:	d114      	bne.n	8001688 <__aeabi_f2d+0x5c>
 800165e:	2d00      	cmp	r5, #0
 8001660:	d01b      	beq.n	800169a <__aeabi_f2d+0x6e>
 8001662:	0028      	movs	r0, r5
 8001664:	f000 f8ec 	bl	8001840 <__clzsi2>
 8001668:	280a      	cmp	r0, #10
 800166a:	dc1c      	bgt.n	80016a6 <__aeabi_f2d+0x7a>
 800166c:	230b      	movs	r3, #11
 800166e:	002a      	movs	r2, r5
 8001670:	1a1b      	subs	r3, r3, r0
 8001672:	40da      	lsrs	r2, r3
 8001674:	0003      	movs	r3, r0
 8001676:	3315      	adds	r3, #21
 8001678:	409d      	lsls	r5, r3
 800167a:	4b0e      	ldr	r3, [pc, #56]	@ (80016b4 <__aeabi_f2d+0x88>)
 800167c:	0312      	lsls	r2, r2, #12
 800167e:	1a1b      	subs	r3, r3, r0
 8001680:	055b      	lsls	r3, r3, #21
 8001682:	0b12      	lsrs	r2, r2, #12
 8001684:	0d5b      	lsrs	r3, r3, #21
 8001686:	e7e1      	b.n	800164c <__aeabi_f2d+0x20>
 8001688:	2d00      	cmp	r5, #0
 800168a:	d009      	beq.n	80016a0 <__aeabi_f2d+0x74>
 800168c:	0b13      	lsrs	r3, r2, #12
 800168e:	2280      	movs	r2, #128	@ 0x80
 8001690:	0312      	lsls	r2, r2, #12
 8001692:	431a      	orrs	r2, r3
 8001694:	076d      	lsls	r5, r5, #29
 8001696:	4b08      	ldr	r3, [pc, #32]	@ (80016b8 <__aeabi_f2d+0x8c>)
 8001698:	e7d8      	b.n	800164c <__aeabi_f2d+0x20>
 800169a:	2300      	movs	r3, #0
 800169c:	2200      	movs	r2, #0
 800169e:	e7d5      	b.n	800164c <__aeabi_f2d+0x20>
 80016a0:	2200      	movs	r2, #0
 80016a2:	4b05      	ldr	r3, [pc, #20]	@ (80016b8 <__aeabi_f2d+0x8c>)
 80016a4:	e7d2      	b.n	800164c <__aeabi_f2d+0x20>
 80016a6:	0003      	movs	r3, r0
 80016a8:	002a      	movs	r2, r5
 80016aa:	3b0b      	subs	r3, #11
 80016ac:	409a      	lsls	r2, r3
 80016ae:	2500      	movs	r5, #0
 80016b0:	e7e3      	b.n	800167a <__aeabi_f2d+0x4e>
 80016b2:	46c0      	nop			@ (mov r8, r8)
 80016b4:	00000389 	.word	0x00000389
 80016b8:	000007ff 	.word	0x000007ff

080016bc <__aeabi_d2f>:
 80016bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016be:	004b      	lsls	r3, r1, #1
 80016c0:	030f      	lsls	r7, r1, #12
 80016c2:	0d5b      	lsrs	r3, r3, #21
 80016c4:	4c3b      	ldr	r4, [pc, #236]	@ (80017b4 <__aeabi_d2f+0xf8>)
 80016c6:	0f45      	lsrs	r5, r0, #29
 80016c8:	b083      	sub	sp, #12
 80016ca:	0a7f      	lsrs	r7, r7, #9
 80016cc:	1c5e      	adds	r6, r3, #1
 80016ce:	432f      	orrs	r7, r5
 80016d0:	9000      	str	r0, [sp, #0]
 80016d2:	9101      	str	r1, [sp, #4]
 80016d4:	0fca      	lsrs	r2, r1, #31
 80016d6:	00c5      	lsls	r5, r0, #3
 80016d8:	4226      	tst	r6, r4
 80016da:	d00b      	beq.n	80016f4 <__aeabi_d2f+0x38>
 80016dc:	4936      	ldr	r1, [pc, #216]	@ (80017b8 <__aeabi_d2f+0xfc>)
 80016de:	185c      	adds	r4, r3, r1
 80016e0:	2cfe      	cmp	r4, #254	@ 0xfe
 80016e2:	dd13      	ble.n	800170c <__aeabi_d2f+0x50>
 80016e4:	20ff      	movs	r0, #255	@ 0xff
 80016e6:	2300      	movs	r3, #0
 80016e8:	05c0      	lsls	r0, r0, #23
 80016ea:	4318      	orrs	r0, r3
 80016ec:	07d2      	lsls	r2, r2, #31
 80016ee:	4310      	orrs	r0, r2
 80016f0:	b003      	add	sp, #12
 80016f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d102      	bne.n	80016fe <__aeabi_d2f+0x42>
 80016f8:	2000      	movs	r0, #0
 80016fa:	2300      	movs	r3, #0
 80016fc:	e7f4      	b.n	80016e8 <__aeabi_d2f+0x2c>
 80016fe:	433d      	orrs	r5, r7
 8001700:	d0f0      	beq.n	80016e4 <__aeabi_d2f+0x28>
 8001702:	2380      	movs	r3, #128	@ 0x80
 8001704:	03db      	lsls	r3, r3, #15
 8001706:	20ff      	movs	r0, #255	@ 0xff
 8001708:	433b      	orrs	r3, r7
 800170a:	e7ed      	b.n	80016e8 <__aeabi_d2f+0x2c>
 800170c:	2c00      	cmp	r4, #0
 800170e:	dd14      	ble.n	800173a <__aeabi_d2f+0x7e>
 8001710:	9b00      	ldr	r3, [sp, #0]
 8001712:	00ff      	lsls	r7, r7, #3
 8001714:	019b      	lsls	r3, r3, #6
 8001716:	1e58      	subs	r0, r3, #1
 8001718:	4183      	sbcs	r3, r0
 800171a:	0f69      	lsrs	r1, r5, #29
 800171c:	433b      	orrs	r3, r7
 800171e:	430b      	orrs	r3, r1
 8001720:	0759      	lsls	r1, r3, #29
 8001722:	d041      	beq.n	80017a8 <__aeabi_d2f+0xec>
 8001724:	210f      	movs	r1, #15
 8001726:	4019      	ands	r1, r3
 8001728:	2904      	cmp	r1, #4
 800172a:	d028      	beq.n	800177e <__aeabi_d2f+0xc2>
 800172c:	3304      	adds	r3, #4
 800172e:	0159      	lsls	r1, r3, #5
 8001730:	d525      	bpl.n	800177e <__aeabi_d2f+0xc2>
 8001732:	3401      	adds	r4, #1
 8001734:	2300      	movs	r3, #0
 8001736:	b2e0      	uxtb	r0, r4
 8001738:	e7d6      	b.n	80016e8 <__aeabi_d2f+0x2c>
 800173a:	0021      	movs	r1, r4
 800173c:	3117      	adds	r1, #23
 800173e:	dbdb      	blt.n	80016f8 <__aeabi_d2f+0x3c>
 8001740:	2180      	movs	r1, #128	@ 0x80
 8001742:	201e      	movs	r0, #30
 8001744:	0409      	lsls	r1, r1, #16
 8001746:	4339      	orrs	r1, r7
 8001748:	1b00      	subs	r0, r0, r4
 800174a:	281f      	cmp	r0, #31
 800174c:	dd1b      	ble.n	8001786 <__aeabi_d2f+0xca>
 800174e:	2602      	movs	r6, #2
 8001750:	4276      	negs	r6, r6
 8001752:	1b34      	subs	r4, r6, r4
 8001754:	000e      	movs	r6, r1
 8001756:	40e6      	lsrs	r6, r4
 8001758:	0034      	movs	r4, r6
 800175a:	2820      	cmp	r0, #32
 800175c:	d004      	beq.n	8001768 <__aeabi_d2f+0xac>
 800175e:	4817      	ldr	r0, [pc, #92]	@ (80017bc <__aeabi_d2f+0x100>)
 8001760:	4684      	mov	ip, r0
 8001762:	4463      	add	r3, ip
 8001764:	4099      	lsls	r1, r3
 8001766:	430d      	orrs	r5, r1
 8001768:	002b      	movs	r3, r5
 800176a:	1e59      	subs	r1, r3, #1
 800176c:	418b      	sbcs	r3, r1
 800176e:	4323      	orrs	r3, r4
 8001770:	0759      	lsls	r1, r3, #29
 8001772:	d015      	beq.n	80017a0 <__aeabi_d2f+0xe4>
 8001774:	210f      	movs	r1, #15
 8001776:	2400      	movs	r4, #0
 8001778:	4019      	ands	r1, r3
 800177a:	2904      	cmp	r1, #4
 800177c:	d117      	bne.n	80017ae <__aeabi_d2f+0xf2>
 800177e:	019b      	lsls	r3, r3, #6
 8001780:	0a5b      	lsrs	r3, r3, #9
 8001782:	b2e0      	uxtb	r0, r4
 8001784:	e7b0      	b.n	80016e8 <__aeabi_d2f+0x2c>
 8001786:	4c0e      	ldr	r4, [pc, #56]	@ (80017c0 <__aeabi_d2f+0x104>)
 8001788:	191c      	adds	r4, r3, r4
 800178a:	002b      	movs	r3, r5
 800178c:	40a5      	lsls	r5, r4
 800178e:	40c3      	lsrs	r3, r0
 8001790:	40a1      	lsls	r1, r4
 8001792:	1e68      	subs	r0, r5, #1
 8001794:	4185      	sbcs	r5, r0
 8001796:	4329      	orrs	r1, r5
 8001798:	430b      	orrs	r3, r1
 800179a:	2400      	movs	r4, #0
 800179c:	0759      	lsls	r1, r3, #29
 800179e:	d1c1      	bne.n	8001724 <__aeabi_d2f+0x68>
 80017a0:	019b      	lsls	r3, r3, #6
 80017a2:	2000      	movs	r0, #0
 80017a4:	0a5b      	lsrs	r3, r3, #9
 80017a6:	e79f      	b.n	80016e8 <__aeabi_d2f+0x2c>
 80017a8:	08db      	lsrs	r3, r3, #3
 80017aa:	b2e0      	uxtb	r0, r4
 80017ac:	e79c      	b.n	80016e8 <__aeabi_d2f+0x2c>
 80017ae:	3304      	adds	r3, #4
 80017b0:	e7e5      	b.n	800177e <__aeabi_d2f+0xc2>
 80017b2:	46c0      	nop			@ (mov r8, r8)
 80017b4:	000007fe 	.word	0x000007fe
 80017b8:	fffffc80 	.word	0xfffffc80
 80017bc:	fffffca2 	.word	0xfffffca2
 80017c0:	fffffc82 	.word	0xfffffc82

080017c4 <__aeabi_cdrcmple>:
 80017c4:	4684      	mov	ip, r0
 80017c6:	0010      	movs	r0, r2
 80017c8:	4662      	mov	r2, ip
 80017ca:	468c      	mov	ip, r1
 80017cc:	0019      	movs	r1, r3
 80017ce:	4663      	mov	r3, ip
 80017d0:	e000      	b.n	80017d4 <__aeabi_cdcmpeq>
 80017d2:	46c0      	nop			@ (mov r8, r8)

080017d4 <__aeabi_cdcmpeq>:
 80017d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80017d6:	f000 f909 	bl	80019ec <__ledf2>
 80017da:	2800      	cmp	r0, #0
 80017dc:	d401      	bmi.n	80017e2 <__aeabi_cdcmpeq+0xe>
 80017de:	2100      	movs	r1, #0
 80017e0:	42c8      	cmn	r0, r1
 80017e2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080017e4 <__aeabi_dcmpeq>:
 80017e4:	b510      	push	{r4, lr}
 80017e6:	f000 f849 	bl	800187c <__eqdf2>
 80017ea:	4240      	negs	r0, r0
 80017ec:	3001      	adds	r0, #1
 80017ee:	bd10      	pop	{r4, pc}

080017f0 <__aeabi_dcmplt>:
 80017f0:	b510      	push	{r4, lr}
 80017f2:	f000 f8fb 	bl	80019ec <__ledf2>
 80017f6:	2800      	cmp	r0, #0
 80017f8:	db01      	blt.n	80017fe <__aeabi_dcmplt+0xe>
 80017fa:	2000      	movs	r0, #0
 80017fc:	bd10      	pop	{r4, pc}
 80017fe:	2001      	movs	r0, #1
 8001800:	bd10      	pop	{r4, pc}
 8001802:	46c0      	nop			@ (mov r8, r8)

08001804 <__aeabi_dcmple>:
 8001804:	b510      	push	{r4, lr}
 8001806:	f000 f8f1 	bl	80019ec <__ledf2>
 800180a:	2800      	cmp	r0, #0
 800180c:	dd01      	ble.n	8001812 <__aeabi_dcmple+0xe>
 800180e:	2000      	movs	r0, #0
 8001810:	bd10      	pop	{r4, pc}
 8001812:	2001      	movs	r0, #1
 8001814:	bd10      	pop	{r4, pc}
 8001816:	46c0      	nop			@ (mov r8, r8)

08001818 <__aeabi_dcmpgt>:
 8001818:	b510      	push	{r4, lr}
 800181a:	f000 f873 	bl	8001904 <__gedf2>
 800181e:	2800      	cmp	r0, #0
 8001820:	dc01      	bgt.n	8001826 <__aeabi_dcmpgt+0xe>
 8001822:	2000      	movs	r0, #0
 8001824:	bd10      	pop	{r4, pc}
 8001826:	2001      	movs	r0, #1
 8001828:	bd10      	pop	{r4, pc}
 800182a:	46c0      	nop			@ (mov r8, r8)

0800182c <__aeabi_dcmpge>:
 800182c:	b510      	push	{r4, lr}
 800182e:	f000 f869 	bl	8001904 <__gedf2>
 8001832:	2800      	cmp	r0, #0
 8001834:	da01      	bge.n	800183a <__aeabi_dcmpge+0xe>
 8001836:	2000      	movs	r0, #0
 8001838:	bd10      	pop	{r4, pc}
 800183a:	2001      	movs	r0, #1
 800183c:	bd10      	pop	{r4, pc}
 800183e:	46c0      	nop			@ (mov r8, r8)

08001840 <__clzsi2>:
 8001840:	211c      	movs	r1, #28
 8001842:	2301      	movs	r3, #1
 8001844:	041b      	lsls	r3, r3, #16
 8001846:	4298      	cmp	r0, r3
 8001848:	d301      	bcc.n	800184e <__clzsi2+0xe>
 800184a:	0c00      	lsrs	r0, r0, #16
 800184c:	3910      	subs	r1, #16
 800184e:	0a1b      	lsrs	r3, r3, #8
 8001850:	4298      	cmp	r0, r3
 8001852:	d301      	bcc.n	8001858 <__clzsi2+0x18>
 8001854:	0a00      	lsrs	r0, r0, #8
 8001856:	3908      	subs	r1, #8
 8001858:	091b      	lsrs	r3, r3, #4
 800185a:	4298      	cmp	r0, r3
 800185c:	d301      	bcc.n	8001862 <__clzsi2+0x22>
 800185e:	0900      	lsrs	r0, r0, #4
 8001860:	3904      	subs	r1, #4
 8001862:	a202      	add	r2, pc, #8	@ (adr r2, 800186c <__clzsi2+0x2c>)
 8001864:	5c10      	ldrb	r0, [r2, r0]
 8001866:	1840      	adds	r0, r0, r1
 8001868:	4770      	bx	lr
 800186a:	46c0      	nop			@ (mov r8, r8)
 800186c:	02020304 	.word	0x02020304
 8001870:	01010101 	.word	0x01010101
	...

0800187c <__eqdf2>:
 800187c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800187e:	4657      	mov	r7, sl
 8001880:	46de      	mov	lr, fp
 8001882:	464e      	mov	r6, r9
 8001884:	4645      	mov	r5, r8
 8001886:	b5e0      	push	{r5, r6, r7, lr}
 8001888:	000d      	movs	r5, r1
 800188a:	0004      	movs	r4, r0
 800188c:	0fe8      	lsrs	r0, r5, #31
 800188e:	4683      	mov	fp, r0
 8001890:	0309      	lsls	r1, r1, #12
 8001892:	0fd8      	lsrs	r0, r3, #31
 8001894:	0b09      	lsrs	r1, r1, #12
 8001896:	4682      	mov	sl, r0
 8001898:	4819      	ldr	r0, [pc, #100]	@ (8001900 <__eqdf2+0x84>)
 800189a:	468c      	mov	ip, r1
 800189c:	031f      	lsls	r7, r3, #12
 800189e:	0069      	lsls	r1, r5, #1
 80018a0:	005e      	lsls	r6, r3, #1
 80018a2:	0d49      	lsrs	r1, r1, #21
 80018a4:	0b3f      	lsrs	r7, r7, #12
 80018a6:	0d76      	lsrs	r6, r6, #21
 80018a8:	4281      	cmp	r1, r0
 80018aa:	d018      	beq.n	80018de <__eqdf2+0x62>
 80018ac:	4286      	cmp	r6, r0
 80018ae:	d00f      	beq.n	80018d0 <__eqdf2+0x54>
 80018b0:	2001      	movs	r0, #1
 80018b2:	42b1      	cmp	r1, r6
 80018b4:	d10d      	bne.n	80018d2 <__eqdf2+0x56>
 80018b6:	45bc      	cmp	ip, r7
 80018b8:	d10b      	bne.n	80018d2 <__eqdf2+0x56>
 80018ba:	4294      	cmp	r4, r2
 80018bc:	d109      	bne.n	80018d2 <__eqdf2+0x56>
 80018be:	45d3      	cmp	fp, sl
 80018c0:	d01c      	beq.n	80018fc <__eqdf2+0x80>
 80018c2:	2900      	cmp	r1, #0
 80018c4:	d105      	bne.n	80018d2 <__eqdf2+0x56>
 80018c6:	4660      	mov	r0, ip
 80018c8:	4320      	orrs	r0, r4
 80018ca:	1e43      	subs	r3, r0, #1
 80018cc:	4198      	sbcs	r0, r3
 80018ce:	e000      	b.n	80018d2 <__eqdf2+0x56>
 80018d0:	2001      	movs	r0, #1
 80018d2:	bcf0      	pop	{r4, r5, r6, r7}
 80018d4:	46bb      	mov	fp, r7
 80018d6:	46b2      	mov	sl, r6
 80018d8:	46a9      	mov	r9, r5
 80018da:	46a0      	mov	r8, r4
 80018dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018de:	2001      	movs	r0, #1
 80018e0:	428e      	cmp	r6, r1
 80018e2:	d1f6      	bne.n	80018d2 <__eqdf2+0x56>
 80018e4:	4661      	mov	r1, ip
 80018e6:	4339      	orrs	r1, r7
 80018e8:	000f      	movs	r7, r1
 80018ea:	4317      	orrs	r7, r2
 80018ec:	4327      	orrs	r7, r4
 80018ee:	d1f0      	bne.n	80018d2 <__eqdf2+0x56>
 80018f0:	465b      	mov	r3, fp
 80018f2:	4652      	mov	r2, sl
 80018f4:	1a98      	subs	r0, r3, r2
 80018f6:	1e43      	subs	r3, r0, #1
 80018f8:	4198      	sbcs	r0, r3
 80018fa:	e7ea      	b.n	80018d2 <__eqdf2+0x56>
 80018fc:	2000      	movs	r0, #0
 80018fe:	e7e8      	b.n	80018d2 <__eqdf2+0x56>
 8001900:	000007ff 	.word	0x000007ff

08001904 <__gedf2>:
 8001904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001906:	4657      	mov	r7, sl
 8001908:	464e      	mov	r6, r9
 800190a:	4645      	mov	r5, r8
 800190c:	46de      	mov	lr, fp
 800190e:	b5e0      	push	{r5, r6, r7, lr}
 8001910:	000d      	movs	r5, r1
 8001912:	030f      	lsls	r7, r1, #12
 8001914:	0b39      	lsrs	r1, r7, #12
 8001916:	b083      	sub	sp, #12
 8001918:	0004      	movs	r4, r0
 800191a:	4680      	mov	r8, r0
 800191c:	9101      	str	r1, [sp, #4]
 800191e:	0058      	lsls	r0, r3, #1
 8001920:	0fe9      	lsrs	r1, r5, #31
 8001922:	4f31      	ldr	r7, [pc, #196]	@ (80019e8 <__gedf2+0xe4>)
 8001924:	0d40      	lsrs	r0, r0, #21
 8001926:	468c      	mov	ip, r1
 8001928:	006e      	lsls	r6, r5, #1
 800192a:	0319      	lsls	r1, r3, #12
 800192c:	4682      	mov	sl, r0
 800192e:	4691      	mov	r9, r2
 8001930:	0d76      	lsrs	r6, r6, #21
 8001932:	0b09      	lsrs	r1, r1, #12
 8001934:	0fd8      	lsrs	r0, r3, #31
 8001936:	42be      	cmp	r6, r7
 8001938:	d01f      	beq.n	800197a <__gedf2+0x76>
 800193a:	45ba      	cmp	sl, r7
 800193c:	d00f      	beq.n	800195e <__gedf2+0x5a>
 800193e:	2e00      	cmp	r6, #0
 8001940:	d12f      	bne.n	80019a2 <__gedf2+0x9e>
 8001942:	4655      	mov	r5, sl
 8001944:	9e01      	ldr	r6, [sp, #4]
 8001946:	4334      	orrs	r4, r6
 8001948:	2d00      	cmp	r5, #0
 800194a:	d127      	bne.n	800199c <__gedf2+0x98>
 800194c:	430a      	orrs	r2, r1
 800194e:	d03a      	beq.n	80019c6 <__gedf2+0xc2>
 8001950:	2c00      	cmp	r4, #0
 8001952:	d145      	bne.n	80019e0 <__gedf2+0xdc>
 8001954:	2800      	cmp	r0, #0
 8001956:	d11a      	bne.n	800198e <__gedf2+0x8a>
 8001958:	2001      	movs	r0, #1
 800195a:	4240      	negs	r0, r0
 800195c:	e017      	b.n	800198e <__gedf2+0x8a>
 800195e:	4311      	orrs	r1, r2
 8001960:	d13b      	bne.n	80019da <__gedf2+0xd6>
 8001962:	2e00      	cmp	r6, #0
 8001964:	d102      	bne.n	800196c <__gedf2+0x68>
 8001966:	9f01      	ldr	r7, [sp, #4]
 8001968:	4327      	orrs	r7, r4
 800196a:	d0f3      	beq.n	8001954 <__gedf2+0x50>
 800196c:	4584      	cmp	ip, r0
 800196e:	d109      	bne.n	8001984 <__gedf2+0x80>
 8001970:	4663      	mov	r3, ip
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0f0      	beq.n	8001958 <__gedf2+0x54>
 8001976:	4660      	mov	r0, ip
 8001978:	e009      	b.n	800198e <__gedf2+0x8a>
 800197a:	9f01      	ldr	r7, [sp, #4]
 800197c:	4327      	orrs	r7, r4
 800197e:	d12c      	bne.n	80019da <__gedf2+0xd6>
 8001980:	45b2      	cmp	sl, r6
 8001982:	d024      	beq.n	80019ce <__gedf2+0xca>
 8001984:	4663      	mov	r3, ip
 8001986:	2002      	movs	r0, #2
 8001988:	3b01      	subs	r3, #1
 800198a:	4018      	ands	r0, r3
 800198c:	3801      	subs	r0, #1
 800198e:	b003      	add	sp, #12
 8001990:	bcf0      	pop	{r4, r5, r6, r7}
 8001992:	46bb      	mov	fp, r7
 8001994:	46b2      	mov	sl, r6
 8001996:	46a9      	mov	r9, r5
 8001998:	46a0      	mov	r8, r4
 800199a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800199c:	2c00      	cmp	r4, #0
 800199e:	d0d9      	beq.n	8001954 <__gedf2+0x50>
 80019a0:	e7e4      	b.n	800196c <__gedf2+0x68>
 80019a2:	4654      	mov	r4, sl
 80019a4:	2c00      	cmp	r4, #0
 80019a6:	d0ed      	beq.n	8001984 <__gedf2+0x80>
 80019a8:	4584      	cmp	ip, r0
 80019aa:	d1eb      	bne.n	8001984 <__gedf2+0x80>
 80019ac:	4556      	cmp	r6, sl
 80019ae:	dce9      	bgt.n	8001984 <__gedf2+0x80>
 80019b0:	dbde      	blt.n	8001970 <__gedf2+0x6c>
 80019b2:	9b01      	ldr	r3, [sp, #4]
 80019b4:	428b      	cmp	r3, r1
 80019b6:	d8e5      	bhi.n	8001984 <__gedf2+0x80>
 80019b8:	d1da      	bne.n	8001970 <__gedf2+0x6c>
 80019ba:	45c8      	cmp	r8, r9
 80019bc:	d8e2      	bhi.n	8001984 <__gedf2+0x80>
 80019be:	2000      	movs	r0, #0
 80019c0:	45c8      	cmp	r8, r9
 80019c2:	d2e4      	bcs.n	800198e <__gedf2+0x8a>
 80019c4:	e7d4      	b.n	8001970 <__gedf2+0x6c>
 80019c6:	2000      	movs	r0, #0
 80019c8:	2c00      	cmp	r4, #0
 80019ca:	d0e0      	beq.n	800198e <__gedf2+0x8a>
 80019cc:	e7da      	b.n	8001984 <__gedf2+0x80>
 80019ce:	4311      	orrs	r1, r2
 80019d0:	d103      	bne.n	80019da <__gedf2+0xd6>
 80019d2:	4584      	cmp	ip, r0
 80019d4:	d1d6      	bne.n	8001984 <__gedf2+0x80>
 80019d6:	2000      	movs	r0, #0
 80019d8:	e7d9      	b.n	800198e <__gedf2+0x8a>
 80019da:	2002      	movs	r0, #2
 80019dc:	4240      	negs	r0, r0
 80019de:	e7d6      	b.n	800198e <__gedf2+0x8a>
 80019e0:	4584      	cmp	ip, r0
 80019e2:	d0e6      	beq.n	80019b2 <__gedf2+0xae>
 80019e4:	e7ce      	b.n	8001984 <__gedf2+0x80>
 80019e6:	46c0      	nop			@ (mov r8, r8)
 80019e8:	000007ff 	.word	0x000007ff

080019ec <__ledf2>:
 80019ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ee:	4657      	mov	r7, sl
 80019f0:	464e      	mov	r6, r9
 80019f2:	4645      	mov	r5, r8
 80019f4:	46de      	mov	lr, fp
 80019f6:	b5e0      	push	{r5, r6, r7, lr}
 80019f8:	000d      	movs	r5, r1
 80019fa:	030f      	lsls	r7, r1, #12
 80019fc:	0004      	movs	r4, r0
 80019fe:	4680      	mov	r8, r0
 8001a00:	0fe8      	lsrs	r0, r5, #31
 8001a02:	0b39      	lsrs	r1, r7, #12
 8001a04:	4684      	mov	ip, r0
 8001a06:	b083      	sub	sp, #12
 8001a08:	0058      	lsls	r0, r3, #1
 8001a0a:	4f30      	ldr	r7, [pc, #192]	@ (8001acc <__ledf2+0xe0>)
 8001a0c:	0d40      	lsrs	r0, r0, #21
 8001a0e:	9101      	str	r1, [sp, #4]
 8001a10:	031e      	lsls	r6, r3, #12
 8001a12:	0069      	lsls	r1, r5, #1
 8001a14:	4682      	mov	sl, r0
 8001a16:	4691      	mov	r9, r2
 8001a18:	0d49      	lsrs	r1, r1, #21
 8001a1a:	0b36      	lsrs	r6, r6, #12
 8001a1c:	0fd8      	lsrs	r0, r3, #31
 8001a1e:	42b9      	cmp	r1, r7
 8001a20:	d020      	beq.n	8001a64 <__ledf2+0x78>
 8001a22:	45ba      	cmp	sl, r7
 8001a24:	d00f      	beq.n	8001a46 <__ledf2+0x5a>
 8001a26:	2900      	cmp	r1, #0
 8001a28:	d12b      	bne.n	8001a82 <__ledf2+0x96>
 8001a2a:	9901      	ldr	r1, [sp, #4]
 8001a2c:	430c      	orrs	r4, r1
 8001a2e:	4651      	mov	r1, sl
 8001a30:	2900      	cmp	r1, #0
 8001a32:	d137      	bne.n	8001aa4 <__ledf2+0xb8>
 8001a34:	4332      	orrs	r2, r6
 8001a36:	d038      	beq.n	8001aaa <__ledf2+0xbe>
 8001a38:	2c00      	cmp	r4, #0
 8001a3a:	d144      	bne.n	8001ac6 <__ledf2+0xda>
 8001a3c:	2800      	cmp	r0, #0
 8001a3e:	d119      	bne.n	8001a74 <__ledf2+0x88>
 8001a40:	2001      	movs	r0, #1
 8001a42:	4240      	negs	r0, r0
 8001a44:	e016      	b.n	8001a74 <__ledf2+0x88>
 8001a46:	4316      	orrs	r6, r2
 8001a48:	d113      	bne.n	8001a72 <__ledf2+0x86>
 8001a4a:	2900      	cmp	r1, #0
 8001a4c:	d102      	bne.n	8001a54 <__ledf2+0x68>
 8001a4e:	9f01      	ldr	r7, [sp, #4]
 8001a50:	4327      	orrs	r7, r4
 8001a52:	d0f3      	beq.n	8001a3c <__ledf2+0x50>
 8001a54:	4584      	cmp	ip, r0
 8001a56:	d020      	beq.n	8001a9a <__ledf2+0xae>
 8001a58:	4663      	mov	r3, ip
 8001a5a:	2002      	movs	r0, #2
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	4018      	ands	r0, r3
 8001a60:	3801      	subs	r0, #1
 8001a62:	e007      	b.n	8001a74 <__ledf2+0x88>
 8001a64:	9f01      	ldr	r7, [sp, #4]
 8001a66:	4327      	orrs	r7, r4
 8001a68:	d103      	bne.n	8001a72 <__ledf2+0x86>
 8001a6a:	458a      	cmp	sl, r1
 8001a6c:	d1f4      	bne.n	8001a58 <__ledf2+0x6c>
 8001a6e:	4316      	orrs	r6, r2
 8001a70:	d01f      	beq.n	8001ab2 <__ledf2+0xc6>
 8001a72:	2002      	movs	r0, #2
 8001a74:	b003      	add	sp, #12
 8001a76:	bcf0      	pop	{r4, r5, r6, r7}
 8001a78:	46bb      	mov	fp, r7
 8001a7a:	46b2      	mov	sl, r6
 8001a7c:	46a9      	mov	r9, r5
 8001a7e:	46a0      	mov	r8, r4
 8001a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a82:	4654      	mov	r4, sl
 8001a84:	2c00      	cmp	r4, #0
 8001a86:	d0e7      	beq.n	8001a58 <__ledf2+0x6c>
 8001a88:	4584      	cmp	ip, r0
 8001a8a:	d1e5      	bne.n	8001a58 <__ledf2+0x6c>
 8001a8c:	4551      	cmp	r1, sl
 8001a8e:	dce3      	bgt.n	8001a58 <__ledf2+0x6c>
 8001a90:	db03      	blt.n	8001a9a <__ledf2+0xae>
 8001a92:	9b01      	ldr	r3, [sp, #4]
 8001a94:	42b3      	cmp	r3, r6
 8001a96:	d8df      	bhi.n	8001a58 <__ledf2+0x6c>
 8001a98:	d00f      	beq.n	8001aba <__ledf2+0xce>
 8001a9a:	4663      	mov	r3, ip
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0cf      	beq.n	8001a40 <__ledf2+0x54>
 8001aa0:	4660      	mov	r0, ip
 8001aa2:	e7e7      	b.n	8001a74 <__ledf2+0x88>
 8001aa4:	2c00      	cmp	r4, #0
 8001aa6:	d0c9      	beq.n	8001a3c <__ledf2+0x50>
 8001aa8:	e7d4      	b.n	8001a54 <__ledf2+0x68>
 8001aaa:	2000      	movs	r0, #0
 8001aac:	2c00      	cmp	r4, #0
 8001aae:	d0e1      	beq.n	8001a74 <__ledf2+0x88>
 8001ab0:	e7d2      	b.n	8001a58 <__ledf2+0x6c>
 8001ab2:	4584      	cmp	ip, r0
 8001ab4:	d1d0      	bne.n	8001a58 <__ledf2+0x6c>
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	e7dc      	b.n	8001a74 <__ledf2+0x88>
 8001aba:	45c8      	cmp	r8, r9
 8001abc:	d8cc      	bhi.n	8001a58 <__ledf2+0x6c>
 8001abe:	2000      	movs	r0, #0
 8001ac0:	45c8      	cmp	r8, r9
 8001ac2:	d2d7      	bcs.n	8001a74 <__ledf2+0x88>
 8001ac4:	e7e9      	b.n	8001a9a <__ledf2+0xae>
 8001ac6:	4584      	cmp	ip, r0
 8001ac8:	d0e3      	beq.n	8001a92 <__ledf2+0xa6>
 8001aca:	e7c5      	b.n	8001a58 <__ledf2+0x6c>
 8001acc:	000007ff 	.word	0x000007ff

08001ad0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ad0:	b590      	push	{r4, r7, lr}
 8001ad2:	b08b      	sub	sp, #44	@ 0x2c
 8001ad4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad6:	2414      	movs	r4, #20
 8001ad8:	193b      	adds	r3, r7, r4
 8001ada:	0018      	movs	r0, r3
 8001adc:	2314      	movs	r3, #20
 8001ade:	001a      	movs	r2, r3
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	f002 fde9 	bl	80046b8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ae6:	4b41      	ldr	r3, [pc, #260]	@ (8001bec <MX_GPIO_Init+0x11c>)
 8001ae8:	695a      	ldr	r2, [r3, #20]
 8001aea:	4b40      	ldr	r3, [pc, #256]	@ (8001bec <MX_GPIO_Init+0x11c>)
 8001aec:	2180      	movs	r1, #128	@ 0x80
 8001aee:	0309      	lsls	r1, r1, #12
 8001af0:	430a      	orrs	r2, r1
 8001af2:	615a      	str	r2, [r3, #20]
 8001af4:	4b3d      	ldr	r3, [pc, #244]	@ (8001bec <MX_GPIO_Init+0x11c>)
 8001af6:	695a      	ldr	r2, [r3, #20]
 8001af8:	2380      	movs	r3, #128	@ 0x80
 8001afa:	031b      	lsls	r3, r3, #12
 8001afc:	4013      	ands	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b02:	4b3a      	ldr	r3, [pc, #232]	@ (8001bec <MX_GPIO_Init+0x11c>)
 8001b04:	695a      	ldr	r2, [r3, #20]
 8001b06:	4b39      	ldr	r3, [pc, #228]	@ (8001bec <MX_GPIO_Init+0x11c>)
 8001b08:	2180      	movs	r1, #128	@ 0x80
 8001b0a:	03c9      	lsls	r1, r1, #15
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	615a      	str	r2, [r3, #20]
 8001b10:	4b36      	ldr	r3, [pc, #216]	@ (8001bec <MX_GPIO_Init+0x11c>)
 8001b12:	695a      	ldr	r2, [r3, #20]
 8001b14:	2380      	movs	r3, #128	@ 0x80
 8001b16:	03db      	lsls	r3, r3, #15
 8001b18:	4013      	ands	r3, r2
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1e:	4b33      	ldr	r3, [pc, #204]	@ (8001bec <MX_GPIO_Init+0x11c>)
 8001b20:	695a      	ldr	r2, [r3, #20]
 8001b22:	4b32      	ldr	r3, [pc, #200]	@ (8001bec <MX_GPIO_Init+0x11c>)
 8001b24:	2180      	movs	r1, #128	@ 0x80
 8001b26:	0289      	lsls	r1, r1, #10
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	615a      	str	r2, [r3, #20]
 8001b2c:	4b2f      	ldr	r3, [pc, #188]	@ (8001bec <MX_GPIO_Init+0x11c>)
 8001b2e:	695a      	ldr	r2, [r3, #20]
 8001b30:	2380      	movs	r3, #128	@ 0x80
 8001b32:	029b      	lsls	r3, r3, #10
 8001b34:	4013      	ands	r3, r2
 8001b36:	60bb      	str	r3, [r7, #8]
 8001b38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b3a:	4b2c      	ldr	r3, [pc, #176]	@ (8001bec <MX_GPIO_Init+0x11c>)
 8001b3c:	695a      	ldr	r2, [r3, #20]
 8001b3e:	4b2b      	ldr	r3, [pc, #172]	@ (8001bec <MX_GPIO_Init+0x11c>)
 8001b40:	2180      	movs	r1, #128	@ 0x80
 8001b42:	02c9      	lsls	r1, r1, #11
 8001b44:	430a      	orrs	r2, r1
 8001b46:	615a      	str	r2, [r3, #20]
 8001b48:	4b28      	ldr	r3, [pc, #160]	@ (8001bec <MX_GPIO_Init+0x11c>)
 8001b4a:	695a      	ldr	r2, [r3, #20]
 8001b4c:	2380      	movs	r3, #128	@ 0x80
 8001b4e:	02db      	lsls	r3, r3, #11
 8001b50:	4013      	ands	r3, r2
 8001b52:	607b      	str	r3, [r7, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b56:	2390      	movs	r3, #144	@ 0x90
 8001b58:	05db      	lsls	r3, r3, #23
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2120      	movs	r1, #32
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f000 fe60 	bl	8002824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001b64:	2380      	movs	r3, #128	@ 0x80
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	4821      	ldr	r0, [pc, #132]	@ (8001bf0 <MX_GPIO_Init+0x120>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	0019      	movs	r1, r3
 8001b6e:	f000 fe59 	bl	8002824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b72:	193b      	adds	r3, r7, r4
 8001b74:	2280      	movs	r2, #128	@ 0x80
 8001b76:	0192      	lsls	r2, r2, #6
 8001b78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b7a:	193b      	adds	r3, r7, r4
 8001b7c:	2284      	movs	r2, #132	@ 0x84
 8001b7e:	0392      	lsls	r2, r2, #14
 8001b80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	193b      	adds	r3, r7, r4
 8001b84:	2200      	movs	r2, #0
 8001b86:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b88:	193b      	adds	r3, r7, r4
 8001b8a:	4a1a      	ldr	r2, [pc, #104]	@ (8001bf4 <MX_GPIO_Init+0x124>)
 8001b8c:	0019      	movs	r1, r3
 8001b8e:	0010      	movs	r0, r2
 8001b90:	f000 fcd0 	bl	8002534 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001b94:	193b      	adds	r3, r7, r4
 8001b96:	2220      	movs	r2, #32
 8001b98:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9a:	193b      	adds	r3, r7, r4
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	193b      	adds	r3, r7, r4
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba6:	193b      	adds	r3, r7, r4
 8001ba8:	2200      	movs	r2, #0
 8001baa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001bac:	193a      	adds	r2, r7, r4
 8001bae:	2390      	movs	r3, #144	@ 0x90
 8001bb0:	05db      	lsls	r3, r3, #23
 8001bb2:	0011      	movs	r1, r2
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f000 fcbd 	bl	8002534 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bba:	0021      	movs	r1, r4
 8001bbc:	187b      	adds	r3, r7, r1
 8001bbe:	2280      	movs	r2, #128	@ 0x80
 8001bc0:	0052      	lsls	r2, r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc4:	187b      	adds	r3, r7, r1
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	187b      	adds	r3, r7, r1
 8001bcc:	2200      	movs	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd0:	187b      	adds	r3, r7, r1
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd6:	187b      	adds	r3, r7, r1
 8001bd8:	4a05      	ldr	r2, [pc, #20]	@ (8001bf0 <MX_GPIO_Init+0x120>)
 8001bda:	0019      	movs	r1, r3
 8001bdc:	0010      	movs	r0, r2
 8001bde:	f000 fca9 	bl	8002534 <HAL_GPIO_Init>

}
 8001be2:	46c0      	nop			@ (mov r8, r8)
 8001be4:	46bd      	mov	sp, r7
 8001be6:	b00b      	add	sp, #44	@ 0x2c
 8001be8:	bd90      	pop	{r4, r7, pc}
 8001bea:	46c0      	nop			@ (mov r8, r8)
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	48000400 	.word	0x48000400
 8001bf4:	48000800 	.word	0x48000800

08001bf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 8001bfc:	f000 fb5e 	bl	80022bc <HAL_Init>
  void SystemClock_Config(void);
  MX_GPIO_Init();
 8001c00:	f7ff ff66 	bl	8001ad0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001c04:	f000 fab4 	bl	8002170 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001c08:	f000 f8aa 	bl	8001d60 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001c0c:	f000 f99a 	bl	8001f44 <MX_TIM1_Init>

  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001c10:	4b28      	ldr	r3, [pc, #160]	@ (8001cb4 <main+0xbc>)
 8001c12:	2100      	movs	r1, #0
 8001c14:	0018      	movs	r0, r3
 8001c16:	f001 fb6b 	bl	80032f0 <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001c1a:	2380      	movs	r3, #128	@ 0x80
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	4826      	ldr	r0, [pc, #152]	@ (8001cb8 <main+0xc0>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	0019      	movs	r1, r3
 8001c24:	f000 fdfe 	bl	8002824 <HAL_GPIO_WritePin>

  /* Infinite loop */
  while (1)
  {
    /* USER CODE BEGIN WHILE */
    adc_value = Read_ADC_Value();
 8001c28:	f000 f856 	bl	8001cd8 <Read_ADC_Value>
 8001c2c:	0003      	movs	r3, r0
 8001c2e:	001a      	movs	r2, r3
 8001c30:	4b22      	ldr	r3, [pc, #136]	@ (8001cbc <main+0xc4>)
 8001c32:	801a      	strh	r2, [r3, #0]

    pot_voltage = (adc_value * ADC_REF_VOLTAGE) / ADC_MAX_VALUE;
 8001c34:	4b21      	ldr	r3, [pc, #132]	@ (8001cbc <main+0xc4>)
 8001c36:	881b      	ldrh	r3, [r3, #0]
 8001c38:	0018      	movs	r0, r3
 8001c3a:	f7ff fcc9 	bl	80015d0 <__aeabi_i2d>
 8001c3e:	4a20      	ldr	r2, [pc, #128]	@ (8001cc0 <main+0xc8>)
 8001c40:	4b20      	ldr	r3, [pc, #128]	@ (8001cc4 <main+0xcc>)
 8001c42:	f7fe fe25 	bl	8000890 <__aeabi_dmul>
 8001c46:	0002      	movs	r2, r0
 8001c48:	000b      	movs	r3, r1
 8001c4a:	0010      	movs	r0, r2
 8001c4c:	0019      	movs	r1, r3
 8001c4e:	2200      	movs	r2, #0
 8001c50:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc8 <main+0xd0>)
 8001c52:	f7fe fb03 	bl	800025c <__aeabi_ddiv>
 8001c56:	0002      	movs	r2, r0
 8001c58:	000b      	movs	r3, r1
 8001c5a:	0010      	movs	r0, r2
 8001c5c:	0019      	movs	r1, r3
 8001c5e:	f7ff fd2d 	bl	80016bc <__aeabi_d2f>
 8001c62:	1c02      	adds	r2, r0, #0
 8001c64:	4b19      	ldr	r3, [pc, #100]	@ (8001ccc <main+0xd4>)
 8001c66:	601a      	str	r2, [r3, #0]

    pwm_duty_cycle = (pot_voltage / POTENTIOMETER_MAX_VOLTAGE) * PWM_MAX_DUTY_CYCLE;
 8001c68:	4b18      	ldr	r3, [pc, #96]	@ (8001ccc <main+0xd4>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	1c18      	adds	r0, r3, #0
 8001c6e:	f7ff fcdd 	bl	800162c <__aeabi_f2d>
 8001c72:	4a13      	ldr	r2, [pc, #76]	@ (8001cc0 <main+0xc8>)
 8001c74:	4b13      	ldr	r3, [pc, #76]	@ (8001cc4 <main+0xcc>)
 8001c76:	f7fe faf1 	bl	800025c <__aeabi_ddiv>
 8001c7a:	0002      	movs	r2, r0
 8001c7c:	000b      	movs	r3, r1
 8001c7e:	0010      	movs	r0, r2
 8001c80:	0019      	movs	r1, r3
 8001c82:	2200      	movs	r2, #0
 8001c84:	4b12      	ldr	r3, [pc, #72]	@ (8001cd0 <main+0xd8>)
 8001c86:	f7fe fe03 	bl	8000890 <__aeabi_dmul>
 8001c8a:	0002      	movs	r2, r0
 8001c8c:	000b      	movs	r3, r1
 8001c8e:	0010      	movs	r0, r2
 8001c90:	0019      	movs	r1, r3
 8001c92:	f7fe fac5 	bl	8000220 <__aeabi_d2uiz>
 8001c96:	0003      	movs	r3, r0
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd4 <main+0xdc>)
 8001c9c:	801a      	strh	r2, [r3, #0]

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_duty_cycle);
 8001c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd4 <main+0xdc>)
 8001ca0:	881a      	ldrh	r2, [r3, #0]
 8001ca2:	4b04      	ldr	r3, [pc, #16]	@ (8001cb4 <main+0xbc>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	635a      	str	r2, [r3, #52]	@ 0x34

    HAL_Delay(10);
 8001ca8:	200a      	movs	r0, #10
 8001caa:	f000 fb6b 	bl	8002384 <HAL_Delay>
    adc_value = Read_ADC_Value();
 8001cae:	46c0      	nop			@ (mov r8, r8)
 8001cb0:	e7ba      	b.n	8001c28 <main+0x30>
 8001cb2:	46c0      	nop			@ (mov r8, r8)
 8001cb4:	20000094 	.word	0x20000094
 8001cb8:	48000400 	.word	0x48000400
 8001cbc:	20000028 	.word	0x20000028
 8001cc0:	66666666 	.word	0x66666666
 8001cc4:	400a6666 	.word	0x400a6666
 8001cc8:	408ff800 	.word	0x408ff800
 8001ccc:	2000002c 	.word	0x2000002c
 8001cd0:	408f4000 	.word	0x408f4000
 8001cd4:	2000002a 	.word	0x2000002a

08001cd8 <Read_ADC_Value>:
/**
  * @brief  Reads the ADC value via SPI from the MCP3004.
  * @retval uint16_t The ADC value (0–1023 for a 10-bit ADC).
  */
uint16_t Read_ADC_Value(void)
{
 8001cd8:	b590      	push	{r4, r7, lr}
 8001cda:	b087      	sub	sp, #28
 8001cdc:	af02      	add	r7, sp, #8
  uint8_t spi_tx[3] = {0x01, 0x80, 0x00};
 8001cde:	2408      	movs	r4, #8
 8001ce0:	193b      	adds	r3, r7, r4
 8001ce2:	4a19      	ldr	r2, [pc, #100]	@ (8001d48 <Read_ADC_Value+0x70>)
 8001ce4:	8811      	ldrh	r1, [r2, #0]
 8001ce6:	8019      	strh	r1, [r3, #0]
 8001ce8:	7892      	ldrb	r2, [r2, #2]
 8001cea:	709a      	strb	r2, [r3, #2]
  uint8_t spi_rx[3];

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001cec:	2380      	movs	r3, #128	@ 0x80
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	4816      	ldr	r0, [pc, #88]	@ (8001d4c <Read_ADC_Value+0x74>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	0019      	movs	r1, r3
 8001cf6:	f000 fd95 	bl	8002824 <HAL_GPIO_WritePin>

  HAL_SPI_TransmitReceive(&hspi1, spi_tx, spi_rx, 3, HAL_MAX_DELAY);
 8001cfa:	1d3a      	adds	r2, r7, #4
 8001cfc:	1939      	adds	r1, r7, r4
 8001cfe:	4814      	ldr	r0, [pc, #80]	@ (8001d50 <Read_ADC_Value+0x78>)
 8001d00:	2301      	movs	r3, #1
 8001d02:	425b      	negs	r3, r3
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	2303      	movs	r3, #3
 8001d08:	f000 ff02 	bl	8002b10 <HAL_SPI_TransmitReceive>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001d0c:	2380      	movs	r3, #128	@ 0x80
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	480e      	ldr	r0, [pc, #56]	@ (8001d4c <Read_ADC_Value+0x74>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	0019      	movs	r1, r3
 8001d16:	f000 fd85 	bl	8002824 <HAL_GPIO_WritePin>

  uint16_t adc_value = ((spi_rx[1] & 0x03) << 8) | spi_rx[2];
 8001d1a:	1d3b      	adds	r3, r7, #4
 8001d1c:	785b      	ldrb	r3, [r3, #1]
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	b21a      	sxth	r2, r3
 8001d22:	23c0      	movs	r3, #192	@ 0xc0
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4013      	ands	r3, r2
 8001d28:	b21a      	sxth	r2, r3
 8001d2a:	1d3b      	adds	r3, r7, #4
 8001d2c:	789b      	ldrb	r3, [r3, #2]
 8001d2e:	b21b      	sxth	r3, r3
 8001d30:	4313      	orrs	r3, r2
 8001d32:	b21a      	sxth	r2, r3
 8001d34:	210e      	movs	r1, #14
 8001d36:	187b      	adds	r3, r7, r1
 8001d38:	801a      	strh	r2, [r3, #0]
  return adc_value;
 8001d3a:	187b      	adds	r3, r7, r1
 8001d3c:	881b      	ldrh	r3, [r3, #0]
}
 8001d3e:	0018      	movs	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	b005      	add	sp, #20
 8001d44:	bd90      	pop	{r4, r7, pc}
 8001d46:	46c0      	nop			@ (mov r8, r8)
 8001d48:	08004728 	.word	0x08004728
 8001d4c:	48000400 	.word	0x48000400
 8001d50:	20000030 	.word	0x20000030

08001d54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d58:	b672      	cpsid	i
}
 8001d5a:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
 8001d5c:	46c0      	nop			@ (mov r8, r8)
 8001d5e:	e7fd      	b.n	8001d5c <Error_Handler+0x8>

08001d60 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001d64:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd4 <MX_SPI1_Init+0x74>)
 8001d66:	4a1c      	ldr	r2, [pc, #112]	@ (8001dd8 <MX_SPI1_Init+0x78>)
 8001d68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd4 <MX_SPI1_Init+0x74>)
 8001d6c:	2282      	movs	r2, #130	@ 0x82
 8001d6e:	0052      	lsls	r2, r2, #1
 8001d70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d72:	4b18      	ldr	r3, [pc, #96]	@ (8001dd4 <MX_SPI1_Init+0x74>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001d78:	4b16      	ldr	r3, [pc, #88]	@ (8001dd4 <MX_SPI1_Init+0x74>)
 8001d7a:	22c0      	movs	r2, #192	@ 0xc0
 8001d7c:	0092      	lsls	r2, r2, #2
 8001d7e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d80:	4b14      	ldr	r3, [pc, #80]	@ (8001dd4 <MX_SPI1_Init+0x74>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d86:	4b13      	ldr	r3, [pc, #76]	@ (8001dd4 <MX_SPI1_Init+0x74>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d8c:	4b11      	ldr	r3, [pc, #68]	@ (8001dd4 <MX_SPI1_Init+0x74>)
 8001d8e:	2280      	movs	r2, #128	@ 0x80
 8001d90:	0092      	lsls	r2, r2, #2
 8001d92:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001d94:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd4 <MX_SPI1_Init+0x74>)
 8001d96:	2218      	movs	r2, #24
 8001d98:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd4 <MX_SPI1_Init+0x74>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001da0:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd4 <MX_SPI1_Init+0x74>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001da6:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd4 <MX_SPI1_Init+0x74>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001dac:	4b09      	ldr	r3, [pc, #36]	@ (8001dd4 <MX_SPI1_Init+0x74>)
 8001dae:	2207      	movs	r2, #7
 8001db0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001db2:	4b08      	ldr	r3, [pc, #32]	@ (8001dd4 <MX_SPI1_Init+0x74>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001db8:	4b06      	ldr	r3, [pc, #24]	@ (8001dd4 <MX_SPI1_Init+0x74>)
 8001dba:	2208      	movs	r2, #8
 8001dbc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001dbe:	4b05      	ldr	r3, [pc, #20]	@ (8001dd4 <MX_SPI1_Init+0x74>)
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	f000 fded 	bl	80029a0 <HAL_SPI_Init>
 8001dc6:	1e03      	subs	r3, r0, #0
 8001dc8:	d001      	beq.n	8001dce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001dca:	f7ff ffc3 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001dce:	46c0      	nop			@ (mov r8, r8)
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20000030 	.word	0x20000030
 8001dd8:	40013000 	.word	0x40013000

08001ddc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ddc:	b590      	push	{r4, r7, lr}
 8001dde:	b08b      	sub	sp, #44	@ 0x2c
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	2414      	movs	r4, #20
 8001de6:	193b      	adds	r3, r7, r4
 8001de8:	0018      	movs	r0, r3
 8001dea:	2314      	movs	r3, #20
 8001dec:	001a      	movs	r2, r3
 8001dee:	2100      	movs	r1, #0
 8001df0:	f002 fc62 	bl	80046b8 <memset>
  if(spiHandle->Instance==SPI1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a2e      	ldr	r2, [pc, #184]	@ (8001eb4 <HAL_SPI_MspInit+0xd8>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d155      	bne.n	8001eaa <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dfe:	4b2e      	ldr	r3, [pc, #184]	@ (8001eb8 <HAL_SPI_MspInit+0xdc>)
 8001e00:	699a      	ldr	r2, [r3, #24]
 8001e02:	4b2d      	ldr	r3, [pc, #180]	@ (8001eb8 <HAL_SPI_MspInit+0xdc>)
 8001e04:	2180      	movs	r1, #128	@ 0x80
 8001e06:	0149      	lsls	r1, r1, #5
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	619a      	str	r2, [r3, #24]
 8001e0c:	4b2a      	ldr	r3, [pc, #168]	@ (8001eb8 <HAL_SPI_MspInit+0xdc>)
 8001e0e:	699a      	ldr	r2, [r3, #24]
 8001e10:	2380      	movs	r3, #128	@ 0x80
 8001e12:	015b      	lsls	r3, r3, #5
 8001e14:	4013      	ands	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1a:	4b27      	ldr	r3, [pc, #156]	@ (8001eb8 <HAL_SPI_MspInit+0xdc>)
 8001e1c:	695a      	ldr	r2, [r3, #20]
 8001e1e:	4b26      	ldr	r3, [pc, #152]	@ (8001eb8 <HAL_SPI_MspInit+0xdc>)
 8001e20:	2180      	movs	r1, #128	@ 0x80
 8001e22:	0289      	lsls	r1, r1, #10
 8001e24:	430a      	orrs	r2, r1
 8001e26:	615a      	str	r2, [r3, #20]
 8001e28:	4b23      	ldr	r3, [pc, #140]	@ (8001eb8 <HAL_SPI_MspInit+0xdc>)
 8001e2a:	695a      	ldr	r2, [r3, #20]
 8001e2c:	2380      	movs	r3, #128	@ 0x80
 8001e2e:	029b      	lsls	r3, r3, #10
 8001e30:	4013      	ands	r3, r2
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e36:	4b20      	ldr	r3, [pc, #128]	@ (8001eb8 <HAL_SPI_MspInit+0xdc>)
 8001e38:	695a      	ldr	r2, [r3, #20]
 8001e3a:	4b1f      	ldr	r3, [pc, #124]	@ (8001eb8 <HAL_SPI_MspInit+0xdc>)
 8001e3c:	2180      	movs	r1, #128	@ 0x80
 8001e3e:	02c9      	lsls	r1, r1, #11
 8001e40:	430a      	orrs	r2, r1
 8001e42:	615a      	str	r2, [r3, #20]
 8001e44:	4b1c      	ldr	r3, [pc, #112]	@ (8001eb8 <HAL_SPI_MspInit+0xdc>)
 8001e46:	695a      	ldr	r2, [r3, #20]
 8001e48:	2380      	movs	r3, #128	@ 0x80
 8001e4a:	02db      	lsls	r3, r3, #11
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e52:	193b      	adds	r3, r7, r4
 8001e54:	22c0      	movs	r2, #192	@ 0xc0
 8001e56:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e58:	193b      	adds	r3, r7, r4
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	193b      	adds	r3, r7, r4
 8001e60:	2200      	movs	r2, #0
 8001e62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e64:	193b      	adds	r3, r7, r4
 8001e66:	2203      	movs	r2, #3
 8001e68:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001e6a:	193b      	adds	r3, r7, r4
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e70:	193a      	adds	r2, r7, r4
 8001e72:	2390      	movs	r3, #144	@ 0x90
 8001e74:	05db      	lsls	r3, r3, #23
 8001e76:	0011      	movs	r1, r2
 8001e78:	0018      	movs	r0, r3
 8001e7a:	f000 fb5b 	bl	8002534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e7e:	0021      	movs	r1, r4
 8001e80:	187b      	adds	r3, r7, r1
 8001e82:	2208      	movs	r2, #8
 8001e84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e86:	187b      	adds	r3, r7, r1
 8001e88:	2202      	movs	r2, #2
 8001e8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	187b      	adds	r3, r7, r1
 8001e8e:	2200      	movs	r2, #0
 8001e90:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e92:	187b      	adds	r3, r7, r1
 8001e94:	2203      	movs	r2, #3
 8001e96:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001e98:	187b      	adds	r3, r7, r1
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9e:	187b      	adds	r3, r7, r1
 8001ea0:	4a06      	ldr	r2, [pc, #24]	@ (8001ebc <HAL_SPI_MspInit+0xe0>)
 8001ea2:	0019      	movs	r1, r3
 8001ea4:	0010      	movs	r0, r2
 8001ea6:	f000 fb45 	bl	8002534 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001eaa:	46c0      	nop			@ (mov r8, r8)
 8001eac:	46bd      	mov	sp, r7
 8001eae:	b00b      	add	sp, #44	@ 0x2c
 8001eb0:	bd90      	pop	{r4, r7, pc}
 8001eb2:	46c0      	nop			@ (mov r8, r8)
 8001eb4:	40013000 	.word	0x40013000
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	48000400 	.word	0x48000400

08001ec0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8001f04 <HAL_MspInit+0x44>)
 8001ec8:	699a      	ldr	r2, [r3, #24]
 8001eca:	4b0e      	ldr	r3, [pc, #56]	@ (8001f04 <HAL_MspInit+0x44>)
 8001ecc:	2101      	movs	r1, #1
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	619a      	str	r2, [r3, #24]
 8001ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8001f04 <HAL_MspInit+0x44>)
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	4013      	ands	r3, r2
 8001eda:	607b      	str	r3, [r7, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ede:	4b09      	ldr	r3, [pc, #36]	@ (8001f04 <HAL_MspInit+0x44>)
 8001ee0:	69da      	ldr	r2, [r3, #28]
 8001ee2:	4b08      	ldr	r3, [pc, #32]	@ (8001f04 <HAL_MspInit+0x44>)
 8001ee4:	2180      	movs	r1, #128	@ 0x80
 8001ee6:	0549      	lsls	r1, r1, #21
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	61da      	str	r2, [r3, #28]
 8001eec:	4b05      	ldr	r3, [pc, #20]	@ (8001f04 <HAL_MspInit+0x44>)
 8001eee:	69da      	ldr	r2, [r3, #28]
 8001ef0:	2380      	movs	r3, #128	@ 0x80
 8001ef2:	055b      	lsls	r3, r3, #21
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	603b      	str	r3, [r7, #0]
 8001ef8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001efa:	46c0      	nop			@ (mov r8, r8)
 8001efc:	46bd      	mov	sp, r7
 8001efe:	b002      	add	sp, #8
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	46c0      	nop			@ (mov r8, r8)
 8001f04:	40021000 	.word	0x40021000

08001f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f0c:	46c0      	nop			@ (mov r8, r8)
 8001f0e:	e7fd      	b.n	8001f0c <NMI_Handler+0x4>

08001f10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f14:	46c0      	nop			@ (mov r8, r8)
 8001f16:	e7fd      	b.n	8001f14 <HardFault_Handler+0x4>

08001f18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001f1c:	46c0      	nop			@ (mov r8, r8)
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f26:	46c0      	nop			@ (mov r8, r8)
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f30:	f000 fa0c 	bl	800234c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f34:	46c0      	nop			@ (mov r8, r8)
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001f3e:	46c0      	nop			@ (mov r8, r8)
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b096      	sub	sp, #88	@ 0x58
 8001f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f4a:	2348      	movs	r3, #72	@ 0x48
 8001f4c:	18fb      	adds	r3, r7, r3
 8001f4e:	0018      	movs	r0, r3
 8001f50:	2310      	movs	r3, #16
 8001f52:	001a      	movs	r2, r3
 8001f54:	2100      	movs	r1, #0
 8001f56:	f002 fbaf 	bl	80046b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f5a:	2340      	movs	r3, #64	@ 0x40
 8001f5c:	18fb      	adds	r3, r7, r3
 8001f5e:	0018      	movs	r0, r3
 8001f60:	2308      	movs	r3, #8
 8001f62:	001a      	movs	r2, r3
 8001f64:	2100      	movs	r1, #0
 8001f66:	f002 fba7 	bl	80046b8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f6a:	2324      	movs	r3, #36	@ 0x24
 8001f6c:	18fb      	adds	r3, r7, r3
 8001f6e:	0018      	movs	r0, r3
 8001f70:	231c      	movs	r3, #28
 8001f72:	001a      	movs	r2, r3
 8001f74:	2100      	movs	r1, #0
 8001f76:	f002 fb9f 	bl	80046b8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f7a:	1d3b      	adds	r3, r7, #4
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	2320      	movs	r3, #32
 8001f80:	001a      	movs	r2, r3
 8001f82:	2100      	movs	r1, #0
 8001f84:	f002 fb98 	bl	80046b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f88:	4b46      	ldr	r3, [pc, #280]	@ (80020a4 <MX_TIM1_Init+0x160>)
 8001f8a:	4a47      	ldr	r2, [pc, #284]	@ (80020a8 <MX_TIM1_Init+0x164>)
 8001f8c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f8e:	4b45      	ldr	r3, [pc, #276]	@ (80020a4 <MX_TIM1_Init+0x160>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f94:	4b43      	ldr	r3, [pc, #268]	@ (80020a4 <MX_TIM1_Init+0x160>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001f9a:	4b42      	ldr	r3, [pc, #264]	@ (80020a4 <MX_TIM1_Init+0x160>)
 8001f9c:	4a43      	ldr	r2, [pc, #268]	@ (80020ac <MX_TIM1_Init+0x168>)
 8001f9e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fa0:	4b40      	ldr	r3, [pc, #256]	@ (80020a4 <MX_TIM1_Init+0x160>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fa6:	4b3f      	ldr	r3, [pc, #252]	@ (80020a4 <MX_TIM1_Init+0x160>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fac:	4b3d      	ldr	r3, [pc, #244]	@ (80020a4 <MX_TIM1_Init+0x160>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001fb2:	4b3c      	ldr	r3, [pc, #240]	@ (80020a4 <MX_TIM1_Init+0x160>)
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	f001 f8f3 	bl	80031a0 <HAL_TIM_Base_Init>
 8001fba:	1e03      	subs	r3, r0, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001fbe:	f7ff fec9 	bl	8001d54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fc2:	2148      	movs	r1, #72	@ 0x48
 8001fc4:	187b      	adds	r3, r7, r1
 8001fc6:	2280      	movs	r2, #128	@ 0x80
 8001fc8:	0152      	lsls	r2, r2, #5
 8001fca:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001fcc:	187a      	adds	r2, r7, r1
 8001fce:	4b35      	ldr	r3, [pc, #212]	@ (80020a4 <MX_TIM1_Init+0x160>)
 8001fd0:	0011      	movs	r1, r2
 8001fd2:	0018      	movs	r0, r3
 8001fd4:	f001 fb0a 	bl	80035ec <HAL_TIM_ConfigClockSource>
 8001fd8:	1e03      	subs	r3, r0, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001fdc:	f7ff feba 	bl	8001d54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001fe0:	4b30      	ldr	r3, [pc, #192]	@ (80020a4 <MX_TIM1_Init+0x160>)
 8001fe2:	0018      	movs	r0, r3
 8001fe4:	f001 f92c 	bl	8003240 <HAL_TIM_PWM_Init>
 8001fe8:	1e03      	subs	r3, r0, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8001fec:	f7ff feb2 	bl	8001d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ff0:	2140      	movs	r1, #64	@ 0x40
 8001ff2:	187b      	adds	r3, r7, r1
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ff8:	187b      	adds	r3, r7, r1
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ffe:	187a      	adds	r2, r7, r1
 8002000:	4b28      	ldr	r3, [pc, #160]	@ (80020a4 <MX_TIM1_Init+0x160>)
 8002002:	0011      	movs	r1, r2
 8002004:	0018      	movs	r0, r3
 8002006:	f001 feff 	bl	8003e08 <HAL_TIMEx_MasterConfigSynchronization>
 800200a:	1e03      	subs	r3, r0, #0
 800200c:	d001      	beq.n	8002012 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 800200e:	f7ff fea1 	bl	8001d54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002012:	2124      	movs	r1, #36	@ 0x24
 8002014:	187b      	adds	r3, r7, r1
 8002016:	2260      	movs	r2, #96	@ 0x60
 8002018:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800201a:	187b      	adds	r3, r7, r1
 800201c:	2200      	movs	r2, #0
 800201e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002020:	187b      	adds	r3, r7, r1
 8002022:	2200      	movs	r2, #0
 8002024:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002026:	187b      	adds	r3, r7, r1
 8002028:	2200      	movs	r2, #0
 800202a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800202c:	187b      	adds	r3, r7, r1
 800202e:	2200      	movs	r2, #0
 8002030:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002032:	187b      	adds	r3, r7, r1
 8002034:	2200      	movs	r2, #0
 8002036:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002038:	187b      	adds	r3, r7, r1
 800203a:	2200      	movs	r2, #0
 800203c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800203e:	1879      	adds	r1, r7, r1
 8002040:	4b18      	ldr	r3, [pc, #96]	@ (80020a4 <MX_TIM1_Init+0x160>)
 8002042:	2200      	movs	r2, #0
 8002044:	0018      	movs	r0, r3
 8002046:	f001 fa0b 	bl	8003460 <HAL_TIM_PWM_ConfigChannel>
 800204a:	1e03      	subs	r3, r0, #0
 800204c:	d001      	beq.n	8002052 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800204e:	f7ff fe81 	bl	8001d54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002052:	1d3b      	adds	r3, r7, #4
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002058:	1d3b      	adds	r3, r7, #4
 800205a:	2200      	movs	r2, #0
 800205c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800205e:	1d3b      	adds	r3, r7, #4
 8002060:	2200      	movs	r2, #0
 8002062:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002064:	1d3b      	adds	r3, r7, #4
 8002066:	2200      	movs	r2, #0
 8002068:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800206a:	1d3b      	adds	r3, r7, #4
 800206c:	2200      	movs	r2, #0
 800206e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002070:	1d3b      	adds	r3, r7, #4
 8002072:	2280      	movs	r2, #128	@ 0x80
 8002074:	0192      	lsls	r2, r2, #6
 8002076:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002078:	1d3b      	adds	r3, r7, #4
 800207a:	2200      	movs	r2, #0
 800207c:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800207e:	1d3a      	adds	r2, r7, #4
 8002080:	4b08      	ldr	r3, [pc, #32]	@ (80020a4 <MX_TIM1_Init+0x160>)
 8002082:	0011      	movs	r1, r2
 8002084:	0018      	movs	r0, r3
 8002086:	f001 ff1d 	bl	8003ec4 <HAL_TIMEx_ConfigBreakDeadTime>
 800208a:	1e03      	subs	r3, r0, #0
 800208c:	d001      	beq.n	8002092 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 800208e:	f7ff fe61 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002092:	4b04      	ldr	r3, [pc, #16]	@ (80020a4 <MX_TIM1_Init+0x160>)
 8002094:	0018      	movs	r0, r3
 8002096:	f000 f82b 	bl	80020f0 <HAL_TIM_MspPostInit>

}
 800209a:	46c0      	nop			@ (mov r8, r8)
 800209c:	46bd      	mov	sp, r7
 800209e:	b016      	add	sp, #88	@ 0x58
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	46c0      	nop			@ (mov r8, r8)
 80020a4:	20000094 	.word	0x20000094
 80020a8:	40012c00 	.word	0x40012c00
 80020ac:	0000ffff 	.word	0x0000ffff

080020b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a0a      	ldr	r2, [pc, #40]	@ (80020e8 <HAL_TIM_Base_MspInit+0x38>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d10d      	bne.n	80020de <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020c2:	4b0a      	ldr	r3, [pc, #40]	@ (80020ec <HAL_TIM_Base_MspInit+0x3c>)
 80020c4:	699a      	ldr	r2, [r3, #24]
 80020c6:	4b09      	ldr	r3, [pc, #36]	@ (80020ec <HAL_TIM_Base_MspInit+0x3c>)
 80020c8:	2180      	movs	r1, #128	@ 0x80
 80020ca:	0109      	lsls	r1, r1, #4
 80020cc:	430a      	orrs	r2, r1
 80020ce:	619a      	str	r2, [r3, #24]
 80020d0:	4b06      	ldr	r3, [pc, #24]	@ (80020ec <HAL_TIM_Base_MspInit+0x3c>)
 80020d2:	699a      	ldr	r2, [r3, #24]
 80020d4:	2380      	movs	r3, #128	@ 0x80
 80020d6:	011b      	lsls	r3, r3, #4
 80020d8:	4013      	ands	r3, r2
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80020de:	46c0      	nop			@ (mov r8, r8)
 80020e0:	46bd      	mov	sp, r7
 80020e2:	b004      	add	sp, #16
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	46c0      	nop			@ (mov r8, r8)
 80020e8:	40012c00 	.word	0x40012c00
 80020ec:	40021000 	.word	0x40021000

080020f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80020f0:	b590      	push	{r4, r7, lr}
 80020f2:	b089      	sub	sp, #36	@ 0x24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f8:	240c      	movs	r4, #12
 80020fa:	193b      	adds	r3, r7, r4
 80020fc:	0018      	movs	r0, r3
 80020fe:	2314      	movs	r3, #20
 8002100:	001a      	movs	r2, r3
 8002102:	2100      	movs	r1, #0
 8002104:	f002 fad8 	bl	80046b8 <memset>
  if(timHandle->Instance==TIM1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a16      	ldr	r2, [pc, #88]	@ (8002168 <HAL_TIM_MspPostInit+0x78>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d125      	bne.n	800215e <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002112:	4b16      	ldr	r3, [pc, #88]	@ (800216c <HAL_TIM_MspPostInit+0x7c>)
 8002114:	695a      	ldr	r2, [r3, #20]
 8002116:	4b15      	ldr	r3, [pc, #84]	@ (800216c <HAL_TIM_MspPostInit+0x7c>)
 8002118:	2180      	movs	r1, #128	@ 0x80
 800211a:	0289      	lsls	r1, r1, #10
 800211c:	430a      	orrs	r2, r1
 800211e:	615a      	str	r2, [r3, #20]
 8002120:	4b12      	ldr	r3, [pc, #72]	@ (800216c <HAL_TIM_MspPostInit+0x7c>)
 8002122:	695a      	ldr	r2, [r3, #20]
 8002124:	2380      	movs	r3, #128	@ 0x80
 8002126:	029b      	lsls	r3, r3, #10
 8002128:	4013      	ands	r3, r2
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800212e:	193b      	adds	r3, r7, r4
 8002130:	2280      	movs	r2, #128	@ 0x80
 8002132:	0052      	lsls	r2, r2, #1
 8002134:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002136:	0021      	movs	r1, r4
 8002138:	187b      	adds	r3, r7, r1
 800213a:	2202      	movs	r2, #2
 800213c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	187b      	adds	r3, r7, r1
 8002140:	2200      	movs	r2, #0
 8002142:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002144:	187b      	adds	r3, r7, r1
 8002146:	2200      	movs	r2, #0
 8002148:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800214a:	187b      	adds	r3, r7, r1
 800214c:	2202      	movs	r2, #2
 800214e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002150:	187a      	adds	r2, r7, r1
 8002152:	2390      	movs	r3, #144	@ 0x90
 8002154:	05db      	lsls	r3, r3, #23
 8002156:	0011      	movs	r1, r2
 8002158:	0018      	movs	r0, r3
 800215a:	f000 f9eb 	bl	8002534 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800215e:	46c0      	nop			@ (mov r8, r8)
 8002160:	46bd      	mov	sp, r7
 8002162:	b009      	add	sp, #36	@ 0x24
 8002164:	bd90      	pop	{r4, r7, pc}
 8002166:	46c0      	nop			@ (mov r8, r8)
 8002168:	40012c00 	.word	0x40012c00
 800216c:	40021000 	.word	0x40021000

08002170 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002174:	4b14      	ldr	r3, [pc, #80]	@ (80021c8 <MX_USART2_UART_Init+0x58>)
 8002176:	4a15      	ldr	r2, [pc, #84]	@ (80021cc <MX_USART2_UART_Init+0x5c>)
 8002178:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800217a:	4b13      	ldr	r3, [pc, #76]	@ (80021c8 <MX_USART2_UART_Init+0x58>)
 800217c:	2296      	movs	r2, #150	@ 0x96
 800217e:	0212      	lsls	r2, r2, #8
 8002180:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002182:	4b11      	ldr	r3, [pc, #68]	@ (80021c8 <MX_USART2_UART_Init+0x58>)
 8002184:	2200      	movs	r2, #0
 8002186:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002188:	4b0f      	ldr	r3, [pc, #60]	@ (80021c8 <MX_USART2_UART_Init+0x58>)
 800218a:	2200      	movs	r2, #0
 800218c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800218e:	4b0e      	ldr	r3, [pc, #56]	@ (80021c8 <MX_USART2_UART_Init+0x58>)
 8002190:	2200      	movs	r2, #0
 8002192:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002194:	4b0c      	ldr	r3, [pc, #48]	@ (80021c8 <MX_USART2_UART_Init+0x58>)
 8002196:	220c      	movs	r2, #12
 8002198:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800219a:	4b0b      	ldr	r3, [pc, #44]	@ (80021c8 <MX_USART2_UART_Init+0x58>)
 800219c:	2200      	movs	r2, #0
 800219e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021a0:	4b09      	ldr	r3, [pc, #36]	@ (80021c8 <MX_USART2_UART_Init+0x58>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021a6:	4b08      	ldr	r3, [pc, #32]	@ (80021c8 <MX_USART2_UART_Init+0x58>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021ac:	4b06      	ldr	r3, [pc, #24]	@ (80021c8 <MX_USART2_UART_Init+0x58>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021b2:	4b05      	ldr	r3, [pc, #20]	@ (80021c8 <MX_USART2_UART_Init+0x58>)
 80021b4:	0018      	movs	r0, r3
 80021b6:	f001 fee3 	bl	8003f80 <HAL_UART_Init>
 80021ba:	1e03      	subs	r3, r0, #0
 80021bc:	d001      	beq.n	80021c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80021be:	f7ff fdc9 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021c2:	46c0      	nop			@ (mov r8, r8)
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	200000dc 	.word	0x200000dc
 80021cc:	40004400 	.word	0x40004400

080021d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021d0:	b590      	push	{r4, r7, lr}
 80021d2:	b08b      	sub	sp, #44	@ 0x2c
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d8:	2414      	movs	r4, #20
 80021da:	193b      	adds	r3, r7, r4
 80021dc:	0018      	movs	r0, r3
 80021de:	2314      	movs	r3, #20
 80021e0:	001a      	movs	r2, r3
 80021e2:	2100      	movs	r1, #0
 80021e4:	f002 fa68 	bl	80046b8 <memset>
  if(uartHandle->Instance==USART2)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a1c      	ldr	r2, [pc, #112]	@ (8002260 <HAL_UART_MspInit+0x90>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d132      	bne.n	8002258 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002264 <HAL_UART_MspInit+0x94>)
 80021f4:	69da      	ldr	r2, [r3, #28]
 80021f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002264 <HAL_UART_MspInit+0x94>)
 80021f8:	2180      	movs	r1, #128	@ 0x80
 80021fa:	0289      	lsls	r1, r1, #10
 80021fc:	430a      	orrs	r2, r1
 80021fe:	61da      	str	r2, [r3, #28]
 8002200:	4b18      	ldr	r3, [pc, #96]	@ (8002264 <HAL_UART_MspInit+0x94>)
 8002202:	69da      	ldr	r2, [r3, #28]
 8002204:	2380      	movs	r3, #128	@ 0x80
 8002206:	029b      	lsls	r3, r3, #10
 8002208:	4013      	ands	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
 800220c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800220e:	4b15      	ldr	r3, [pc, #84]	@ (8002264 <HAL_UART_MspInit+0x94>)
 8002210:	695a      	ldr	r2, [r3, #20]
 8002212:	4b14      	ldr	r3, [pc, #80]	@ (8002264 <HAL_UART_MspInit+0x94>)
 8002214:	2180      	movs	r1, #128	@ 0x80
 8002216:	0289      	lsls	r1, r1, #10
 8002218:	430a      	orrs	r2, r1
 800221a:	615a      	str	r2, [r3, #20]
 800221c:	4b11      	ldr	r3, [pc, #68]	@ (8002264 <HAL_UART_MspInit+0x94>)
 800221e:	695a      	ldr	r2, [r3, #20]
 8002220:	2380      	movs	r3, #128	@ 0x80
 8002222:	029b      	lsls	r3, r3, #10
 8002224:	4013      	ands	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800222a:	0021      	movs	r1, r4
 800222c:	187b      	adds	r3, r7, r1
 800222e:	220c      	movs	r2, #12
 8002230:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002232:	187b      	adds	r3, r7, r1
 8002234:	2202      	movs	r2, #2
 8002236:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	187b      	adds	r3, r7, r1
 800223a:	2200      	movs	r2, #0
 800223c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223e:	187b      	adds	r3, r7, r1
 8002240:	2200      	movs	r2, #0
 8002242:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002244:	187b      	adds	r3, r7, r1
 8002246:	2201      	movs	r2, #1
 8002248:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224a:	187a      	adds	r2, r7, r1
 800224c:	2390      	movs	r3, #144	@ 0x90
 800224e:	05db      	lsls	r3, r3, #23
 8002250:	0011      	movs	r1, r2
 8002252:	0018      	movs	r0, r3
 8002254:	f000 f96e 	bl	8002534 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002258:	46c0      	nop			@ (mov r8, r8)
 800225a:	46bd      	mov	sp, r7
 800225c:	b00b      	add	sp, #44	@ 0x2c
 800225e:	bd90      	pop	{r4, r7, pc}
 8002260:	40004400 	.word	0x40004400
 8002264:	40021000 	.word	0x40021000

08002268 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002268:	480d      	ldr	r0, [pc, #52]	@ (80022a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800226a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800226c:	480d      	ldr	r0, [pc, #52]	@ (80022a4 <LoopForever+0x6>)
  ldr r1, =_edata
 800226e:	490e      	ldr	r1, [pc, #56]	@ (80022a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002270:	4a0e      	ldr	r2, [pc, #56]	@ (80022ac <LoopForever+0xe>)
  movs r3, #0
 8002272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002274:	e002      	b.n	800227c <LoopCopyDataInit>

08002276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800227a:	3304      	adds	r3, #4

0800227c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800227c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800227e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002280:	d3f9      	bcc.n	8002276 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002282:	4a0b      	ldr	r2, [pc, #44]	@ (80022b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002284:	4c0b      	ldr	r4, [pc, #44]	@ (80022b4 <LoopForever+0x16>)
  movs r3, #0
 8002286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002288:	e001      	b.n	800228e <LoopFillZerobss>

0800228a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800228a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800228c:	3204      	adds	r2, #4

0800228e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800228e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002290:	d3fb      	bcc.n	800228a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002292:	f7ff fe52 	bl	8001f3a <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002296:	f002 fa17 	bl	80046c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800229a:	f7ff fcad 	bl	8001bf8 <main>

0800229e <LoopForever>:

LoopForever:
    b LoopForever
 800229e:	e7fe      	b.n	800229e <LoopForever>
  ldr   r0, =_estack
 80022a0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80022a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80022ac:	0800479c 	.word	0x0800479c
  ldr r2, =_sbss
 80022b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80022b4:	20000164 	.word	0x20000164

080022b8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022b8:	e7fe      	b.n	80022b8 <ADC1_COMP_IRQHandler>
	...

080022bc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022c0:	4b07      	ldr	r3, [pc, #28]	@ (80022e0 <HAL_Init+0x24>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4b06      	ldr	r3, [pc, #24]	@ (80022e0 <HAL_Init+0x24>)
 80022c6:	2110      	movs	r1, #16
 80022c8:	430a      	orrs	r2, r1
 80022ca:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80022cc:	2000      	movs	r0, #0
 80022ce:	f000 f809 	bl	80022e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022d2:	f7ff fdf5 	bl	8001ec0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	0018      	movs	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	46c0      	nop			@ (mov r8, r8)
 80022e0:	40022000 	.word	0x40022000

080022e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022e4:	b590      	push	{r4, r7, lr}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022ec:	4b14      	ldr	r3, [pc, #80]	@ (8002340 <HAL_InitTick+0x5c>)
 80022ee:	681c      	ldr	r4, [r3, #0]
 80022f0:	4b14      	ldr	r3, [pc, #80]	@ (8002344 <HAL_InitTick+0x60>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	0019      	movs	r1, r3
 80022f6:	23fa      	movs	r3, #250	@ 0xfa
 80022f8:	0098      	lsls	r0, r3, #2
 80022fa:	f7fd ff05 	bl	8000108 <__udivsi3>
 80022fe:	0003      	movs	r3, r0
 8002300:	0019      	movs	r1, r3
 8002302:	0020      	movs	r0, r4
 8002304:	f7fd ff00 	bl	8000108 <__udivsi3>
 8002308:	0003      	movs	r3, r0
 800230a:	0018      	movs	r0, r3
 800230c:	f000 f905 	bl	800251a <HAL_SYSTICK_Config>
 8002310:	1e03      	subs	r3, r0, #0
 8002312:	d001      	beq.n	8002318 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e00f      	b.n	8002338 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b03      	cmp	r3, #3
 800231c:	d80b      	bhi.n	8002336 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	2301      	movs	r3, #1
 8002322:	425b      	negs	r3, r3
 8002324:	2200      	movs	r2, #0
 8002326:	0018      	movs	r0, r3
 8002328:	f000 f8e2 	bl	80024f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800232c:	4b06      	ldr	r3, [pc, #24]	@ (8002348 <HAL_InitTick+0x64>)
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002332:	2300      	movs	r3, #0
 8002334:	e000      	b.n	8002338 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
}
 8002338:	0018      	movs	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	b003      	add	sp, #12
 800233e:	bd90      	pop	{r4, r7, pc}
 8002340:	20000000 	.word	0x20000000
 8002344:	20000008 	.word	0x20000008
 8002348:	20000004 	.word	0x20000004

0800234c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002350:	4b05      	ldr	r3, [pc, #20]	@ (8002368 <HAL_IncTick+0x1c>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	001a      	movs	r2, r3
 8002356:	4b05      	ldr	r3, [pc, #20]	@ (800236c <HAL_IncTick+0x20>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	18d2      	adds	r2, r2, r3
 800235c:	4b03      	ldr	r3, [pc, #12]	@ (800236c <HAL_IncTick+0x20>)
 800235e:	601a      	str	r2, [r3, #0]
}
 8002360:	46c0      	nop			@ (mov r8, r8)
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	46c0      	nop			@ (mov r8, r8)
 8002368:	20000008 	.word	0x20000008
 800236c:	20000160 	.word	0x20000160

08002370 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  return uwTick;
 8002374:	4b02      	ldr	r3, [pc, #8]	@ (8002380 <HAL_GetTick+0x10>)
 8002376:	681b      	ldr	r3, [r3, #0]
}
 8002378:	0018      	movs	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	46c0      	nop			@ (mov r8, r8)
 8002380:	20000160 	.word	0x20000160

08002384 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800238c:	f7ff fff0 	bl	8002370 <HAL_GetTick>
 8002390:	0003      	movs	r3, r0
 8002392:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	3301      	adds	r3, #1
 800239c:	d005      	beq.n	80023aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800239e:	4b0a      	ldr	r3, [pc, #40]	@ (80023c8 <HAL_Delay+0x44>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	001a      	movs	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	189b      	adds	r3, r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80023aa:	46c0      	nop			@ (mov r8, r8)
 80023ac:	f7ff ffe0 	bl	8002370 <HAL_GetTick>
 80023b0:	0002      	movs	r2, r0
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d8f7      	bhi.n	80023ac <HAL_Delay+0x28>
  {
  }
}
 80023bc:	46c0      	nop			@ (mov r8, r8)
 80023be:	46c0      	nop			@ (mov r8, r8)
 80023c0:	46bd      	mov	sp, r7
 80023c2:	b004      	add	sp, #16
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	46c0      	nop			@ (mov r8, r8)
 80023c8:	20000008 	.word	0x20000008

080023cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023cc:	b590      	push	{r4, r7, lr}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	0002      	movs	r2, r0
 80023d4:	6039      	str	r1, [r7, #0]
 80023d6:	1dfb      	adds	r3, r7, #7
 80023d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80023da:	1dfb      	adds	r3, r7, #7
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b7f      	cmp	r3, #127	@ 0x7f
 80023e0:	d828      	bhi.n	8002434 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023e2:	4a2f      	ldr	r2, [pc, #188]	@ (80024a0 <__NVIC_SetPriority+0xd4>)
 80023e4:	1dfb      	adds	r3, r7, #7
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	b25b      	sxtb	r3, r3
 80023ea:	089b      	lsrs	r3, r3, #2
 80023ec:	33c0      	adds	r3, #192	@ 0xc0
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	589b      	ldr	r3, [r3, r2]
 80023f2:	1dfa      	adds	r2, r7, #7
 80023f4:	7812      	ldrb	r2, [r2, #0]
 80023f6:	0011      	movs	r1, r2
 80023f8:	2203      	movs	r2, #3
 80023fa:	400a      	ands	r2, r1
 80023fc:	00d2      	lsls	r2, r2, #3
 80023fe:	21ff      	movs	r1, #255	@ 0xff
 8002400:	4091      	lsls	r1, r2
 8002402:	000a      	movs	r2, r1
 8002404:	43d2      	mvns	r2, r2
 8002406:	401a      	ands	r2, r3
 8002408:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	019b      	lsls	r3, r3, #6
 800240e:	22ff      	movs	r2, #255	@ 0xff
 8002410:	401a      	ands	r2, r3
 8002412:	1dfb      	adds	r3, r7, #7
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	0018      	movs	r0, r3
 8002418:	2303      	movs	r3, #3
 800241a:	4003      	ands	r3, r0
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002420:	481f      	ldr	r0, [pc, #124]	@ (80024a0 <__NVIC_SetPriority+0xd4>)
 8002422:	1dfb      	adds	r3, r7, #7
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	b25b      	sxtb	r3, r3
 8002428:	089b      	lsrs	r3, r3, #2
 800242a:	430a      	orrs	r2, r1
 800242c:	33c0      	adds	r3, #192	@ 0xc0
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002432:	e031      	b.n	8002498 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002434:	4a1b      	ldr	r2, [pc, #108]	@ (80024a4 <__NVIC_SetPriority+0xd8>)
 8002436:	1dfb      	adds	r3, r7, #7
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	0019      	movs	r1, r3
 800243c:	230f      	movs	r3, #15
 800243e:	400b      	ands	r3, r1
 8002440:	3b08      	subs	r3, #8
 8002442:	089b      	lsrs	r3, r3, #2
 8002444:	3306      	adds	r3, #6
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	18d3      	adds	r3, r2, r3
 800244a:	3304      	adds	r3, #4
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	1dfa      	adds	r2, r7, #7
 8002450:	7812      	ldrb	r2, [r2, #0]
 8002452:	0011      	movs	r1, r2
 8002454:	2203      	movs	r2, #3
 8002456:	400a      	ands	r2, r1
 8002458:	00d2      	lsls	r2, r2, #3
 800245a:	21ff      	movs	r1, #255	@ 0xff
 800245c:	4091      	lsls	r1, r2
 800245e:	000a      	movs	r2, r1
 8002460:	43d2      	mvns	r2, r2
 8002462:	401a      	ands	r2, r3
 8002464:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	019b      	lsls	r3, r3, #6
 800246a:	22ff      	movs	r2, #255	@ 0xff
 800246c:	401a      	ands	r2, r3
 800246e:	1dfb      	adds	r3, r7, #7
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	0018      	movs	r0, r3
 8002474:	2303      	movs	r3, #3
 8002476:	4003      	ands	r3, r0
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800247c:	4809      	ldr	r0, [pc, #36]	@ (80024a4 <__NVIC_SetPriority+0xd8>)
 800247e:	1dfb      	adds	r3, r7, #7
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	001c      	movs	r4, r3
 8002484:	230f      	movs	r3, #15
 8002486:	4023      	ands	r3, r4
 8002488:	3b08      	subs	r3, #8
 800248a:	089b      	lsrs	r3, r3, #2
 800248c:	430a      	orrs	r2, r1
 800248e:	3306      	adds	r3, #6
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	18c3      	adds	r3, r0, r3
 8002494:	3304      	adds	r3, #4
 8002496:	601a      	str	r2, [r3, #0]
}
 8002498:	46c0      	nop			@ (mov r8, r8)
 800249a:	46bd      	mov	sp, r7
 800249c:	b003      	add	sp, #12
 800249e:	bd90      	pop	{r4, r7, pc}
 80024a0:	e000e100 	.word	0xe000e100
 80024a4:	e000ed00 	.word	0xe000ed00

080024a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	1e5a      	subs	r2, r3, #1
 80024b4:	2380      	movs	r3, #128	@ 0x80
 80024b6:	045b      	lsls	r3, r3, #17
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d301      	bcc.n	80024c0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024bc:	2301      	movs	r3, #1
 80024be:	e010      	b.n	80024e2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024c0:	4b0a      	ldr	r3, [pc, #40]	@ (80024ec <SysTick_Config+0x44>)
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	3a01      	subs	r2, #1
 80024c6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024c8:	2301      	movs	r3, #1
 80024ca:	425b      	negs	r3, r3
 80024cc:	2103      	movs	r1, #3
 80024ce:	0018      	movs	r0, r3
 80024d0:	f7ff ff7c 	bl	80023cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024d4:	4b05      	ldr	r3, [pc, #20]	@ (80024ec <SysTick_Config+0x44>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024da:	4b04      	ldr	r3, [pc, #16]	@ (80024ec <SysTick_Config+0x44>)
 80024dc:	2207      	movs	r2, #7
 80024de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	0018      	movs	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	b002      	add	sp, #8
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	46c0      	nop			@ (mov r8, r8)
 80024ec:	e000e010 	.word	0xe000e010

080024f0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	607a      	str	r2, [r7, #4]
 80024fa:	210f      	movs	r1, #15
 80024fc:	187b      	adds	r3, r7, r1
 80024fe:	1c02      	adds	r2, r0, #0
 8002500:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	187b      	adds	r3, r7, r1
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	b25b      	sxtb	r3, r3
 800250a:	0011      	movs	r1, r2
 800250c:	0018      	movs	r0, r3
 800250e:	f7ff ff5d 	bl	80023cc <__NVIC_SetPriority>
}
 8002512:	46c0      	nop			@ (mov r8, r8)
 8002514:	46bd      	mov	sp, r7
 8002516:	b004      	add	sp, #16
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	0018      	movs	r0, r3
 8002526:	f7ff ffbf 	bl	80024a8 <SysTick_Config>
 800252a:	0003      	movs	r3, r0
}
 800252c:	0018      	movs	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	b002      	add	sp, #8
 8002532:	bd80      	pop	{r7, pc}

08002534 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800253e:	2300      	movs	r3, #0
 8002540:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002542:	e155      	b.n	80027f0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2101      	movs	r1, #1
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	4091      	lsls	r1, r2
 800254e:	000a      	movs	r2, r1
 8002550:	4013      	ands	r3, r2
 8002552:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d100      	bne.n	800255c <HAL_GPIO_Init+0x28>
 800255a:	e146      	b.n	80027ea <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2203      	movs	r2, #3
 8002562:	4013      	ands	r3, r2
 8002564:	2b01      	cmp	r3, #1
 8002566:	d005      	beq.n	8002574 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2203      	movs	r2, #3
 800256e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002570:	2b02      	cmp	r3, #2
 8002572:	d130      	bne.n	80025d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	2203      	movs	r2, #3
 8002580:	409a      	lsls	r2, r3
 8002582:	0013      	movs	r3, r2
 8002584:	43da      	mvns	r2, r3
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	4013      	ands	r3, r2
 800258a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	68da      	ldr	r2, [r3, #12]
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	409a      	lsls	r2, r3
 8002596:	0013      	movs	r3, r2
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	4313      	orrs	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025aa:	2201      	movs	r2, #1
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	409a      	lsls	r2, r3
 80025b0:	0013      	movs	r3, r2
 80025b2:	43da      	mvns	r2, r3
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	4013      	ands	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	091b      	lsrs	r3, r3, #4
 80025c0:	2201      	movs	r2, #1
 80025c2:	401a      	ands	r2, r3
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	409a      	lsls	r2, r3
 80025c8:	0013      	movs	r3, r2
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2203      	movs	r2, #3
 80025dc:	4013      	ands	r3, r2
 80025de:	2b03      	cmp	r3, #3
 80025e0:	d017      	beq.n	8002612 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	2203      	movs	r2, #3
 80025ee:	409a      	lsls	r2, r3
 80025f0:	0013      	movs	r3, r2
 80025f2:	43da      	mvns	r2, r3
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	4013      	ands	r3, r2
 80025f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	409a      	lsls	r2, r3
 8002604:	0013      	movs	r3, r2
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	4313      	orrs	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2203      	movs	r2, #3
 8002618:	4013      	ands	r3, r2
 800261a:	2b02      	cmp	r3, #2
 800261c:	d123      	bne.n	8002666 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	08da      	lsrs	r2, r3, #3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3208      	adds	r2, #8
 8002626:	0092      	lsls	r2, r2, #2
 8002628:	58d3      	ldr	r3, [r2, r3]
 800262a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	2207      	movs	r2, #7
 8002630:	4013      	ands	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	220f      	movs	r2, #15
 8002636:	409a      	lsls	r2, r3
 8002638:	0013      	movs	r3, r2
 800263a:	43da      	mvns	r2, r3
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	4013      	ands	r3, r2
 8002640:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	691a      	ldr	r2, [r3, #16]
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	2107      	movs	r1, #7
 800264a:	400b      	ands	r3, r1
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	409a      	lsls	r2, r3
 8002650:	0013      	movs	r3, r2
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	4313      	orrs	r3, r2
 8002656:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	08da      	lsrs	r2, r3, #3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3208      	adds	r2, #8
 8002660:	0092      	lsls	r2, r2, #2
 8002662:	6939      	ldr	r1, [r7, #16]
 8002664:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	2203      	movs	r2, #3
 8002672:	409a      	lsls	r2, r3
 8002674:	0013      	movs	r3, r2
 8002676:	43da      	mvns	r2, r3
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	4013      	ands	r3, r2
 800267c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2203      	movs	r2, #3
 8002684:	401a      	ands	r2, r3
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	409a      	lsls	r2, r3
 800268c:	0013      	movs	r3, r2
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	4313      	orrs	r3, r2
 8002692:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685a      	ldr	r2, [r3, #4]
 800269e:	23c0      	movs	r3, #192	@ 0xc0
 80026a0:	029b      	lsls	r3, r3, #10
 80026a2:	4013      	ands	r3, r2
 80026a4:	d100      	bne.n	80026a8 <HAL_GPIO_Init+0x174>
 80026a6:	e0a0      	b.n	80027ea <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a8:	4b57      	ldr	r3, [pc, #348]	@ (8002808 <HAL_GPIO_Init+0x2d4>)
 80026aa:	699a      	ldr	r2, [r3, #24]
 80026ac:	4b56      	ldr	r3, [pc, #344]	@ (8002808 <HAL_GPIO_Init+0x2d4>)
 80026ae:	2101      	movs	r1, #1
 80026b0:	430a      	orrs	r2, r1
 80026b2:	619a      	str	r2, [r3, #24]
 80026b4:	4b54      	ldr	r3, [pc, #336]	@ (8002808 <HAL_GPIO_Init+0x2d4>)
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	2201      	movs	r2, #1
 80026ba:	4013      	ands	r3, r2
 80026bc:	60bb      	str	r3, [r7, #8]
 80026be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026c0:	4a52      	ldr	r2, [pc, #328]	@ (800280c <HAL_GPIO_Init+0x2d8>)
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	089b      	lsrs	r3, r3, #2
 80026c6:	3302      	adds	r3, #2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	589b      	ldr	r3, [r3, r2]
 80026cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	2203      	movs	r2, #3
 80026d2:	4013      	ands	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	220f      	movs	r2, #15
 80026d8:	409a      	lsls	r2, r3
 80026da:	0013      	movs	r3, r2
 80026dc:	43da      	mvns	r2, r3
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	4013      	ands	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	2390      	movs	r3, #144	@ 0x90
 80026e8:	05db      	lsls	r3, r3, #23
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d019      	beq.n	8002722 <HAL_GPIO_Init+0x1ee>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a47      	ldr	r2, [pc, #284]	@ (8002810 <HAL_GPIO_Init+0x2dc>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d013      	beq.n	800271e <HAL_GPIO_Init+0x1ea>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a46      	ldr	r2, [pc, #280]	@ (8002814 <HAL_GPIO_Init+0x2e0>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d00d      	beq.n	800271a <HAL_GPIO_Init+0x1e6>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a45      	ldr	r2, [pc, #276]	@ (8002818 <HAL_GPIO_Init+0x2e4>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d007      	beq.n	8002716 <HAL_GPIO_Init+0x1e2>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a44      	ldr	r2, [pc, #272]	@ (800281c <HAL_GPIO_Init+0x2e8>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d101      	bne.n	8002712 <HAL_GPIO_Init+0x1de>
 800270e:	2304      	movs	r3, #4
 8002710:	e008      	b.n	8002724 <HAL_GPIO_Init+0x1f0>
 8002712:	2305      	movs	r3, #5
 8002714:	e006      	b.n	8002724 <HAL_GPIO_Init+0x1f0>
 8002716:	2303      	movs	r3, #3
 8002718:	e004      	b.n	8002724 <HAL_GPIO_Init+0x1f0>
 800271a:	2302      	movs	r3, #2
 800271c:	e002      	b.n	8002724 <HAL_GPIO_Init+0x1f0>
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <HAL_GPIO_Init+0x1f0>
 8002722:	2300      	movs	r3, #0
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	2103      	movs	r1, #3
 8002728:	400a      	ands	r2, r1
 800272a:	0092      	lsls	r2, r2, #2
 800272c:	4093      	lsls	r3, r2
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	4313      	orrs	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002734:	4935      	ldr	r1, [pc, #212]	@ (800280c <HAL_GPIO_Init+0x2d8>)
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	089b      	lsrs	r3, r3, #2
 800273a:	3302      	adds	r3, #2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002742:	4b37      	ldr	r3, [pc, #220]	@ (8002820 <HAL_GPIO_Init+0x2ec>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	43da      	mvns	r2, r3
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4013      	ands	r3, r2
 8002750:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	2380      	movs	r3, #128	@ 0x80
 8002758:	025b      	lsls	r3, r3, #9
 800275a:	4013      	ands	r3, r2
 800275c:	d003      	beq.n	8002766 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4313      	orrs	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002766:	4b2e      	ldr	r3, [pc, #184]	@ (8002820 <HAL_GPIO_Init+0x2ec>)
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800276c:	4b2c      	ldr	r3, [pc, #176]	@ (8002820 <HAL_GPIO_Init+0x2ec>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	43da      	mvns	r2, r3
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	4013      	ands	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	2380      	movs	r3, #128	@ 0x80
 8002782:	029b      	lsls	r3, r3, #10
 8002784:	4013      	ands	r3, r2
 8002786:	d003      	beq.n	8002790 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	4313      	orrs	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002790:	4b23      	ldr	r3, [pc, #140]	@ (8002820 <HAL_GPIO_Init+0x2ec>)
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002796:	4b22      	ldr	r3, [pc, #136]	@ (8002820 <HAL_GPIO_Init+0x2ec>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	43da      	mvns	r2, r3
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	4013      	ands	r3, r2
 80027a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	2380      	movs	r3, #128	@ 0x80
 80027ac:	035b      	lsls	r3, r3, #13
 80027ae:	4013      	ands	r3, r2
 80027b0:	d003      	beq.n	80027ba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80027ba:	4b19      	ldr	r3, [pc, #100]	@ (8002820 <HAL_GPIO_Init+0x2ec>)
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80027c0:	4b17      	ldr	r3, [pc, #92]	@ (8002820 <HAL_GPIO_Init+0x2ec>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	43da      	mvns	r2, r3
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	4013      	ands	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	2380      	movs	r3, #128	@ 0x80
 80027d6:	039b      	lsls	r3, r3, #14
 80027d8:	4013      	ands	r3, r2
 80027da:	d003      	beq.n	80027e4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80027e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002820 <HAL_GPIO_Init+0x2ec>)
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	3301      	adds	r3, #1
 80027ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	40da      	lsrs	r2, r3
 80027f8:	1e13      	subs	r3, r2, #0
 80027fa:	d000      	beq.n	80027fe <HAL_GPIO_Init+0x2ca>
 80027fc:	e6a2      	b.n	8002544 <HAL_GPIO_Init+0x10>
  } 
}
 80027fe:	46c0      	nop			@ (mov r8, r8)
 8002800:	46c0      	nop			@ (mov r8, r8)
 8002802:	46bd      	mov	sp, r7
 8002804:	b006      	add	sp, #24
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40021000 	.word	0x40021000
 800280c:	40010000 	.word	0x40010000
 8002810:	48000400 	.word	0x48000400
 8002814:	48000800 	.word	0x48000800
 8002818:	48000c00 	.word	0x48000c00
 800281c:	48001000 	.word	0x48001000
 8002820:	40010400 	.word	0x40010400

08002824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	0008      	movs	r0, r1
 800282e:	0011      	movs	r1, r2
 8002830:	1cbb      	adds	r3, r7, #2
 8002832:	1c02      	adds	r2, r0, #0
 8002834:	801a      	strh	r2, [r3, #0]
 8002836:	1c7b      	adds	r3, r7, #1
 8002838:	1c0a      	adds	r2, r1, #0
 800283a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800283c:	1c7b      	adds	r3, r7, #1
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d004      	beq.n	800284e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002844:	1cbb      	adds	r3, r7, #2
 8002846:	881a      	ldrh	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800284c:	e003      	b.n	8002856 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800284e:	1cbb      	adds	r3, r7, #2
 8002850:	881a      	ldrh	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002856:	46c0      	nop			@ (mov r8, r8)
 8002858:	46bd      	mov	sp, r7
 800285a:	b002      	add	sp, #8
 800285c:	bd80      	pop	{r7, pc}
	...

08002860 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002860:	b590      	push	{r4, r7, lr}
 8002862:	b08f      	sub	sp, #60	@ 0x3c
 8002864:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002866:	2314      	movs	r3, #20
 8002868:	18fb      	adds	r3, r7, r3
 800286a:	4a38      	ldr	r2, [pc, #224]	@ (800294c <HAL_RCC_GetSysClockFreq+0xec>)
 800286c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800286e:	c313      	stmia	r3!, {r0, r1, r4}
 8002870:	6812      	ldr	r2, [r2, #0]
 8002872:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002874:	1d3b      	adds	r3, r7, #4
 8002876:	4a36      	ldr	r2, [pc, #216]	@ (8002950 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002878:	ca13      	ldmia	r2!, {r0, r1, r4}
 800287a:	c313      	stmia	r3!, {r0, r1, r4}
 800287c:	6812      	ldr	r2, [r2, #0]
 800287e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002880:	2300      	movs	r3, #0
 8002882:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002884:	2300      	movs	r3, #0
 8002886:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002888:	2300      	movs	r3, #0
 800288a:	637b      	str	r3, [r7, #52]	@ 0x34
 800288c:	2300      	movs	r3, #0
 800288e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 8002890:	2300      	movs	r3, #0
 8002892:	633b      	str	r3, [r7, #48]	@ 0x30
  
  tmpreg = RCC->CFGR;
 8002894:	4b2f      	ldr	r3, [pc, #188]	@ (8002954 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800289a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800289c:	220c      	movs	r2, #12
 800289e:	4013      	ands	r3, r2
 80028a0:	2b0c      	cmp	r3, #12
 80028a2:	d047      	beq.n	8002934 <HAL_RCC_GetSysClockFreq+0xd4>
 80028a4:	d849      	bhi.n	800293a <HAL_RCC_GetSysClockFreq+0xda>
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d002      	beq.n	80028b0 <HAL_RCC_GetSysClockFreq+0x50>
 80028aa:	2b08      	cmp	r3, #8
 80028ac:	d003      	beq.n	80028b6 <HAL_RCC_GetSysClockFreq+0x56>
 80028ae:	e044      	b.n	800293a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028b0:	4b29      	ldr	r3, [pc, #164]	@ (8002958 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028b2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80028b4:	e044      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80028b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028b8:	0c9b      	lsrs	r3, r3, #18
 80028ba:	220f      	movs	r2, #15
 80028bc:	4013      	ands	r3, r2
 80028be:	2214      	movs	r2, #20
 80028c0:	18ba      	adds	r2, r7, r2
 80028c2:	5cd3      	ldrb	r3, [r2, r3]
 80028c4:	627b      	str	r3, [r7, #36]	@ 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80028c6:	4b23      	ldr	r3, [pc, #140]	@ (8002954 <HAL_RCC_GetSysClockFreq+0xf4>)
 80028c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ca:	220f      	movs	r2, #15
 80028cc:	4013      	ands	r3, r2
 80028ce:	1d3a      	adds	r2, r7, #4
 80028d0:	5cd3      	ldrb	r3, [r2, r3]
 80028d2:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80028d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028d6:	23c0      	movs	r3, #192	@ 0xc0
 80028d8:	025b      	lsls	r3, r3, #9
 80028da:	401a      	ands	r2, r3
 80028dc:	2380      	movs	r3, #128	@ 0x80
 80028de:	025b      	lsls	r3, r3, #9
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d109      	bne.n	80028f8 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80028e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028e6:	481c      	ldr	r0, [pc, #112]	@ (8002958 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028e8:	f7fd fc0e 	bl	8000108 <__udivsi3>
 80028ec:	0003      	movs	r3, r0
 80028ee:	001a      	movs	r2, r3
 80028f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f2:	4353      	muls	r3, r2
 80028f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80028f6:	e01a      	b.n	800292e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80028f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028fa:	23c0      	movs	r3, #192	@ 0xc0
 80028fc:	025b      	lsls	r3, r3, #9
 80028fe:	401a      	ands	r2, r3
 8002900:	23c0      	movs	r3, #192	@ 0xc0
 8002902:	025b      	lsls	r3, r3, #9
 8002904:	429a      	cmp	r2, r3
 8002906:	d109      	bne.n	800291c <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002908:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800290a:	4814      	ldr	r0, [pc, #80]	@ (800295c <HAL_RCC_GetSysClockFreq+0xfc>)
 800290c:	f7fd fbfc 	bl	8000108 <__udivsi3>
 8002910:	0003      	movs	r3, r0
 8002912:	001a      	movs	r2, r3
 8002914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002916:	4353      	muls	r3, r2
 8002918:	637b      	str	r3, [r7, #52]	@ 0x34
 800291a:	e008      	b.n	800292e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800291c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800291e:	480e      	ldr	r0, [pc, #56]	@ (8002958 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002920:	f7fd fbf2 	bl	8000108 <__udivsi3>
 8002924:	0003      	movs	r3, r0
 8002926:	001a      	movs	r2, r3
 8002928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292a:	4353      	muls	r3, r2
 800292c:	637b      	str	r3, [r7, #52]	@ 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800292e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002930:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002932:	e005      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002934:	4b09      	ldr	r3, [pc, #36]	@ (800295c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002936:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002938:	e002      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800293a:	4b07      	ldr	r3, [pc, #28]	@ (8002958 <HAL_RCC_GetSysClockFreq+0xf8>)
 800293c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800293e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8002942:	0018      	movs	r0, r3
 8002944:	46bd      	mov	sp, r7
 8002946:	b00f      	add	sp, #60	@ 0x3c
 8002948:	bd90      	pop	{r4, r7, pc}
 800294a:	46c0      	nop			@ (mov r8, r8)
 800294c:	0800472c 	.word	0x0800472c
 8002950:	0800473c 	.word	0x0800473c
 8002954:	40021000 	.word	0x40021000
 8002958:	007a1200 	.word	0x007a1200
 800295c:	02dc6c00 	.word	0x02dc6c00

08002960 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002964:	4b02      	ldr	r3, [pc, #8]	@ (8002970 <HAL_RCC_GetHCLKFreq+0x10>)
 8002966:	681b      	ldr	r3, [r3, #0]
}
 8002968:	0018      	movs	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	46c0      	nop			@ (mov r8, r8)
 8002970:	20000000 	.word	0x20000000

08002974 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002978:	f7ff fff2 	bl	8002960 <HAL_RCC_GetHCLKFreq>
 800297c:	0001      	movs	r1, r0
 800297e:	4b06      	ldr	r3, [pc, #24]	@ (8002998 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	0a1b      	lsrs	r3, r3, #8
 8002984:	2207      	movs	r2, #7
 8002986:	4013      	ands	r3, r2
 8002988:	4a04      	ldr	r2, [pc, #16]	@ (800299c <HAL_RCC_GetPCLK1Freq+0x28>)
 800298a:	5cd3      	ldrb	r3, [r2, r3]
 800298c:	40d9      	lsrs	r1, r3
 800298e:	000b      	movs	r3, r1
}    
 8002990:	0018      	movs	r0, r3
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	46c0      	nop			@ (mov r8, r8)
 8002998:	40021000 	.word	0x40021000
 800299c:	0800478c 	.word	0x0800478c

080029a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e0a8      	b.n	8002b04 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d109      	bne.n	80029ce <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	2382      	movs	r3, #130	@ 0x82
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d009      	beq.n	80029da <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	61da      	str	r2, [r3, #28]
 80029cc:	e005      	b.n	80029da <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	225d      	movs	r2, #93	@ 0x5d
 80029e4:	5c9b      	ldrb	r3, [r3, r2]
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d107      	bne.n	80029fc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	225c      	movs	r2, #92	@ 0x5c
 80029f0:	2100      	movs	r1, #0
 80029f2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	0018      	movs	r0, r3
 80029f8:	f7ff f9f0 	bl	8001ddc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	225d      	movs	r2, #93	@ 0x5d
 8002a00:	2102      	movs	r1, #2
 8002a02:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2140      	movs	r1, #64	@ 0x40
 8002a10:	438a      	bics	r2, r1
 8002a12:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68da      	ldr	r2, [r3, #12]
 8002a18:	23e0      	movs	r3, #224	@ 0xe0
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d902      	bls.n	8002a26 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002a20:	2300      	movs	r3, #0
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	e002      	b.n	8002a2c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a26:	2380      	movs	r3, #128	@ 0x80
 8002a28:	015b      	lsls	r3, r3, #5
 8002a2a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68da      	ldr	r2, [r3, #12]
 8002a30:	23f0      	movs	r3, #240	@ 0xf0
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d008      	beq.n	8002a4a <HAL_SPI_Init+0xaa>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68da      	ldr	r2, [r3, #12]
 8002a3c:	23e0      	movs	r3, #224	@ 0xe0
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d002      	beq.n	8002a4a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	2382      	movs	r3, #130	@ 0x82
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	401a      	ands	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6899      	ldr	r1, [r3, #8]
 8002a58:	2384      	movs	r3, #132	@ 0x84
 8002a5a:	021b      	lsls	r3, r3, #8
 8002a5c:	400b      	ands	r3, r1
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	2102      	movs	r1, #2
 8002a66:	400b      	ands	r3, r1
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	2101      	movs	r1, #1
 8002a70:	400b      	ands	r3, r1
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6999      	ldr	r1, [r3, #24]
 8002a78:	2380      	movs	r3, #128	@ 0x80
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	400b      	ands	r3, r1
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	69db      	ldr	r3, [r3, #28]
 8002a84:	2138      	movs	r1, #56	@ 0x38
 8002a86:	400b      	ands	r3, r1
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	2180      	movs	r1, #128	@ 0x80
 8002a90:	400b      	ands	r3, r1
 8002a92:	431a      	orrs	r2, r3
 8002a94:	0011      	movs	r1, r2
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a9a:	2380      	movs	r3, #128	@ 0x80
 8002a9c:	019b      	lsls	r3, r3, #6
 8002a9e:	401a      	ands	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	0c1b      	lsrs	r3, r3, #16
 8002aae:	2204      	movs	r2, #4
 8002ab0:	401a      	ands	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab6:	2110      	movs	r1, #16
 8002ab8:	400b      	ands	r3, r1
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ac0:	2108      	movs	r1, #8
 8002ac2:	400b      	ands	r3, r1
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68d9      	ldr	r1, [r3, #12]
 8002aca:	23f0      	movs	r3, #240	@ 0xf0
 8002acc:	011b      	lsls	r3, r3, #4
 8002ace:	400b      	ands	r3, r1
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	0011      	movs	r1, r2
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	2380      	movs	r3, #128	@ 0x80
 8002ad8:	015b      	lsls	r3, r3, #5
 8002ada:	401a      	ands	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	69da      	ldr	r2, [r3, #28]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4907      	ldr	r1, [pc, #28]	@ (8002b0c <HAL_SPI_Init+0x16c>)
 8002af0:	400a      	ands	r2, r1
 8002af2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	225d      	movs	r2, #93	@ 0x5d
 8002afe:	2101      	movs	r1, #1
 8002b00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	0018      	movs	r0, r3
 8002b06:	46bd      	mov	sp, r7
 8002b08:	b004      	add	sp, #16
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	fffff7ff 	.word	0xfffff7ff

08002b10 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b08a      	sub	sp, #40	@ 0x28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
 8002b1c:	001a      	movs	r2, r3
 8002b1e:	1cbb      	adds	r3, r7, #2
 8002b20:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002b22:	2301      	movs	r3, #1
 8002b24:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002b26:	2323      	movs	r3, #35	@ 0x23
 8002b28:	18fb      	adds	r3, r7, r3
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	225c      	movs	r2, #92	@ 0x5c
 8002b32:	5c9b      	ldrb	r3, [r3, r2]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d101      	bne.n	8002b3c <HAL_SPI_TransmitReceive+0x2c>
 8002b38:	2302      	movs	r3, #2
 8002b3a:	e1b5      	b.n	8002ea8 <HAL_SPI_TransmitReceive+0x398>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	225c      	movs	r2, #92	@ 0x5c
 8002b40:	2101      	movs	r1, #1
 8002b42:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b44:	f7ff fc14 	bl	8002370 <HAL_GetTick>
 8002b48:	0003      	movs	r3, r0
 8002b4a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002b4c:	201b      	movs	r0, #27
 8002b4e:	183b      	adds	r3, r7, r0
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	215d      	movs	r1, #93	@ 0x5d
 8002b54:	5c52      	ldrb	r2, [r2, r1]
 8002b56:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002b5e:	2312      	movs	r3, #18
 8002b60:	18fb      	adds	r3, r7, r3
 8002b62:	1cba      	adds	r2, r7, #2
 8002b64:	8812      	ldrh	r2, [r2, #0]
 8002b66:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002b68:	183b      	adds	r3, r7, r0
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d011      	beq.n	8002b94 <HAL_SPI_TransmitReceive+0x84>
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	2382      	movs	r3, #130	@ 0x82
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d107      	bne.n	8002b8a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d103      	bne.n	8002b8a <HAL_SPI_TransmitReceive+0x7a>
 8002b82:	183b      	adds	r3, r7, r0
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	d004      	beq.n	8002b94 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002b8a:	2323      	movs	r3, #35	@ 0x23
 8002b8c:	18fb      	adds	r3, r7, r3
 8002b8e:	2202      	movs	r2, #2
 8002b90:	701a      	strb	r2, [r3, #0]
    goto error;
 8002b92:	e17e      	b.n	8002e92 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d006      	beq.n	8002ba8 <HAL_SPI_TransmitReceive+0x98>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <HAL_SPI_TransmitReceive+0x98>
 8002ba0:	1cbb      	adds	r3, r7, #2
 8002ba2:	881b      	ldrh	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d104      	bne.n	8002bb2 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002ba8:	2323      	movs	r3, #35	@ 0x23
 8002baa:	18fb      	adds	r3, r7, r3
 8002bac:	2201      	movs	r2, #1
 8002bae:	701a      	strb	r2, [r3, #0]
    goto error;
 8002bb0:	e16f      	b.n	8002e92 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	225d      	movs	r2, #93	@ 0x5d
 8002bb6:	5c9b      	ldrb	r3, [r3, r2]
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d003      	beq.n	8002bc6 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	225d      	movs	r2, #93	@ 0x5d
 8002bc2:	2105      	movs	r1, #5
 8002bc4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	1cba      	adds	r2, r7, #2
 8002bd6:	2146      	movs	r1, #70	@ 0x46
 8002bd8:	8812      	ldrh	r2, [r2, #0]
 8002bda:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	1cba      	adds	r2, r7, #2
 8002be0:	2144      	movs	r1, #68	@ 0x44
 8002be2:	8812      	ldrh	r2, [r2, #0]
 8002be4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	68ba      	ldr	r2, [r7, #8]
 8002bea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	1cba      	adds	r2, r7, #2
 8002bf0:	8812      	ldrh	r2, [r2, #0]
 8002bf2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	1cba      	adds	r2, r7, #2
 8002bf8:	8812      	ldrh	r2, [r2, #0]
 8002bfa:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	68da      	ldr	r2, [r3, #12]
 8002c0c:	23e0      	movs	r3, #224	@ 0xe0
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d908      	bls.n	8002c26 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	49a4      	ldr	r1, [pc, #656]	@ (8002eb0 <HAL_SPI_TransmitReceive+0x3a0>)
 8002c20:	400a      	ands	r2, r1
 8002c22:	605a      	str	r2, [r3, #4]
 8002c24:	e008      	b.n	8002c38 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2180      	movs	r1, #128	@ 0x80
 8002c32:	0149      	lsls	r1, r1, #5
 8002c34:	430a      	orrs	r2, r1
 8002c36:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2240      	movs	r2, #64	@ 0x40
 8002c40:	4013      	ands	r3, r2
 8002c42:	2b40      	cmp	r3, #64	@ 0x40
 8002c44:	d007      	beq.n	8002c56 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2140      	movs	r1, #64	@ 0x40
 8002c52:	430a      	orrs	r2, r1
 8002c54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	68da      	ldr	r2, [r3, #12]
 8002c5a:	23e0      	movs	r3, #224	@ 0xe0
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d800      	bhi.n	8002c64 <HAL_SPI_TransmitReceive+0x154>
 8002c62:	e07f      	b.n	8002d64 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d005      	beq.n	8002c78 <HAL_SPI_TransmitReceive+0x168>
 8002c6c:	2312      	movs	r3, #18
 8002c6e:	18fb      	adds	r3, r7, r3
 8002c70:	881b      	ldrh	r3, [r3, #0]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d000      	beq.n	8002c78 <HAL_SPI_TransmitReceive+0x168>
 8002c76:	e069      	b.n	8002d4c <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c7c:	881a      	ldrh	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c88:	1c9a      	adds	r2, r3, #2
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c9c:	e056      	b.n	8002d4c <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	2202      	movs	r2, #2
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d11b      	bne.n	8002ce4 <HAL_SPI_TransmitReceive+0x1d4>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d016      	beq.n	8002ce4 <HAL_SPI_TransmitReceive+0x1d4>
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d113      	bne.n	8002ce4 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cc0:	881a      	ldrh	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ccc:	1c9a      	adds	r2, r3, #2
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	2201      	movs	r2, #1
 8002cec:	4013      	ands	r3, r2
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d11c      	bne.n	8002d2c <HAL_SPI_TransmitReceive+0x21c>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2246      	movs	r2, #70	@ 0x46
 8002cf6:	5a9b      	ldrh	r3, [r3, r2]
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d016      	beq.n	8002d2c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68da      	ldr	r2, [r3, #12]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d08:	b292      	uxth	r2, r2
 8002d0a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d10:	1c9a      	adds	r2, r3, #2
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2246      	movs	r2, #70	@ 0x46
 8002d1a:	5a9b      	ldrh	r3, [r3, r2]
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	b299      	uxth	r1, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2246      	movs	r2, #70	@ 0x46
 8002d26:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002d2c:	f7ff fb20 	bl	8002370 <HAL_GetTick>
 8002d30:	0002      	movs	r2, r0
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d807      	bhi.n	8002d4c <HAL_SPI_TransmitReceive+0x23c>
 8002d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d3e:	3301      	adds	r3, #1
 8002d40:	d004      	beq.n	8002d4c <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8002d42:	2323      	movs	r3, #35	@ 0x23
 8002d44:	18fb      	adds	r3, r7, r3
 8002d46:	2203      	movs	r2, #3
 8002d48:	701a      	strb	r2, [r3, #0]
        goto error;
 8002d4a:	e0a2      	b.n	8002e92 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1a3      	bne.n	8002c9e <HAL_SPI_TransmitReceive+0x18e>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2246      	movs	r2, #70	@ 0x46
 8002d5a:	5a9b      	ldrh	r3, [r3, r2]
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d19d      	bne.n	8002c9e <HAL_SPI_TransmitReceive+0x18e>
 8002d62:	e085      	b.n	8002e70 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d005      	beq.n	8002d78 <HAL_SPI_TransmitReceive+0x268>
 8002d6c:	2312      	movs	r3, #18
 8002d6e:	18fb      	adds	r3, r7, r3
 8002d70:	881b      	ldrh	r3, [r3, #0]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d000      	beq.n	8002d78 <HAL_SPI_TransmitReceive+0x268>
 8002d76:	e070      	b.n	8002e5a <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	330c      	adds	r3, #12
 8002d82:	7812      	ldrb	r2, [r2, #0]
 8002d84:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d8a:	1c5a      	adds	r2, r3, #1
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	3b01      	subs	r3, #1
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d9e:	e05c      	b.n	8002e5a <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	2202      	movs	r2, #2
 8002da8:	4013      	ands	r3, r2
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d11c      	bne.n	8002de8 <HAL_SPI_TransmitReceive+0x2d8>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d017      	beq.n	8002de8 <HAL_SPI_TransmitReceive+0x2d8>
 8002db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d114      	bne.n	8002de8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	330c      	adds	r3, #12
 8002dc8:	7812      	ldrb	r2, [r2, #0]
 8002dca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dd0:	1c5a      	adds	r2, r3, #1
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	2201      	movs	r2, #1
 8002df0:	4013      	ands	r3, r2
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d11e      	bne.n	8002e34 <HAL_SPI_TransmitReceive+0x324>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2246      	movs	r2, #70	@ 0x46
 8002dfa:	5a9b      	ldrh	r3, [r3, r2]
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d018      	beq.n	8002e34 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	330c      	adds	r3, #12
 8002e08:	001a      	movs	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0e:	7812      	ldrb	r2, [r2, #0]
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e18:	1c5a      	adds	r2, r3, #1
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2246      	movs	r2, #70	@ 0x46
 8002e22:	5a9b      	ldrh	r3, [r3, r2]
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	3b01      	subs	r3, #1
 8002e28:	b299      	uxth	r1, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2246      	movs	r2, #70	@ 0x46
 8002e2e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e30:	2301      	movs	r3, #1
 8002e32:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002e34:	f7ff fa9c 	bl	8002370 <HAL_GetTick>
 8002e38:	0002      	movs	r2, r0
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d802      	bhi.n	8002e4a <HAL_SPI_TransmitReceive+0x33a>
 8002e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e46:	3301      	adds	r3, #1
 8002e48:	d102      	bne.n	8002e50 <HAL_SPI_TransmitReceive+0x340>
 8002e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d104      	bne.n	8002e5a <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8002e50:	2323      	movs	r3, #35	@ 0x23
 8002e52:	18fb      	adds	r3, r7, r3
 8002e54:	2203      	movs	r2, #3
 8002e56:	701a      	strb	r2, [r3, #0]
        goto error;
 8002e58:	e01b      	b.n	8002e92 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d19d      	bne.n	8002da0 <HAL_SPI_TransmitReceive+0x290>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2246      	movs	r2, #70	@ 0x46
 8002e68:	5a9b      	ldrh	r3, [r3, r2]
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d197      	bne.n	8002da0 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e70:	69fa      	ldr	r2, [r7, #28]
 8002e72:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	0018      	movs	r0, r3
 8002e78:	f000 f94c 	bl	8003114 <SPI_EndRxTxTransaction>
 8002e7c:	1e03      	subs	r3, r0, #0
 8002e7e:	d007      	beq.n	8002e90 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8002e80:	2323      	movs	r3, #35	@ 0x23
 8002e82:	18fb      	adds	r3, r7, r3
 8002e84:	2201      	movs	r2, #1
 8002e86:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	661a      	str	r2, [r3, #96]	@ 0x60
 8002e8e:	e000      	b.n	8002e92 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8002e90:	46c0      	nop			@ (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	225d      	movs	r2, #93	@ 0x5d
 8002e96:	2101      	movs	r1, #1
 8002e98:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	225c      	movs	r2, #92	@ 0x5c
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002ea2:	2323      	movs	r3, #35	@ 0x23
 8002ea4:	18fb      	adds	r3, r7, r3
 8002ea6:	781b      	ldrb	r3, [r3, #0]
}
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	b00a      	add	sp, #40	@ 0x28
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	ffffefff 	.word	0xffffefff

08002eb4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b088      	sub	sp, #32
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	603b      	str	r3, [r7, #0]
 8002ec0:	1dfb      	adds	r3, r7, #7
 8002ec2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ec4:	f7ff fa54 	bl	8002370 <HAL_GetTick>
 8002ec8:	0002      	movs	r2, r0
 8002eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ecc:	1a9b      	subs	r3, r3, r2
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	18d3      	adds	r3, r2, r3
 8002ed2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ed4:	f7ff fa4c 	bl	8002370 <HAL_GetTick>
 8002ed8:	0003      	movs	r3, r0
 8002eda:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002edc:	4b3a      	ldr	r3, [pc, #232]	@ (8002fc8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	015b      	lsls	r3, r3, #5
 8002ee2:	0d1b      	lsrs	r3, r3, #20
 8002ee4:	69fa      	ldr	r2, [r7, #28]
 8002ee6:	4353      	muls	r3, r2
 8002ee8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002eea:	e058      	b.n	8002f9e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	d055      	beq.n	8002f9e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ef2:	f7ff fa3d 	bl	8002370 <HAL_GetTick>
 8002ef6:	0002      	movs	r2, r0
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	69fa      	ldr	r2, [r7, #28]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d902      	bls.n	8002f08 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d142      	bne.n	8002f8e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	21e0      	movs	r1, #224	@ 0xe0
 8002f14:	438a      	bics	r2, r1
 8002f16:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	2382      	movs	r3, #130	@ 0x82
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d113      	bne.n	8002f4c <SPI_WaitFlagStateUntilTimeout+0x98>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	2380      	movs	r3, #128	@ 0x80
 8002f2a:	021b      	lsls	r3, r3, #8
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d005      	beq.n	8002f3c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	2380      	movs	r3, #128	@ 0x80
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d107      	bne.n	8002f4c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2140      	movs	r1, #64	@ 0x40
 8002f48:	438a      	bics	r2, r1
 8002f4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f50:	2380      	movs	r3, #128	@ 0x80
 8002f52:	019b      	lsls	r3, r3, #6
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d110      	bne.n	8002f7a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	491a      	ldr	r1, [pc, #104]	@ (8002fcc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002f64:	400a      	ands	r2, r1
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2180      	movs	r1, #128	@ 0x80
 8002f74:	0189      	lsls	r1, r1, #6
 8002f76:	430a      	orrs	r2, r1
 8002f78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	225d      	movs	r2, #93	@ 0x5d
 8002f7e:	2101      	movs	r1, #1
 8002f80:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	225c      	movs	r2, #92	@ 0x5c
 8002f86:	2100      	movs	r1, #0
 8002f88:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e017      	b.n	8002fbe <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002f94:	2300      	movs	r3, #0
 8002f96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	425a      	negs	r2, r3
 8002fae:	4153      	adcs	r3, r2
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	001a      	movs	r2, r3
 8002fb4:	1dfb      	adds	r3, r7, #7
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d197      	bne.n	8002eec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	b008      	add	sp, #32
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	46c0      	nop			@ (mov r8, r8)
 8002fc8:	20000000 	.word	0x20000000
 8002fcc:	ffffdfff 	.word	0xffffdfff

08002fd0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b08a      	sub	sp, #40	@ 0x28
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
 8002fdc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002fde:	2317      	movs	r3, #23
 8002fe0:	18fb      	adds	r3, r7, r3
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002fe6:	f7ff f9c3 	bl	8002370 <HAL_GetTick>
 8002fea:	0002      	movs	r2, r0
 8002fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fee:	1a9b      	subs	r3, r3, r2
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	18d3      	adds	r3, r2, r3
 8002ff4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002ff6:	f7ff f9bb 	bl	8002370 <HAL_GetTick>
 8002ffa:	0003      	movs	r3, r0
 8002ffc:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	330c      	adds	r3, #12
 8003004:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003006:	4b41      	ldr	r3, [pc, #260]	@ (800310c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	0013      	movs	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	189b      	adds	r3, r3, r2
 8003010:	00da      	lsls	r2, r3, #3
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	0d1b      	lsrs	r3, r3, #20
 8003016:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003018:	4353      	muls	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800301c:	e068      	b.n	80030f0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	23c0      	movs	r3, #192	@ 0xc0
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	429a      	cmp	r2, r3
 8003026:	d10a      	bne.n	800303e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d107      	bne.n	800303e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	b2da      	uxtb	r2, r3
 8003034:	2117      	movs	r1, #23
 8003036:	187b      	adds	r3, r7, r1
 8003038:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800303a:	187b      	adds	r3, r7, r1
 800303c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	3301      	adds	r3, #1
 8003042:	d055      	beq.n	80030f0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003044:	f7ff f994 	bl	8002370 <HAL_GetTick>
 8003048:	0002      	movs	r2, r0
 800304a:	6a3b      	ldr	r3, [r7, #32]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003050:	429a      	cmp	r2, r3
 8003052:	d902      	bls.n	800305a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003056:	2b00      	cmp	r3, #0
 8003058:	d142      	bne.n	80030e0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	21e0      	movs	r1, #224	@ 0xe0
 8003066:	438a      	bics	r2, r1
 8003068:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	2382      	movs	r3, #130	@ 0x82
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	429a      	cmp	r2, r3
 8003074:	d113      	bne.n	800309e <SPI_WaitFifoStateUntilTimeout+0xce>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	2380      	movs	r3, #128	@ 0x80
 800307c:	021b      	lsls	r3, r3, #8
 800307e:	429a      	cmp	r2, r3
 8003080:	d005      	beq.n	800308e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	689a      	ldr	r2, [r3, #8]
 8003086:	2380      	movs	r3, #128	@ 0x80
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	429a      	cmp	r2, r3
 800308c:	d107      	bne.n	800309e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2140      	movs	r1, #64	@ 0x40
 800309a:	438a      	bics	r2, r1
 800309c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030a2:	2380      	movs	r3, #128	@ 0x80
 80030a4:	019b      	lsls	r3, r3, #6
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d110      	bne.n	80030cc <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4916      	ldr	r1, [pc, #88]	@ (8003110 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80030b6:	400a      	ands	r2, r1
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2180      	movs	r1, #128	@ 0x80
 80030c6:	0189      	lsls	r1, r1, #6
 80030c8:	430a      	orrs	r2, r1
 80030ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	225d      	movs	r2, #93	@ 0x5d
 80030d0:	2101      	movs	r1, #1
 80030d2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	225c      	movs	r2, #92	@ 0x5c
 80030d8:	2100      	movs	r1, #0
 80030da:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e010      	b.n	8003102 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80030e6:	2300      	movs	r3, #0
 80030e8:	627b      	str	r3, [r7, #36]	@ 0x24
      }      
      count--;
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	3b01      	subs	r3, #1
 80030ee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	4013      	ands	r3, r2
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d18e      	bne.n	800301e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	0018      	movs	r0, r3
 8003104:	46bd      	mov	sp, r7
 8003106:	b00a      	add	sp, #40	@ 0x28
 8003108:	bd80      	pop	{r7, pc}
 800310a:	46c0      	nop			@ (mov r8, r8)
 800310c:	20000000 	.word	0x20000000
 8003110:	ffffdfff 	.word	0xffffdfff

08003114 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af02      	add	r7, sp, #8
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	23c0      	movs	r3, #192	@ 0xc0
 8003124:	0159      	lsls	r1, r3, #5
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	0013      	movs	r3, r2
 800312e:	2200      	movs	r2, #0
 8003130:	f7ff ff4e 	bl	8002fd0 <SPI_WaitFifoStateUntilTimeout>
 8003134:	1e03      	subs	r3, r0, #0
 8003136:	d007      	beq.n	8003148 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800313c:	2220      	movs	r2, #32
 800313e:	431a      	orrs	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e027      	b.n	8003198 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	0013      	movs	r3, r2
 8003152:	2200      	movs	r2, #0
 8003154:	2180      	movs	r1, #128	@ 0x80
 8003156:	f7ff fead 	bl	8002eb4 <SPI_WaitFlagStateUntilTimeout>
 800315a:	1e03      	subs	r3, r0, #0
 800315c:	d007      	beq.n	800316e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003162:	2220      	movs	r2, #32
 8003164:	431a      	orrs	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e014      	b.n	8003198 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	23c0      	movs	r3, #192	@ 0xc0
 8003172:	00d9      	lsls	r1, r3, #3
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	0013      	movs	r3, r2
 800317c:	2200      	movs	r2, #0
 800317e:	f7ff ff27 	bl	8002fd0 <SPI_WaitFifoStateUntilTimeout>
 8003182:	1e03      	subs	r3, r0, #0
 8003184:	d007      	beq.n	8003196 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800318a:	2220      	movs	r2, #32
 800318c:	431a      	orrs	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e000      	b.n	8003198 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	0018      	movs	r0, r3
 800319a:	46bd      	mov	sp, r7
 800319c:	b004      	add	sp, #16
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e042      	b.n	8003238 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	223d      	movs	r2, #61	@ 0x3d
 80031b6:	5c9b      	ldrb	r3, [r3, r2]
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d107      	bne.n	80031ce <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	223c      	movs	r2, #60	@ 0x3c
 80031c2:	2100      	movs	r1, #0
 80031c4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	0018      	movs	r0, r3
 80031ca:	f7fe ff71 	bl	80020b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	223d      	movs	r2, #61	@ 0x3d
 80031d2:	2102      	movs	r1, #2
 80031d4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	3304      	adds	r3, #4
 80031de:	0019      	movs	r1, r3
 80031e0:	0010      	movs	r0, r2
 80031e2:	f000 fad7 	bl	8003794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2246      	movs	r2, #70	@ 0x46
 80031ea:	2101      	movs	r1, #1
 80031ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	223e      	movs	r2, #62	@ 0x3e
 80031f2:	2101      	movs	r1, #1
 80031f4:	5499      	strb	r1, [r3, r2]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	223f      	movs	r2, #63	@ 0x3f
 80031fa:	2101      	movs	r1, #1
 80031fc:	5499      	strb	r1, [r3, r2]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2240      	movs	r2, #64	@ 0x40
 8003202:	2101      	movs	r1, #1
 8003204:	5499      	strb	r1, [r3, r2]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2241      	movs	r2, #65	@ 0x41
 800320a:	2101      	movs	r1, #1
 800320c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2242      	movs	r2, #66	@ 0x42
 8003212:	2101      	movs	r1, #1
 8003214:	5499      	strb	r1, [r3, r2]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2243      	movs	r2, #67	@ 0x43
 800321a:	2101      	movs	r1, #1
 800321c:	5499      	strb	r1, [r3, r2]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2244      	movs	r2, #68	@ 0x44
 8003222:	2101      	movs	r1, #1
 8003224:	5499      	strb	r1, [r3, r2]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2245      	movs	r2, #69	@ 0x45
 800322a:	2101      	movs	r1, #1
 800322c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	223d      	movs	r2, #61	@ 0x3d
 8003232:	2101      	movs	r1, #1
 8003234:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	0018      	movs	r0, r3
 800323a:	46bd      	mov	sp, r7
 800323c:	b002      	add	sp, #8
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e042      	b.n	80032d8 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	223d      	movs	r2, #61	@ 0x3d
 8003256:	5c9b      	ldrb	r3, [r3, r2]
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d107      	bne.n	800326e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	223c      	movs	r2, #60	@ 0x3c
 8003262:	2100      	movs	r1, #0
 8003264:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	0018      	movs	r0, r3
 800326a:	f000 f839 	bl	80032e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	223d      	movs	r2, #61	@ 0x3d
 8003272:	2102      	movs	r1, #2
 8003274:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	3304      	adds	r3, #4
 800327e:	0019      	movs	r1, r3
 8003280:	0010      	movs	r0, r2
 8003282:	f000 fa87 	bl	8003794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2246      	movs	r2, #70	@ 0x46
 800328a:	2101      	movs	r1, #1
 800328c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	223e      	movs	r2, #62	@ 0x3e
 8003292:	2101      	movs	r1, #1
 8003294:	5499      	strb	r1, [r3, r2]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	223f      	movs	r2, #63	@ 0x3f
 800329a:	2101      	movs	r1, #1
 800329c:	5499      	strb	r1, [r3, r2]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2240      	movs	r2, #64	@ 0x40
 80032a2:	2101      	movs	r1, #1
 80032a4:	5499      	strb	r1, [r3, r2]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2241      	movs	r2, #65	@ 0x41
 80032aa:	2101      	movs	r1, #1
 80032ac:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2242      	movs	r2, #66	@ 0x42
 80032b2:	2101      	movs	r1, #1
 80032b4:	5499      	strb	r1, [r3, r2]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2243      	movs	r2, #67	@ 0x43
 80032ba:	2101      	movs	r1, #1
 80032bc:	5499      	strb	r1, [r3, r2]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2244      	movs	r2, #68	@ 0x44
 80032c2:	2101      	movs	r1, #1
 80032c4:	5499      	strb	r1, [r3, r2]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2245      	movs	r2, #69	@ 0x45
 80032ca:	2101      	movs	r1, #1
 80032cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	223d      	movs	r2, #61	@ 0x3d
 80032d2:	2101      	movs	r1, #1
 80032d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	0018      	movs	r0, r3
 80032da:	46bd      	mov	sp, r7
 80032dc:	b002      	add	sp, #8
 80032de:	bd80      	pop	{r7, pc}

080032e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80032e8:	46c0      	nop			@ (mov r8, r8)
 80032ea:	46bd      	mov	sp, r7
 80032ec:	b002      	add	sp, #8
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d108      	bne.n	8003312 <HAL_TIM_PWM_Start+0x22>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	223e      	movs	r2, #62	@ 0x3e
 8003304:	5c9b      	ldrb	r3, [r3, r2]
 8003306:	b2db      	uxtb	r3, r3
 8003308:	3b01      	subs	r3, #1
 800330a:	1e5a      	subs	r2, r3, #1
 800330c:	4193      	sbcs	r3, r2
 800330e:	b2db      	uxtb	r3, r3
 8003310:	e01f      	b.n	8003352 <HAL_TIM_PWM_Start+0x62>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	2b04      	cmp	r3, #4
 8003316:	d108      	bne.n	800332a <HAL_TIM_PWM_Start+0x3a>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	223f      	movs	r2, #63	@ 0x3f
 800331c:	5c9b      	ldrb	r3, [r3, r2]
 800331e:	b2db      	uxtb	r3, r3
 8003320:	3b01      	subs	r3, #1
 8003322:	1e5a      	subs	r2, r3, #1
 8003324:	4193      	sbcs	r3, r2
 8003326:	b2db      	uxtb	r3, r3
 8003328:	e013      	b.n	8003352 <HAL_TIM_PWM_Start+0x62>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b08      	cmp	r3, #8
 800332e:	d108      	bne.n	8003342 <HAL_TIM_PWM_Start+0x52>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2240      	movs	r2, #64	@ 0x40
 8003334:	5c9b      	ldrb	r3, [r3, r2]
 8003336:	b2db      	uxtb	r3, r3
 8003338:	3b01      	subs	r3, #1
 800333a:	1e5a      	subs	r2, r3, #1
 800333c:	4193      	sbcs	r3, r2
 800333e:	b2db      	uxtb	r3, r3
 8003340:	e007      	b.n	8003352 <HAL_TIM_PWM_Start+0x62>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2241      	movs	r2, #65	@ 0x41
 8003346:	5c9b      	ldrb	r3, [r3, r2]
 8003348:	b2db      	uxtb	r3, r3
 800334a:	3b01      	subs	r3, #1
 800334c:	1e5a      	subs	r2, r3, #1
 800334e:	4193      	sbcs	r3, r2
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e074      	b.n	8003444 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d104      	bne.n	800336a <HAL_TIM_PWM_Start+0x7a>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	223e      	movs	r2, #62	@ 0x3e
 8003364:	2102      	movs	r1, #2
 8003366:	5499      	strb	r1, [r3, r2]
 8003368:	e013      	b.n	8003392 <HAL_TIM_PWM_Start+0xa2>
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	2b04      	cmp	r3, #4
 800336e:	d104      	bne.n	800337a <HAL_TIM_PWM_Start+0x8a>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	223f      	movs	r2, #63	@ 0x3f
 8003374:	2102      	movs	r1, #2
 8003376:	5499      	strb	r1, [r3, r2]
 8003378:	e00b      	b.n	8003392 <HAL_TIM_PWM_Start+0xa2>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	2b08      	cmp	r3, #8
 800337e:	d104      	bne.n	800338a <HAL_TIM_PWM_Start+0x9a>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2240      	movs	r2, #64	@ 0x40
 8003384:	2102      	movs	r1, #2
 8003386:	5499      	strb	r1, [r3, r2]
 8003388:	e003      	b.n	8003392 <HAL_TIM_PWM_Start+0xa2>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2241      	movs	r2, #65	@ 0x41
 800338e:	2102      	movs	r1, #2
 8003390:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6839      	ldr	r1, [r7, #0]
 8003398:	2201      	movs	r2, #1
 800339a:	0018      	movs	r0, r3
 800339c:	f000 fd10 	bl	8003dc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a29      	ldr	r2, [pc, #164]	@ (800344c <HAL_TIM_PWM_Start+0x15c>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d00e      	beq.n	80033c8 <HAL_TIM_PWM_Start+0xd8>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a28      	ldr	r2, [pc, #160]	@ (8003450 <HAL_TIM_PWM_Start+0x160>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d009      	beq.n	80033c8 <HAL_TIM_PWM_Start+0xd8>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a26      	ldr	r2, [pc, #152]	@ (8003454 <HAL_TIM_PWM_Start+0x164>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d004      	beq.n	80033c8 <HAL_TIM_PWM_Start+0xd8>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a25      	ldr	r2, [pc, #148]	@ (8003458 <HAL_TIM_PWM_Start+0x168>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d101      	bne.n	80033cc <HAL_TIM_PWM_Start+0xdc>
 80033c8:	2301      	movs	r3, #1
 80033ca:	e000      	b.n	80033ce <HAL_TIM_PWM_Start+0xde>
 80033cc:	2300      	movs	r3, #0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d008      	beq.n	80033e4 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2180      	movs	r1, #128	@ 0x80
 80033de:	0209      	lsls	r1, r1, #8
 80033e0:	430a      	orrs	r2, r1
 80033e2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a18      	ldr	r2, [pc, #96]	@ (800344c <HAL_TIM_PWM_Start+0x15c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d00f      	beq.n	800340e <HAL_TIM_PWM_Start+0x11e>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	2380      	movs	r3, #128	@ 0x80
 80033f4:	05db      	lsls	r3, r3, #23
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d009      	beq.n	800340e <HAL_TIM_PWM_Start+0x11e>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a17      	ldr	r2, [pc, #92]	@ (800345c <HAL_TIM_PWM_Start+0x16c>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d004      	beq.n	800340e <HAL_TIM_PWM_Start+0x11e>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a11      	ldr	r2, [pc, #68]	@ (8003450 <HAL_TIM_PWM_Start+0x160>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d111      	bne.n	8003432 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	2207      	movs	r2, #7
 8003416:	4013      	ands	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2b06      	cmp	r3, #6
 800341e:	d010      	beq.n	8003442 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2101      	movs	r1, #1
 800342c:	430a      	orrs	r2, r1
 800342e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003430:	e007      	b.n	8003442 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2101      	movs	r1, #1
 800343e:	430a      	orrs	r2, r1
 8003440:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	0018      	movs	r0, r3
 8003446:	46bd      	mov	sp, r7
 8003448:	b004      	add	sp, #16
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40012c00 	.word	0x40012c00
 8003450:	40014000 	.word	0x40014000
 8003454:	40014400 	.word	0x40014400
 8003458:	40014800 	.word	0x40014800
 800345c:	40000400 	.word	0x40000400

08003460 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800346c:	2317      	movs	r3, #23
 800346e:	18fb      	adds	r3, r7, r3
 8003470:	2200      	movs	r2, #0
 8003472:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	223c      	movs	r2, #60	@ 0x3c
 8003478:	5c9b      	ldrb	r3, [r3, r2]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d101      	bne.n	8003482 <HAL_TIM_PWM_ConfigChannel+0x22>
 800347e:	2302      	movs	r3, #2
 8003480:	e0ad      	b.n	80035de <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	223c      	movs	r2, #60	@ 0x3c
 8003486:	2101      	movs	r1, #1
 8003488:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b0c      	cmp	r3, #12
 800348e:	d100      	bne.n	8003492 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003490:	e076      	b.n	8003580 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b0c      	cmp	r3, #12
 8003496:	d900      	bls.n	800349a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003498:	e095      	b.n	80035c6 <HAL_TIM_PWM_ConfigChannel+0x166>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b08      	cmp	r3, #8
 800349e:	d04e      	beq.n	800353e <HAL_TIM_PWM_ConfigChannel+0xde>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b08      	cmp	r3, #8
 80034a4:	d900      	bls.n	80034a8 <HAL_TIM_PWM_ConfigChannel+0x48>
 80034a6:	e08e      	b.n	80035c6 <HAL_TIM_PWM_ConfigChannel+0x166>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_TIM_PWM_ConfigChannel+0x56>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b04      	cmp	r3, #4
 80034b2:	d021      	beq.n	80034f8 <HAL_TIM_PWM_ConfigChannel+0x98>
 80034b4:	e087      	b.n	80035c6 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	0011      	movs	r1, r2
 80034be:	0018      	movs	r0, r3
 80034c0:	f000 f9e8 	bl	8003894 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699a      	ldr	r2, [r3, #24]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2108      	movs	r1, #8
 80034d0:	430a      	orrs	r2, r1
 80034d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	699a      	ldr	r2, [r3, #24]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2104      	movs	r1, #4
 80034e0:	438a      	bics	r2, r1
 80034e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6999      	ldr	r1, [r3, #24]
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	691a      	ldr	r2, [r3, #16]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	619a      	str	r2, [r3, #24]
      break;
 80034f6:	e06b      	b.n	80035d0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	0011      	movs	r1, r2
 8003500:	0018      	movs	r0, r3
 8003502:	f000 fa4f 	bl	80039a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	699a      	ldr	r2, [r3, #24]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2180      	movs	r1, #128	@ 0x80
 8003512:	0109      	lsls	r1, r1, #4
 8003514:	430a      	orrs	r2, r1
 8003516:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	699a      	ldr	r2, [r3, #24]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4931      	ldr	r1, [pc, #196]	@ (80035e8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003524:	400a      	ands	r2, r1
 8003526:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6999      	ldr	r1, [r3, #24]
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	021a      	lsls	r2, r3, #8
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	619a      	str	r2, [r3, #24]
      break;
 800353c:	e048      	b.n	80035d0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	0011      	movs	r1, r2
 8003546:	0018      	movs	r0, r3
 8003548:	f000 fab0 	bl	8003aac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	69da      	ldr	r2, [r3, #28]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2108      	movs	r1, #8
 8003558:	430a      	orrs	r2, r1
 800355a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	69da      	ldr	r2, [r3, #28]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2104      	movs	r1, #4
 8003568:	438a      	bics	r2, r1
 800356a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	69d9      	ldr	r1, [r3, #28]
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	691a      	ldr	r2, [r3, #16]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	430a      	orrs	r2, r1
 800357c:	61da      	str	r2, [r3, #28]
      break;
 800357e:	e027      	b.n	80035d0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	0011      	movs	r1, r2
 8003588:	0018      	movs	r0, r3
 800358a:	f000 fb15 	bl	8003bb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	69da      	ldr	r2, [r3, #28]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2180      	movs	r1, #128	@ 0x80
 800359a:	0109      	lsls	r1, r1, #4
 800359c:	430a      	orrs	r2, r1
 800359e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	69da      	ldr	r2, [r3, #28]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	490f      	ldr	r1, [pc, #60]	@ (80035e8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80035ac:	400a      	ands	r2, r1
 80035ae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	69d9      	ldr	r1, [r3, #28]
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	021a      	lsls	r2, r3, #8
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	61da      	str	r2, [r3, #28]
      break;
 80035c4:	e004      	b.n	80035d0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80035c6:	2317      	movs	r3, #23
 80035c8:	18fb      	adds	r3, r7, r3
 80035ca:	2201      	movs	r2, #1
 80035cc:	701a      	strb	r2, [r3, #0]
      break;
 80035ce:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	223c      	movs	r2, #60	@ 0x3c
 80035d4:	2100      	movs	r1, #0
 80035d6:	5499      	strb	r1, [r3, r2]

  return status;
 80035d8:	2317      	movs	r3, #23
 80035da:	18fb      	adds	r3, r7, r3
 80035dc:	781b      	ldrb	r3, [r3, #0]
}
 80035de:	0018      	movs	r0, r3
 80035e0:	46bd      	mov	sp, r7
 80035e2:	b006      	add	sp, #24
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	46c0      	nop			@ (mov r8, r8)
 80035e8:	fffffbff 	.word	0xfffffbff

080035ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035f6:	230f      	movs	r3, #15
 80035f8:	18fb      	adds	r3, r7, r3
 80035fa:	2200      	movs	r2, #0
 80035fc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	223c      	movs	r2, #60	@ 0x3c
 8003602:	5c9b      	ldrb	r3, [r3, r2]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d101      	bne.n	800360c <HAL_TIM_ConfigClockSource+0x20>
 8003608:	2302      	movs	r3, #2
 800360a:	e0bc      	b.n	8003786 <HAL_TIM_ConfigClockSource+0x19a>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	223c      	movs	r2, #60	@ 0x3c
 8003610:	2101      	movs	r1, #1
 8003612:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	223d      	movs	r2, #61	@ 0x3d
 8003618:	2102      	movs	r1, #2
 800361a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2277      	movs	r2, #119	@ 0x77
 8003628:	4393      	bics	r3, r2
 800362a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	4a58      	ldr	r2, [pc, #352]	@ (8003790 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003630:	4013      	ands	r3, r2
 8003632:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2280      	movs	r2, #128	@ 0x80
 8003642:	0192      	lsls	r2, r2, #6
 8003644:	4293      	cmp	r3, r2
 8003646:	d040      	beq.n	80036ca <HAL_TIM_ConfigClockSource+0xde>
 8003648:	2280      	movs	r2, #128	@ 0x80
 800364a:	0192      	lsls	r2, r2, #6
 800364c:	4293      	cmp	r3, r2
 800364e:	d900      	bls.n	8003652 <HAL_TIM_ConfigClockSource+0x66>
 8003650:	e088      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x178>
 8003652:	2280      	movs	r2, #128	@ 0x80
 8003654:	0152      	lsls	r2, r2, #5
 8003656:	4293      	cmp	r3, r2
 8003658:	d100      	bne.n	800365c <HAL_TIM_ConfigClockSource+0x70>
 800365a:	e088      	b.n	800376e <HAL_TIM_ConfigClockSource+0x182>
 800365c:	2280      	movs	r2, #128	@ 0x80
 800365e:	0152      	lsls	r2, r2, #5
 8003660:	4293      	cmp	r3, r2
 8003662:	d900      	bls.n	8003666 <HAL_TIM_ConfigClockSource+0x7a>
 8003664:	e07e      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x178>
 8003666:	2b70      	cmp	r3, #112	@ 0x70
 8003668:	d018      	beq.n	800369c <HAL_TIM_ConfigClockSource+0xb0>
 800366a:	d900      	bls.n	800366e <HAL_TIM_ConfigClockSource+0x82>
 800366c:	e07a      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x178>
 800366e:	2b60      	cmp	r3, #96	@ 0x60
 8003670:	d04f      	beq.n	8003712 <HAL_TIM_ConfigClockSource+0x126>
 8003672:	d900      	bls.n	8003676 <HAL_TIM_ConfigClockSource+0x8a>
 8003674:	e076      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x178>
 8003676:	2b50      	cmp	r3, #80	@ 0x50
 8003678:	d03b      	beq.n	80036f2 <HAL_TIM_ConfigClockSource+0x106>
 800367a:	d900      	bls.n	800367e <HAL_TIM_ConfigClockSource+0x92>
 800367c:	e072      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x178>
 800367e:	2b40      	cmp	r3, #64	@ 0x40
 8003680:	d057      	beq.n	8003732 <HAL_TIM_ConfigClockSource+0x146>
 8003682:	d900      	bls.n	8003686 <HAL_TIM_ConfigClockSource+0x9a>
 8003684:	e06e      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x178>
 8003686:	2b30      	cmp	r3, #48	@ 0x30
 8003688:	d063      	beq.n	8003752 <HAL_TIM_ConfigClockSource+0x166>
 800368a:	d86b      	bhi.n	8003764 <HAL_TIM_ConfigClockSource+0x178>
 800368c:	2b20      	cmp	r3, #32
 800368e:	d060      	beq.n	8003752 <HAL_TIM_ConfigClockSource+0x166>
 8003690:	d868      	bhi.n	8003764 <HAL_TIM_ConfigClockSource+0x178>
 8003692:	2b00      	cmp	r3, #0
 8003694:	d05d      	beq.n	8003752 <HAL_TIM_ConfigClockSource+0x166>
 8003696:	2b10      	cmp	r3, #16
 8003698:	d05b      	beq.n	8003752 <HAL_TIM_ConfigClockSource+0x166>
 800369a:	e063      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6818      	ldr	r0, [r3, #0]
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	6899      	ldr	r1, [r3, #8]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f000 fb68 	bl	8003d80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	2277      	movs	r2, #119	@ 0x77
 80036bc:	4313      	orrs	r3, r2
 80036be:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	609a      	str	r2, [r3, #8]
      break;
 80036c8:	e052      	b.n	8003770 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6818      	ldr	r0, [r3, #0]
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	6899      	ldr	r1, [r3, #8]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	f000 fb51 	bl	8003d80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2180      	movs	r1, #128	@ 0x80
 80036ea:	01c9      	lsls	r1, r1, #7
 80036ec:	430a      	orrs	r2, r1
 80036ee:	609a      	str	r2, [r3, #8]
      break;
 80036f0:	e03e      	b.n	8003770 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6818      	ldr	r0, [r3, #0]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	6859      	ldr	r1, [r3, #4]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	001a      	movs	r2, r3
 8003700:	f000 fac4 	bl	8003c8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2150      	movs	r1, #80	@ 0x50
 800370a:	0018      	movs	r0, r3
 800370c:	f000 fb1e 	bl	8003d4c <TIM_ITRx_SetConfig>
      break;
 8003710:	e02e      	b.n	8003770 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6818      	ldr	r0, [r3, #0]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	6859      	ldr	r1, [r3, #4]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	001a      	movs	r2, r3
 8003720:	f000 fae2 	bl	8003ce8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2160      	movs	r1, #96	@ 0x60
 800372a:	0018      	movs	r0, r3
 800372c:	f000 fb0e 	bl	8003d4c <TIM_ITRx_SetConfig>
      break;
 8003730:	e01e      	b.n	8003770 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6818      	ldr	r0, [r3, #0]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	6859      	ldr	r1, [r3, #4]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	001a      	movs	r2, r3
 8003740:	f000 faa4 	bl	8003c8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2140      	movs	r1, #64	@ 0x40
 800374a:	0018      	movs	r0, r3
 800374c:	f000 fafe 	bl	8003d4c <TIM_ITRx_SetConfig>
      break;
 8003750:	e00e      	b.n	8003770 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	0019      	movs	r1, r3
 800375c:	0010      	movs	r0, r2
 800375e:	f000 faf5 	bl	8003d4c <TIM_ITRx_SetConfig>
      break;
 8003762:	e005      	b.n	8003770 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003764:	230f      	movs	r3, #15
 8003766:	18fb      	adds	r3, r7, r3
 8003768:	2201      	movs	r2, #1
 800376a:	701a      	strb	r2, [r3, #0]
      break;
 800376c:	e000      	b.n	8003770 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800376e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	223d      	movs	r2, #61	@ 0x3d
 8003774:	2101      	movs	r1, #1
 8003776:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	223c      	movs	r2, #60	@ 0x3c
 800377c:	2100      	movs	r1, #0
 800377e:	5499      	strb	r1, [r3, r2]

  return status;
 8003780:	230f      	movs	r3, #15
 8003782:	18fb      	adds	r3, r7, r3
 8003784:	781b      	ldrb	r3, [r3, #0]
}
 8003786:	0018      	movs	r0, r3
 8003788:	46bd      	mov	sp, r7
 800378a:	b004      	add	sp, #16
 800378c:	bd80      	pop	{r7, pc}
 800378e:	46c0      	nop			@ (mov r8, r8)
 8003790:	ffff00ff 	.word	0xffff00ff

08003794 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a34      	ldr	r2, [pc, #208]	@ (8003878 <TIM_Base_SetConfig+0xe4>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d008      	beq.n	80037be <TIM_Base_SetConfig+0x2a>
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	2380      	movs	r3, #128	@ 0x80
 80037b0:	05db      	lsls	r3, r3, #23
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d003      	beq.n	80037be <TIM_Base_SetConfig+0x2a>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a30      	ldr	r2, [pc, #192]	@ (800387c <TIM_Base_SetConfig+0xe8>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d108      	bne.n	80037d0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2270      	movs	r2, #112	@ 0x70
 80037c2:	4393      	bics	r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a29      	ldr	r2, [pc, #164]	@ (8003878 <TIM_Base_SetConfig+0xe4>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d018      	beq.n	800380a <TIM_Base_SetConfig+0x76>
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	2380      	movs	r3, #128	@ 0x80
 80037dc:	05db      	lsls	r3, r3, #23
 80037de:	429a      	cmp	r2, r3
 80037e0:	d013      	beq.n	800380a <TIM_Base_SetConfig+0x76>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a25      	ldr	r2, [pc, #148]	@ (800387c <TIM_Base_SetConfig+0xe8>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d00f      	beq.n	800380a <TIM_Base_SetConfig+0x76>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a24      	ldr	r2, [pc, #144]	@ (8003880 <TIM_Base_SetConfig+0xec>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d00b      	beq.n	800380a <TIM_Base_SetConfig+0x76>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a23      	ldr	r2, [pc, #140]	@ (8003884 <TIM_Base_SetConfig+0xf0>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d007      	beq.n	800380a <TIM_Base_SetConfig+0x76>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a22      	ldr	r2, [pc, #136]	@ (8003888 <TIM_Base_SetConfig+0xf4>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d003      	beq.n	800380a <TIM_Base_SetConfig+0x76>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a21      	ldr	r2, [pc, #132]	@ (800388c <TIM_Base_SetConfig+0xf8>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d108      	bne.n	800381c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	4a20      	ldr	r2, [pc, #128]	@ (8003890 <TIM_Base_SetConfig+0xfc>)
 800380e:	4013      	ands	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	4313      	orrs	r3, r2
 800381a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2280      	movs	r2, #128	@ 0x80
 8003820:	4393      	bics	r3, r2
 8003822:	001a      	movs	r2, r3
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	4313      	orrs	r3, r2
 800382a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	689a      	ldr	r2, [r3, #8]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a0c      	ldr	r2, [pc, #48]	@ (8003878 <TIM_Base_SetConfig+0xe4>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d00b      	beq.n	8003862 <TIM_Base_SetConfig+0xce>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a0d      	ldr	r2, [pc, #52]	@ (8003884 <TIM_Base_SetConfig+0xf0>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d007      	beq.n	8003862 <TIM_Base_SetConfig+0xce>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a0c      	ldr	r2, [pc, #48]	@ (8003888 <TIM_Base_SetConfig+0xf4>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d003      	beq.n	8003862 <TIM_Base_SetConfig+0xce>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a0b      	ldr	r2, [pc, #44]	@ (800388c <TIM_Base_SetConfig+0xf8>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d103      	bne.n	800386a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	691a      	ldr	r2, [r3, #16]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	615a      	str	r2, [r3, #20]
}
 8003870:	46c0      	nop			@ (mov r8, r8)
 8003872:	46bd      	mov	sp, r7
 8003874:	b004      	add	sp, #16
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40012c00 	.word	0x40012c00
 800387c:	40000400 	.word	0x40000400
 8003880:	40002000 	.word	0x40002000
 8003884:	40014000 	.word	0x40014000
 8003888:	40014400 	.word	0x40014400
 800388c:	40014800 	.word	0x40014800
 8003890:	fffffcff 	.word	0xfffffcff

08003894 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	2201      	movs	r2, #1
 80038a4:	4393      	bics	r3, r2
 80038a6:	001a      	movs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2270      	movs	r2, #112	@ 0x70
 80038c2:	4393      	bics	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2203      	movs	r2, #3
 80038ca:	4393      	bics	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	2202      	movs	r2, #2
 80038dc:	4393      	bics	r3, r2
 80038de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a27      	ldr	r2, [pc, #156]	@ (800398c <TIM_OC1_SetConfig+0xf8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d00b      	beq.n	800390a <TIM_OC1_SetConfig+0x76>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a26      	ldr	r2, [pc, #152]	@ (8003990 <TIM_OC1_SetConfig+0xfc>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d007      	beq.n	800390a <TIM_OC1_SetConfig+0x76>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a25      	ldr	r2, [pc, #148]	@ (8003994 <TIM_OC1_SetConfig+0x100>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d003      	beq.n	800390a <TIM_OC1_SetConfig+0x76>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a24      	ldr	r2, [pc, #144]	@ (8003998 <TIM_OC1_SetConfig+0x104>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d10c      	bne.n	8003924 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	2208      	movs	r2, #8
 800390e:	4393      	bics	r3, r2
 8003910:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	4313      	orrs	r3, r2
 800391a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	2204      	movs	r2, #4
 8003920:	4393      	bics	r3, r2
 8003922:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a19      	ldr	r2, [pc, #100]	@ (800398c <TIM_OC1_SetConfig+0xf8>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d00b      	beq.n	8003944 <TIM_OC1_SetConfig+0xb0>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a18      	ldr	r2, [pc, #96]	@ (8003990 <TIM_OC1_SetConfig+0xfc>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d007      	beq.n	8003944 <TIM_OC1_SetConfig+0xb0>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a17      	ldr	r2, [pc, #92]	@ (8003994 <TIM_OC1_SetConfig+0x100>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d003      	beq.n	8003944 <TIM_OC1_SetConfig+0xb0>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a16      	ldr	r2, [pc, #88]	@ (8003998 <TIM_OC1_SetConfig+0x104>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d111      	bne.n	8003968 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	4a15      	ldr	r2, [pc, #84]	@ (800399c <TIM_OC1_SetConfig+0x108>)
 8003948:	4013      	ands	r3, r2
 800394a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	4a14      	ldr	r2, [pc, #80]	@ (80039a0 <TIM_OC1_SetConfig+0x10c>)
 8003950:	4013      	ands	r3, r2
 8003952:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	4313      	orrs	r3, r2
 800395c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	4313      	orrs	r3, r2
 8003966:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	621a      	str	r2, [r3, #32]
}
 8003982:	46c0      	nop			@ (mov r8, r8)
 8003984:	46bd      	mov	sp, r7
 8003986:	b006      	add	sp, #24
 8003988:	bd80      	pop	{r7, pc}
 800398a:	46c0      	nop			@ (mov r8, r8)
 800398c:	40012c00 	.word	0x40012c00
 8003990:	40014000 	.word	0x40014000
 8003994:	40014400 	.word	0x40014400
 8003998:	40014800 	.word	0x40014800
 800399c:	fffffeff 	.word	0xfffffeff
 80039a0:	fffffdff 	.word	0xfffffdff

080039a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	2210      	movs	r2, #16
 80039b4:	4393      	bics	r3, r2
 80039b6:	001a      	movs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	4a2e      	ldr	r2, [pc, #184]	@ (8003a8c <TIM_OC2_SetConfig+0xe8>)
 80039d2:	4013      	ands	r3, r2
 80039d4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	4a2d      	ldr	r2, [pc, #180]	@ (8003a90 <TIM_OC2_SetConfig+0xec>)
 80039da:	4013      	ands	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	021b      	lsls	r3, r3, #8
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	2220      	movs	r2, #32
 80039ee:	4393      	bics	r3, r2
 80039f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a24      	ldr	r2, [pc, #144]	@ (8003a94 <TIM_OC2_SetConfig+0xf0>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d10d      	bne.n	8003a22 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	2280      	movs	r2, #128	@ 0x80
 8003a0a:	4393      	bics	r3, r2
 8003a0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	011b      	lsls	r3, r3, #4
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	2240      	movs	r2, #64	@ 0x40
 8003a1e:	4393      	bics	r3, r2
 8003a20:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a1b      	ldr	r2, [pc, #108]	@ (8003a94 <TIM_OC2_SetConfig+0xf0>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d00b      	beq.n	8003a42 <TIM_OC2_SetConfig+0x9e>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a1a      	ldr	r2, [pc, #104]	@ (8003a98 <TIM_OC2_SetConfig+0xf4>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d007      	beq.n	8003a42 <TIM_OC2_SetConfig+0x9e>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a19      	ldr	r2, [pc, #100]	@ (8003a9c <TIM_OC2_SetConfig+0xf8>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d003      	beq.n	8003a42 <TIM_OC2_SetConfig+0x9e>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a18      	ldr	r2, [pc, #96]	@ (8003aa0 <TIM_OC2_SetConfig+0xfc>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d113      	bne.n	8003a6a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	4a17      	ldr	r2, [pc, #92]	@ (8003aa4 <TIM_OC2_SetConfig+0x100>)
 8003a46:	4013      	ands	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	4a16      	ldr	r2, [pc, #88]	@ (8003aa8 <TIM_OC2_SetConfig+0x104>)
 8003a4e:	4013      	ands	r3, r2
 8003a50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	621a      	str	r2, [r3, #32]
}
 8003a84:	46c0      	nop			@ (mov r8, r8)
 8003a86:	46bd      	mov	sp, r7
 8003a88:	b006      	add	sp, #24
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	ffff8fff 	.word	0xffff8fff
 8003a90:	fffffcff 	.word	0xfffffcff
 8003a94:	40012c00 	.word	0x40012c00
 8003a98:	40014000 	.word	0x40014000
 8003a9c:	40014400 	.word	0x40014400
 8003aa0:	40014800 	.word	0x40014800
 8003aa4:	fffffbff 	.word	0xfffffbff
 8003aa8:	fffff7ff 	.word	0xfffff7ff

08003aac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	4a35      	ldr	r2, [pc, #212]	@ (8003b90 <TIM_OC3_SetConfig+0xe4>)
 8003abc:	401a      	ands	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2270      	movs	r2, #112	@ 0x70
 8003ad8:	4393      	bics	r3, r2
 8003ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2203      	movs	r2, #3
 8003ae0:	4393      	bics	r3, r2
 8003ae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	4a28      	ldr	r2, [pc, #160]	@ (8003b94 <TIM_OC3_SetConfig+0xe8>)
 8003af2:	4013      	ands	r3, r2
 8003af4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	021b      	lsls	r3, r3, #8
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a24      	ldr	r2, [pc, #144]	@ (8003b98 <TIM_OC3_SetConfig+0xec>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d10d      	bne.n	8003b26 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	4a23      	ldr	r2, [pc, #140]	@ (8003b9c <TIM_OC3_SetConfig+0xf0>)
 8003b0e:	4013      	ands	r3, r2
 8003b10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	021b      	lsls	r3, r3, #8
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	4a1f      	ldr	r2, [pc, #124]	@ (8003ba0 <TIM_OC3_SetConfig+0xf4>)
 8003b22:	4013      	ands	r3, r2
 8003b24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a1b      	ldr	r2, [pc, #108]	@ (8003b98 <TIM_OC3_SetConfig+0xec>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d00b      	beq.n	8003b46 <TIM_OC3_SetConfig+0x9a>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a1c      	ldr	r2, [pc, #112]	@ (8003ba4 <TIM_OC3_SetConfig+0xf8>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d007      	beq.n	8003b46 <TIM_OC3_SetConfig+0x9a>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a1b      	ldr	r2, [pc, #108]	@ (8003ba8 <TIM_OC3_SetConfig+0xfc>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d003      	beq.n	8003b46 <TIM_OC3_SetConfig+0x9a>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a1a      	ldr	r2, [pc, #104]	@ (8003bac <TIM_OC3_SetConfig+0x100>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d113      	bne.n	8003b6e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	4a19      	ldr	r2, [pc, #100]	@ (8003bb0 <TIM_OC3_SetConfig+0x104>)
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	4a18      	ldr	r2, [pc, #96]	@ (8003bb4 <TIM_OC3_SetConfig+0x108>)
 8003b52:	4013      	ands	r3, r2
 8003b54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	011b      	lsls	r3, r3, #4
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	011b      	lsls	r3, r3, #4
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	621a      	str	r2, [r3, #32]
}
 8003b88:	46c0      	nop			@ (mov r8, r8)
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	b006      	add	sp, #24
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	fffffeff 	.word	0xfffffeff
 8003b94:	fffffdff 	.word	0xfffffdff
 8003b98:	40012c00 	.word	0x40012c00
 8003b9c:	fffff7ff 	.word	0xfffff7ff
 8003ba0:	fffffbff 	.word	0xfffffbff
 8003ba4:	40014000 	.word	0x40014000
 8003ba8:	40014400 	.word	0x40014400
 8003bac:	40014800 	.word	0x40014800
 8003bb0:	ffffefff 	.word	0xffffefff
 8003bb4:	ffffdfff 	.word	0xffffdfff

08003bb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	4a28      	ldr	r2, [pc, #160]	@ (8003c68 <TIM_OC4_SetConfig+0xb0>)
 8003bc8:	401a      	ands	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4a22      	ldr	r2, [pc, #136]	@ (8003c6c <TIM_OC4_SetConfig+0xb4>)
 8003be4:	4013      	ands	r3, r2
 8003be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4a21      	ldr	r2, [pc, #132]	@ (8003c70 <TIM_OC4_SetConfig+0xb8>)
 8003bec:	4013      	ands	r3, r2
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	021b      	lsls	r3, r3, #8
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	4a1d      	ldr	r2, [pc, #116]	@ (8003c74 <TIM_OC4_SetConfig+0xbc>)
 8003c00:	4013      	ands	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	031b      	lsls	r3, r3, #12
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a19      	ldr	r2, [pc, #100]	@ (8003c78 <TIM_OC4_SetConfig+0xc0>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d00b      	beq.n	8003c30 <TIM_OC4_SetConfig+0x78>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a18      	ldr	r2, [pc, #96]	@ (8003c7c <TIM_OC4_SetConfig+0xc4>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d007      	beq.n	8003c30 <TIM_OC4_SetConfig+0x78>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a17      	ldr	r2, [pc, #92]	@ (8003c80 <TIM_OC4_SetConfig+0xc8>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d003      	beq.n	8003c30 <TIM_OC4_SetConfig+0x78>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a16      	ldr	r2, [pc, #88]	@ (8003c84 <TIM_OC4_SetConfig+0xcc>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d109      	bne.n	8003c44 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	4a15      	ldr	r2, [pc, #84]	@ (8003c88 <TIM_OC4_SetConfig+0xd0>)
 8003c34:	4013      	ands	r3, r2
 8003c36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	019b      	lsls	r3, r3, #6
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	621a      	str	r2, [r3, #32]
}
 8003c5e:	46c0      	nop			@ (mov r8, r8)
 8003c60:	46bd      	mov	sp, r7
 8003c62:	b006      	add	sp, #24
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	46c0      	nop			@ (mov r8, r8)
 8003c68:	ffffefff 	.word	0xffffefff
 8003c6c:	ffff8fff 	.word	0xffff8fff
 8003c70:	fffffcff 	.word	0xfffffcff
 8003c74:	ffffdfff 	.word	0xffffdfff
 8003c78:	40012c00 	.word	0x40012c00
 8003c7c:	40014000 	.word	0x40014000
 8003c80:	40014400 	.word	0x40014400
 8003c84:	40014800 	.word	0x40014800
 8003c88:	ffffbfff 	.word	0xffffbfff

08003c8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	4393      	bics	r3, r2
 8003ca6:	001a      	movs	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	22f0      	movs	r2, #240	@ 0xf0
 8003cb6:	4393      	bics	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	011b      	lsls	r3, r3, #4
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	220a      	movs	r2, #10
 8003cc8:	4393      	bics	r3, r2
 8003cca:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	621a      	str	r2, [r3, #32]
}
 8003ce0:	46c0      	nop			@ (mov r8, r8)
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	b006      	add	sp, #24
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	2210      	movs	r2, #16
 8003cfa:	4393      	bics	r3, r2
 8003cfc:	001a      	movs	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6a1b      	ldr	r3, [r3, #32]
 8003d0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	4a0d      	ldr	r2, [pc, #52]	@ (8003d48 <TIM_TI2_ConfigInputStage+0x60>)
 8003d12:	4013      	ands	r3, r2
 8003d14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	031b      	lsls	r3, r3, #12
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	22a0      	movs	r2, #160	@ 0xa0
 8003d24:	4393      	bics	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	011b      	lsls	r3, r3, #4
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	621a      	str	r2, [r3, #32]
}
 8003d3e:	46c0      	nop			@ (mov r8, r8)
 8003d40:	46bd      	mov	sp, r7
 8003d42:	b006      	add	sp, #24
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	46c0      	nop			@ (mov r8, r8)
 8003d48:	ffff0fff 	.word	0xffff0fff

08003d4c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2270      	movs	r2, #112	@ 0x70
 8003d60:	4393      	bics	r3, r2
 8003d62:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	2207      	movs	r2, #7
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	609a      	str	r2, [r3, #8]
}
 8003d76:	46c0      	nop			@ (mov r8, r8)
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	b004      	add	sp, #16
 8003d7c:	bd80      	pop	{r7, pc}
	...

08003d80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
 8003d8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	4a09      	ldr	r2, [pc, #36]	@ (8003dbc <TIM_ETR_SetConfig+0x3c>)
 8003d98:	4013      	ands	r3, r2
 8003d9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	021a      	lsls	r2, r3, #8
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	431a      	orrs	r2, r3
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	609a      	str	r2, [r3, #8]
}
 8003db4:	46c0      	nop			@ (mov r8, r8)
 8003db6:	46bd      	mov	sp, r7
 8003db8:	b006      	add	sp, #24
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	ffff00ff 	.word	0xffff00ff

08003dc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	221f      	movs	r2, #31
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	409a      	lsls	r2, r3
 8003dd6:	0013      	movs	r3, r2
 8003dd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	43d2      	mvns	r2, r2
 8003de2:	401a      	ands	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6a1a      	ldr	r2, [r3, #32]
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	211f      	movs	r1, #31
 8003df0:	400b      	ands	r3, r1
 8003df2:	6879      	ldr	r1, [r7, #4]
 8003df4:	4099      	lsls	r1, r3
 8003df6:	000b      	movs	r3, r1
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	621a      	str	r2, [r3, #32]
}
 8003dfe:	46c0      	nop			@ (mov r8, r8)
 8003e00:	46bd      	mov	sp, r7
 8003e02:	b006      	add	sp, #24
 8003e04:	bd80      	pop	{r7, pc}
	...

08003e08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	223c      	movs	r2, #60	@ 0x3c
 8003e16:	5c9b      	ldrb	r3, [r3, r2]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d101      	bne.n	8003e20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	e047      	b.n	8003eb0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	223c      	movs	r2, #60	@ 0x3c
 8003e24:	2101      	movs	r1, #1
 8003e26:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	223d      	movs	r2, #61	@ 0x3d
 8003e2c:	2102      	movs	r1, #2
 8003e2e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2270      	movs	r2, #112	@ 0x70
 8003e44:	4393      	bics	r3, r2
 8003e46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a16      	ldr	r2, [pc, #88]	@ (8003eb8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d00f      	beq.n	8003e84 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	2380      	movs	r3, #128	@ 0x80
 8003e6a:	05db      	lsls	r3, r3, #23
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d009      	beq.n	8003e84 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a11      	ldr	r2, [pc, #68]	@ (8003ebc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d004      	beq.n	8003e84 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a10      	ldr	r2, [pc, #64]	@ (8003ec0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d10c      	bne.n	8003e9e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2280      	movs	r2, #128	@ 0x80
 8003e88:	4393      	bics	r3, r2
 8003e8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	223d      	movs	r2, #61	@ 0x3d
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	223c      	movs	r2, #60	@ 0x3c
 8003eaa:	2100      	movs	r1, #0
 8003eac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	b004      	add	sp, #16
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40012c00 	.word	0x40012c00
 8003ebc:	40000400 	.word	0x40000400
 8003ec0:	40014000 	.word	0x40014000

08003ec4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	223c      	movs	r2, #60	@ 0x3c
 8003ed6:	5c9b      	ldrb	r3, [r3, r2]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d101      	bne.n	8003ee0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003edc:	2302      	movs	r3, #2
 8003ede:	e03e      	b.n	8003f5e <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	223c      	movs	r2, #60	@ 0x3c
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	22ff      	movs	r2, #255	@ 0xff
 8003eec:	4393      	bics	r3, r2
 8003eee:	001a      	movs	r2, r3
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4a1b      	ldr	r2, [pc, #108]	@ (8003f68 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003efc:	401a      	ands	r2, r3
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	4a18      	ldr	r2, [pc, #96]	@ (8003f6c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8003f0a:	401a      	ands	r2, r3
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	4a16      	ldr	r2, [pc, #88]	@ (8003f70 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003f18:	401a      	ands	r2, r3
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	4a13      	ldr	r2, [pc, #76]	@ (8003f74 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8003f26:	401a      	ands	r2, r3
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4a11      	ldr	r2, [pc, #68]	@ (8003f78 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003f34:	401a      	ands	r2, r3
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	4a0e      	ldr	r2, [pc, #56]	@ (8003f7c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8003f42:	401a      	ands	r2, r3
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	223c      	movs	r2, #60	@ 0x3c
 8003f58:	2100      	movs	r1, #0
 8003f5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	0018      	movs	r0, r3
 8003f60:	46bd      	mov	sp, r7
 8003f62:	b004      	add	sp, #16
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	46c0      	nop			@ (mov r8, r8)
 8003f68:	fffffcff 	.word	0xfffffcff
 8003f6c:	fffffbff 	.word	0xfffffbff
 8003f70:	fffff7ff 	.word	0xfffff7ff
 8003f74:	ffffefff 	.word	0xffffefff
 8003f78:	ffffdfff 	.word	0xffffdfff
 8003f7c:	ffffbfff 	.word	0xffffbfff

08003f80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e044      	b.n	800401c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d107      	bne.n	8003faa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2274      	movs	r2, #116	@ 0x74
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	f7fe f913 	bl	80021d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2224      	movs	r2, #36	@ 0x24
 8003fae:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_UART_DISABLE(huart);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2101      	movs	r1, #1
 8003fbc:	438a      	bics	r2, r1
 8003fbe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	f000 f830 	bl	8004028 <UART_SetConfig>
 8003fc8:	0003      	movs	r3, r0
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d101      	bne.n	8003fd2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e024      	b.n	800401c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	0018      	movs	r0, r3
 8003fde:	f000 f9ab 	bl	8004338 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	490d      	ldr	r1, [pc, #52]	@ (8004024 <HAL_UART_Init+0xa4>)
 8003fee:	400a      	ands	r2, r1
 8003ff0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	689a      	ldr	r2, [r3, #8]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	212a      	movs	r1, #42	@ 0x2a
 8003ffe:	438a      	bics	r2, r1
 8004000:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2101      	movs	r1, #1
 800400e:	430a      	orrs	r2, r1
 8004010:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	0018      	movs	r0, r3
 8004016:	f000 fa43 	bl	80044a0 <UART_CheckIdleState>
 800401a:	0003      	movs	r3, r0
}
 800401c:	0018      	movs	r0, r3
 800401e:	46bd      	mov	sp, r7
 8004020:	b002      	add	sp, #8
 8004022:	bd80      	pop	{r7, pc}
 8004024:	ffffb7ff 	.word	0xffffb7ff

08004028 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b088      	sub	sp, #32
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004030:	231e      	movs	r3, #30
 8004032:	18fb      	adds	r3, r7, r3
 8004034:	2200      	movs	r2, #0
 8004036:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	431a      	orrs	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	69db      	ldr	r3, [r3, #28]
 800404c:	4313      	orrs	r3, r2
 800404e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4aaf      	ldr	r2, [pc, #700]	@ (8004314 <UART_SetConfig+0x2ec>)
 8004058:	4013      	ands	r3, r2
 800405a:	0019      	movs	r1, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	430a      	orrs	r2, r1
 8004064:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	4aaa      	ldr	r2, [pc, #680]	@ (8004318 <UART_SetConfig+0x2f0>)
 800406e:	4013      	ands	r3, r2
 8004070:	0019      	movs	r1, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68da      	ldr	r2, [r3, #12]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	4313      	orrs	r3, r2
 800408c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	4aa1      	ldr	r2, [pc, #644]	@ (800431c <UART_SetConfig+0x2f4>)
 8004096:	4013      	ands	r3, r2
 8004098:	0019      	movs	r1, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a9d      	ldr	r2, [pc, #628]	@ (8004320 <UART_SetConfig+0x2f8>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d127      	bne.n	80040fe <UART_SetConfig+0xd6>
 80040ae:	4b9d      	ldr	r3, [pc, #628]	@ (8004324 <UART_SetConfig+0x2fc>)
 80040b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b2:	2203      	movs	r2, #3
 80040b4:	4013      	ands	r3, r2
 80040b6:	2b03      	cmp	r3, #3
 80040b8:	d00d      	beq.n	80040d6 <UART_SetConfig+0xae>
 80040ba:	d81b      	bhi.n	80040f4 <UART_SetConfig+0xcc>
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d014      	beq.n	80040ea <UART_SetConfig+0xc2>
 80040c0:	d818      	bhi.n	80040f4 <UART_SetConfig+0xcc>
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d002      	beq.n	80040cc <UART_SetConfig+0xa4>
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d00a      	beq.n	80040e0 <UART_SetConfig+0xb8>
 80040ca:	e013      	b.n	80040f4 <UART_SetConfig+0xcc>
 80040cc:	231f      	movs	r3, #31
 80040ce:	18fb      	adds	r3, r7, r3
 80040d0:	2200      	movs	r2, #0
 80040d2:	701a      	strb	r2, [r3, #0]
 80040d4:	e065      	b.n	80041a2 <UART_SetConfig+0x17a>
 80040d6:	231f      	movs	r3, #31
 80040d8:	18fb      	adds	r3, r7, r3
 80040da:	2202      	movs	r2, #2
 80040dc:	701a      	strb	r2, [r3, #0]
 80040de:	e060      	b.n	80041a2 <UART_SetConfig+0x17a>
 80040e0:	231f      	movs	r3, #31
 80040e2:	18fb      	adds	r3, r7, r3
 80040e4:	2204      	movs	r2, #4
 80040e6:	701a      	strb	r2, [r3, #0]
 80040e8:	e05b      	b.n	80041a2 <UART_SetConfig+0x17a>
 80040ea:	231f      	movs	r3, #31
 80040ec:	18fb      	adds	r3, r7, r3
 80040ee:	2208      	movs	r2, #8
 80040f0:	701a      	strb	r2, [r3, #0]
 80040f2:	e056      	b.n	80041a2 <UART_SetConfig+0x17a>
 80040f4:	231f      	movs	r3, #31
 80040f6:	18fb      	adds	r3, r7, r3
 80040f8:	2210      	movs	r2, #16
 80040fa:	701a      	strb	r2, [r3, #0]
 80040fc:	e051      	b.n	80041a2 <UART_SetConfig+0x17a>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a89      	ldr	r2, [pc, #548]	@ (8004328 <UART_SetConfig+0x300>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d134      	bne.n	8004172 <UART_SetConfig+0x14a>
 8004108:	4b86      	ldr	r3, [pc, #536]	@ (8004324 <UART_SetConfig+0x2fc>)
 800410a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800410c:	23c0      	movs	r3, #192	@ 0xc0
 800410e:	029b      	lsls	r3, r3, #10
 8004110:	4013      	ands	r3, r2
 8004112:	22c0      	movs	r2, #192	@ 0xc0
 8004114:	0292      	lsls	r2, r2, #10
 8004116:	4293      	cmp	r3, r2
 8004118:	d017      	beq.n	800414a <UART_SetConfig+0x122>
 800411a:	22c0      	movs	r2, #192	@ 0xc0
 800411c:	0292      	lsls	r2, r2, #10
 800411e:	4293      	cmp	r3, r2
 8004120:	d822      	bhi.n	8004168 <UART_SetConfig+0x140>
 8004122:	2280      	movs	r2, #128	@ 0x80
 8004124:	0292      	lsls	r2, r2, #10
 8004126:	4293      	cmp	r3, r2
 8004128:	d019      	beq.n	800415e <UART_SetConfig+0x136>
 800412a:	2280      	movs	r2, #128	@ 0x80
 800412c:	0292      	lsls	r2, r2, #10
 800412e:	4293      	cmp	r3, r2
 8004130:	d81a      	bhi.n	8004168 <UART_SetConfig+0x140>
 8004132:	2b00      	cmp	r3, #0
 8004134:	d004      	beq.n	8004140 <UART_SetConfig+0x118>
 8004136:	2280      	movs	r2, #128	@ 0x80
 8004138:	0252      	lsls	r2, r2, #9
 800413a:	4293      	cmp	r3, r2
 800413c:	d00a      	beq.n	8004154 <UART_SetConfig+0x12c>
 800413e:	e013      	b.n	8004168 <UART_SetConfig+0x140>
 8004140:	231f      	movs	r3, #31
 8004142:	18fb      	adds	r3, r7, r3
 8004144:	2200      	movs	r2, #0
 8004146:	701a      	strb	r2, [r3, #0]
 8004148:	e02b      	b.n	80041a2 <UART_SetConfig+0x17a>
 800414a:	231f      	movs	r3, #31
 800414c:	18fb      	adds	r3, r7, r3
 800414e:	2202      	movs	r2, #2
 8004150:	701a      	strb	r2, [r3, #0]
 8004152:	e026      	b.n	80041a2 <UART_SetConfig+0x17a>
 8004154:	231f      	movs	r3, #31
 8004156:	18fb      	adds	r3, r7, r3
 8004158:	2204      	movs	r2, #4
 800415a:	701a      	strb	r2, [r3, #0]
 800415c:	e021      	b.n	80041a2 <UART_SetConfig+0x17a>
 800415e:	231f      	movs	r3, #31
 8004160:	18fb      	adds	r3, r7, r3
 8004162:	2208      	movs	r2, #8
 8004164:	701a      	strb	r2, [r3, #0]
 8004166:	e01c      	b.n	80041a2 <UART_SetConfig+0x17a>
 8004168:	231f      	movs	r3, #31
 800416a:	18fb      	adds	r3, r7, r3
 800416c:	2210      	movs	r2, #16
 800416e:	701a      	strb	r2, [r3, #0]
 8004170:	e017      	b.n	80041a2 <UART_SetConfig+0x17a>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a6d      	ldr	r2, [pc, #436]	@ (800432c <UART_SetConfig+0x304>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d104      	bne.n	8004186 <UART_SetConfig+0x15e>
 800417c:	231f      	movs	r3, #31
 800417e:	18fb      	adds	r3, r7, r3
 8004180:	2200      	movs	r2, #0
 8004182:	701a      	strb	r2, [r3, #0]
 8004184:	e00d      	b.n	80041a2 <UART_SetConfig+0x17a>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a69      	ldr	r2, [pc, #420]	@ (8004330 <UART_SetConfig+0x308>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d104      	bne.n	800419a <UART_SetConfig+0x172>
 8004190:	231f      	movs	r3, #31
 8004192:	18fb      	adds	r3, r7, r3
 8004194:	2200      	movs	r2, #0
 8004196:	701a      	strb	r2, [r3, #0]
 8004198:	e003      	b.n	80041a2 <UART_SetConfig+0x17a>
 800419a:	231f      	movs	r3, #31
 800419c:	18fb      	adds	r3, r7, r3
 800419e:	2210      	movs	r2, #16
 80041a0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	69da      	ldr	r2, [r3, #28]
 80041a6:	2380      	movs	r3, #128	@ 0x80
 80041a8:	021b      	lsls	r3, r3, #8
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d15d      	bne.n	800426a <UART_SetConfig+0x242>
  {
    switch (clocksource)
 80041ae:	231f      	movs	r3, #31
 80041b0:	18fb      	adds	r3, r7, r3
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	2b08      	cmp	r3, #8
 80041b6:	d015      	beq.n	80041e4 <UART_SetConfig+0x1bc>
 80041b8:	dc18      	bgt.n	80041ec <UART_SetConfig+0x1c4>
 80041ba:	2b04      	cmp	r3, #4
 80041bc:	d00d      	beq.n	80041da <UART_SetConfig+0x1b2>
 80041be:	dc15      	bgt.n	80041ec <UART_SetConfig+0x1c4>
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d002      	beq.n	80041ca <UART_SetConfig+0x1a2>
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d005      	beq.n	80041d4 <UART_SetConfig+0x1ac>
 80041c8:	e010      	b.n	80041ec <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041ca:	f7fe fbd3 	bl	8002974 <HAL_RCC_GetPCLK1Freq>
 80041ce:	0003      	movs	r3, r0
 80041d0:	61bb      	str	r3, [r7, #24]
        break;
 80041d2:	e012      	b.n	80041fa <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041d4:	4b57      	ldr	r3, [pc, #348]	@ (8004334 <UART_SetConfig+0x30c>)
 80041d6:	61bb      	str	r3, [r7, #24]
        break;
 80041d8:	e00f      	b.n	80041fa <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041da:	f7fe fb41 	bl	8002860 <HAL_RCC_GetSysClockFreq>
 80041de:	0003      	movs	r3, r0
 80041e0:	61bb      	str	r3, [r7, #24]
        break;
 80041e2:	e00a      	b.n	80041fa <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041e4:	2380      	movs	r3, #128	@ 0x80
 80041e6:	021b      	lsls	r3, r3, #8
 80041e8:	61bb      	str	r3, [r7, #24]
        break;
 80041ea:	e006      	b.n	80041fa <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80041ec:	2300      	movs	r3, #0
 80041ee:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041f0:	231e      	movs	r3, #30
 80041f2:	18fb      	adds	r3, r7, r3
 80041f4:	2201      	movs	r2, #1
 80041f6:	701a      	strb	r2, [r3, #0]
        break;
 80041f8:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d100      	bne.n	8004202 <UART_SetConfig+0x1da>
 8004200:	e07b      	b.n	80042fa <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	005a      	lsls	r2, r3, #1
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	085b      	lsrs	r3, r3, #1
 800420c:	18d2      	adds	r2, r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	0019      	movs	r1, r3
 8004214:	0010      	movs	r0, r2
 8004216:	f7fb ff77 	bl	8000108 <__udivsi3>
 800421a:	0003      	movs	r3, r0
 800421c:	b29b      	uxth	r3, r3
 800421e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	2b0f      	cmp	r3, #15
 8004224:	d91c      	bls.n	8004260 <UART_SetConfig+0x238>
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	2380      	movs	r3, #128	@ 0x80
 800422a:	025b      	lsls	r3, r3, #9
 800422c:	429a      	cmp	r2, r3
 800422e:	d217      	bcs.n	8004260 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	b29a      	uxth	r2, r3
 8004234:	200e      	movs	r0, #14
 8004236:	183b      	adds	r3, r7, r0
 8004238:	210f      	movs	r1, #15
 800423a:	438a      	bics	r2, r1
 800423c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	085b      	lsrs	r3, r3, #1
 8004242:	b29b      	uxth	r3, r3
 8004244:	2207      	movs	r2, #7
 8004246:	4013      	ands	r3, r2
 8004248:	b299      	uxth	r1, r3
 800424a:	183b      	adds	r3, r7, r0
 800424c:	183a      	adds	r2, r7, r0
 800424e:	8812      	ldrh	r2, [r2, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	183a      	adds	r2, r7, r0
 800425a:	8812      	ldrh	r2, [r2, #0]
 800425c:	60da      	str	r2, [r3, #12]
 800425e:	e04c      	b.n	80042fa <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8004260:	231e      	movs	r3, #30
 8004262:	18fb      	adds	r3, r7, r3
 8004264:	2201      	movs	r2, #1
 8004266:	701a      	strb	r2, [r3, #0]
 8004268:	e047      	b.n	80042fa <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800426a:	231f      	movs	r3, #31
 800426c:	18fb      	adds	r3, r7, r3
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	2b08      	cmp	r3, #8
 8004272:	d015      	beq.n	80042a0 <UART_SetConfig+0x278>
 8004274:	dc18      	bgt.n	80042a8 <UART_SetConfig+0x280>
 8004276:	2b04      	cmp	r3, #4
 8004278:	d00d      	beq.n	8004296 <UART_SetConfig+0x26e>
 800427a:	dc15      	bgt.n	80042a8 <UART_SetConfig+0x280>
 800427c:	2b00      	cmp	r3, #0
 800427e:	d002      	beq.n	8004286 <UART_SetConfig+0x25e>
 8004280:	2b02      	cmp	r3, #2
 8004282:	d005      	beq.n	8004290 <UART_SetConfig+0x268>
 8004284:	e010      	b.n	80042a8 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004286:	f7fe fb75 	bl	8002974 <HAL_RCC_GetPCLK1Freq>
 800428a:	0003      	movs	r3, r0
 800428c:	61bb      	str	r3, [r7, #24]
        break;
 800428e:	e012      	b.n	80042b6 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004290:	4b28      	ldr	r3, [pc, #160]	@ (8004334 <UART_SetConfig+0x30c>)
 8004292:	61bb      	str	r3, [r7, #24]
        break;
 8004294:	e00f      	b.n	80042b6 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004296:	f7fe fae3 	bl	8002860 <HAL_RCC_GetSysClockFreq>
 800429a:	0003      	movs	r3, r0
 800429c:	61bb      	str	r3, [r7, #24]
        break;
 800429e:	e00a      	b.n	80042b6 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042a0:	2380      	movs	r3, #128	@ 0x80
 80042a2:	021b      	lsls	r3, r3, #8
 80042a4:	61bb      	str	r3, [r7, #24]
        break;
 80042a6:	e006      	b.n	80042b6 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042ac:	231e      	movs	r3, #30
 80042ae:	18fb      	adds	r3, r7, r3
 80042b0:	2201      	movs	r2, #1
 80042b2:	701a      	strb	r2, [r3, #0]
        break;
 80042b4:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d01e      	beq.n	80042fa <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	085a      	lsrs	r2, r3, #1
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	18d2      	adds	r2, r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	0019      	movs	r1, r3
 80042cc:	0010      	movs	r0, r2
 80042ce:	f7fb ff1b 	bl	8000108 <__udivsi3>
 80042d2:	0003      	movs	r3, r0
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	2b0f      	cmp	r3, #15
 80042dc:	d909      	bls.n	80042f2 <UART_SetConfig+0x2ca>
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	2380      	movs	r3, #128	@ 0x80
 80042e2:	025b      	lsls	r3, r3, #9
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d204      	bcs.n	80042f2 <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	60da      	str	r2, [r3, #12]
 80042f0:	e003      	b.n	80042fa <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 80042f2:	231e      	movs	r3, #30
 80042f4:	18fb      	adds	r3, r7, r3
 80042f6:	2201      	movs	r2, #1
 80042f8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->TxISR = NULL;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	669a      	str	r2, [r3, #104]	@ 0x68

  return ret;
 8004306:	231e      	movs	r3, #30
 8004308:	18fb      	adds	r3, r7, r3
 800430a:	781b      	ldrb	r3, [r3, #0]
}
 800430c:	0018      	movs	r0, r3
 800430e:	46bd      	mov	sp, r7
 8004310:	b008      	add	sp, #32
 8004312:	bd80      	pop	{r7, pc}
 8004314:	efff69f3 	.word	0xefff69f3
 8004318:	ffffcfff 	.word	0xffffcfff
 800431c:	fffff4ff 	.word	0xfffff4ff
 8004320:	40013800 	.word	0x40013800
 8004324:	40021000 	.word	0x40021000
 8004328:	40004400 	.word	0x40004400
 800432c:	40004800 	.word	0x40004800
 8004330:	40004c00 	.word	0x40004c00
 8004334:	007a1200 	.word	0x007a1200

08004338 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004344:	2201      	movs	r2, #1
 8004346:	4013      	ands	r3, r2
 8004348:	d00b      	beq.n	8004362 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	4a4a      	ldr	r2, [pc, #296]	@ (800447c <UART_AdvFeatureConfig+0x144>)
 8004352:	4013      	ands	r3, r2
 8004354:	0019      	movs	r1, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004366:	2202      	movs	r2, #2
 8004368:	4013      	ands	r3, r2
 800436a:	d00b      	beq.n	8004384 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	4a43      	ldr	r2, [pc, #268]	@ (8004480 <UART_AdvFeatureConfig+0x148>)
 8004374:	4013      	ands	r3, r2
 8004376:	0019      	movs	r1, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	430a      	orrs	r2, r1
 8004382:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004388:	2204      	movs	r2, #4
 800438a:	4013      	ands	r3, r2
 800438c:	d00b      	beq.n	80043a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	4a3b      	ldr	r2, [pc, #236]	@ (8004484 <UART_AdvFeatureConfig+0x14c>)
 8004396:	4013      	ands	r3, r2
 8004398:	0019      	movs	r1, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043aa:	2208      	movs	r2, #8
 80043ac:	4013      	ands	r3, r2
 80043ae:	d00b      	beq.n	80043c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	4a34      	ldr	r2, [pc, #208]	@ (8004488 <UART_AdvFeatureConfig+0x150>)
 80043b8:	4013      	ands	r3, r2
 80043ba:	0019      	movs	r1, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	430a      	orrs	r2, r1
 80043c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043cc:	2210      	movs	r2, #16
 80043ce:	4013      	ands	r3, r2
 80043d0:	d00b      	beq.n	80043ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	4a2c      	ldr	r2, [pc, #176]	@ (800448c <UART_AdvFeatureConfig+0x154>)
 80043da:	4013      	ands	r3, r2
 80043dc:	0019      	movs	r1, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ee:	2220      	movs	r2, #32
 80043f0:	4013      	ands	r3, r2
 80043f2:	d00b      	beq.n	800440c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	4a25      	ldr	r2, [pc, #148]	@ (8004490 <UART_AdvFeatureConfig+0x158>)
 80043fc:	4013      	ands	r3, r2
 80043fe:	0019      	movs	r1, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	430a      	orrs	r2, r1
 800440a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004410:	2240      	movs	r2, #64	@ 0x40
 8004412:	4013      	ands	r3, r2
 8004414:	d01d      	beq.n	8004452 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	4a1d      	ldr	r2, [pc, #116]	@ (8004494 <UART_AdvFeatureConfig+0x15c>)
 800441e:	4013      	ands	r3, r2
 8004420:	0019      	movs	r1, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004432:	2380      	movs	r3, #128	@ 0x80
 8004434:	035b      	lsls	r3, r3, #13
 8004436:	429a      	cmp	r2, r3
 8004438:	d10b      	bne.n	8004452 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	4a15      	ldr	r2, [pc, #84]	@ (8004498 <UART_AdvFeatureConfig+0x160>)
 8004442:	4013      	ands	r3, r2
 8004444:	0019      	movs	r1, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004456:	2280      	movs	r2, #128	@ 0x80
 8004458:	4013      	ands	r3, r2
 800445a:	d00b      	beq.n	8004474 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	4a0e      	ldr	r2, [pc, #56]	@ (800449c <UART_AdvFeatureConfig+0x164>)
 8004464:	4013      	ands	r3, r2
 8004466:	0019      	movs	r1, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	605a      	str	r2, [r3, #4]
  }
}
 8004474:	46c0      	nop			@ (mov r8, r8)
 8004476:	46bd      	mov	sp, r7
 8004478:	b002      	add	sp, #8
 800447a:	bd80      	pop	{r7, pc}
 800447c:	fffdffff 	.word	0xfffdffff
 8004480:	fffeffff 	.word	0xfffeffff
 8004484:	fffbffff 	.word	0xfffbffff
 8004488:	ffff7fff 	.word	0xffff7fff
 800448c:	ffffefff 	.word	0xffffefff
 8004490:	ffffdfff 	.word	0xffffdfff
 8004494:	ffefffff 	.word	0xffefffff
 8004498:	ff9fffff 	.word	0xff9fffff
 800449c:	fff7ffff 	.word	0xfff7ffff

080044a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af02      	add	r7, sp, #8
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2280      	movs	r2, #128	@ 0x80
 80044ac:	2100      	movs	r1, #0
 80044ae:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044b0:	f7fd ff5e 	bl	8002370 <HAL_GetTick>
 80044b4:	0003      	movs	r3, r0
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2208      	movs	r2, #8
 80044c0:	4013      	ands	r3, r2
 80044c2:	2b08      	cmp	r3, #8
 80044c4:	d10c      	bne.n	80044e0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2280      	movs	r2, #128	@ 0x80
 80044ca:	0391      	lsls	r1, r2, #14
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	4a17      	ldr	r2, [pc, #92]	@ (800452c <UART_CheckIdleState+0x8c>)
 80044d0:	9200      	str	r2, [sp, #0]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f000 f82c 	bl	8004530 <UART_WaitOnFlagUntilTimeout>
 80044d8:	1e03      	subs	r3, r0, #0
 80044da:	d001      	beq.n	80044e0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e021      	b.n	8004524 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2204      	movs	r2, #4
 80044e8:	4013      	ands	r3, r2
 80044ea:	2b04      	cmp	r3, #4
 80044ec:	d10c      	bne.n	8004508 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2280      	movs	r2, #128	@ 0x80
 80044f2:	03d1      	lsls	r1, r2, #15
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	4a0d      	ldr	r2, [pc, #52]	@ (800452c <UART_CheckIdleState+0x8c>)
 80044f8:	9200      	str	r2, [sp, #0]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f000 f818 	bl	8004530 <UART_WaitOnFlagUntilTimeout>
 8004500:	1e03      	subs	r3, r0, #0
 8004502:	d001      	beq.n	8004508 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e00d      	b.n	8004524 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2220      	movs	r2, #32
 800450c:	679a      	str	r2, [r3, #120]	@ 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2220      	movs	r2, #32
 8004512:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	661a      	str	r2, [r3, #96]	@ 0x60

  __HAL_UNLOCK(huart);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2274      	movs	r2, #116	@ 0x74
 800451e:	2100      	movs	r1, #0
 8004520:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	0018      	movs	r0, r3
 8004526:	46bd      	mov	sp, r7
 8004528:	b004      	add	sp, #16
 800452a:	bd80      	pop	{r7, pc}
 800452c:	01ffffff 	.word	0x01ffffff

08004530 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b094      	sub	sp, #80	@ 0x50
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	603b      	str	r3, [r7, #0]
 800453c:	1dfb      	adds	r3, r7, #7
 800453e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004540:	e0a3      	b.n	800468a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004542:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004544:	3301      	adds	r3, #1
 8004546:	d100      	bne.n	800454a <UART_WaitOnFlagUntilTimeout+0x1a>
 8004548:	e09f      	b.n	800468a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800454a:	f7fd ff11 	bl	8002370 <HAL_GetTick>
 800454e:	0002      	movs	r2, r0
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004556:	429a      	cmp	r2, r3
 8004558:	d302      	bcc.n	8004560 <UART_WaitOnFlagUntilTimeout+0x30>
 800455a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800455c:	2b00      	cmp	r3, #0
 800455e:	d13d      	bne.n	80045dc <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004560:	f3ef 8310 	mrs	r3, PRIMASK
 8004564:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8004566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004568:	647b      	str	r3, [r7, #68]	@ 0x44
 800456a:	2301      	movs	r3, #1
 800456c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800456e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004570:	f383 8810 	msr	PRIMASK, r3
}
 8004574:	46c0      	nop			@ (mov r8, r8)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	494c      	ldr	r1, [pc, #304]	@ (80046b4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004582:	400a      	ands	r2, r1
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004588:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800458a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800458c:	f383 8810 	msr	PRIMASK, r3
}
 8004590:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004592:	f3ef 8310 	mrs	r3, PRIMASK
 8004596:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8004598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800459a:	643b      	str	r3, [r7, #64]	@ 0x40
 800459c:	2301      	movs	r3, #1
 800459e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045a2:	f383 8810 	msr	PRIMASK, r3
}
 80045a6:	46c0      	nop			@ (mov r8, r8)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689a      	ldr	r2, [r3, #8]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2101      	movs	r1, #1
 80045b4:	438a      	bics	r2, r1
 80045b6:	609a      	str	r2, [r3, #8]
 80045b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045be:	f383 8810 	msr	PRIMASK, r3
}
 80045c2:	46c0      	nop			@ (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2220      	movs	r2, #32
 80045c8:	679a      	str	r2, [r3, #120]	@ 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2220      	movs	r2, #32
 80045ce:	67da      	str	r2, [r3, #124]	@ 0x7c

        __HAL_UNLOCK(huart);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2274      	movs	r2, #116	@ 0x74
 80045d4:	2100      	movs	r1, #0
 80045d6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e067      	b.n	80046ac <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2204      	movs	r2, #4
 80045e4:	4013      	ands	r3, r2
 80045e6:	d050      	beq.n	800468a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	69da      	ldr	r2, [r3, #28]
 80045ee:	2380      	movs	r3, #128	@ 0x80
 80045f0:	011b      	lsls	r3, r3, #4
 80045f2:	401a      	ands	r2, r3
 80045f4:	2380      	movs	r3, #128	@ 0x80
 80045f6:	011b      	lsls	r3, r3, #4
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d146      	bne.n	800468a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2280      	movs	r2, #128	@ 0x80
 8004602:	0112      	lsls	r2, r2, #4
 8004604:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004606:	f3ef 8310 	mrs	r3, PRIMASK
 800460a:	613b      	str	r3, [r7, #16]
  return(result);
 800460c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800460e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004610:	2301      	movs	r3, #1
 8004612:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	f383 8810 	msr	PRIMASK, r3
}
 800461a:	46c0      	nop			@ (mov r8, r8)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4923      	ldr	r1, [pc, #140]	@ (80046b4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004628:	400a      	ands	r2, r1
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800462e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	f383 8810 	msr	PRIMASK, r3
}
 8004636:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004638:	f3ef 8310 	mrs	r3, PRIMASK
 800463c:	61fb      	str	r3, [r7, #28]
  return(result);
 800463e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004640:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004642:	2301      	movs	r3, #1
 8004644:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	f383 8810 	msr	PRIMASK, r3
}
 800464c:	46c0      	nop			@ (mov r8, r8)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2101      	movs	r1, #1
 800465a:	438a      	bics	r2, r1
 800465c:	609a      	str	r2, [r3, #8]
 800465e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004660:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004664:	f383 8810 	msr	PRIMASK, r3
}
 8004668:	46c0      	nop			@ (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2220      	movs	r2, #32
 800466e:	679a      	str	r2, [r3, #120]	@ 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2220      	movs	r2, #32
 8004674:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2280      	movs	r2, #128	@ 0x80
 800467a:	2120      	movs	r1, #32
 800467c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2274      	movs	r2, #116	@ 0x74
 8004682:	2100      	movs	r1, #0
 8004684:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e010      	b.n	80046ac <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	69db      	ldr	r3, [r3, #28]
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	4013      	ands	r3, r2
 8004694:	68ba      	ldr	r2, [r7, #8]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	425a      	negs	r2, r3
 800469a:	4153      	adcs	r3, r2
 800469c:	b2db      	uxtb	r3, r3
 800469e:	001a      	movs	r2, r3
 80046a0:	1dfb      	adds	r3, r7, #7
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d100      	bne.n	80046aa <UART_WaitOnFlagUntilTimeout+0x17a>
 80046a8:	e74b      	b.n	8004542 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	0018      	movs	r0, r3
 80046ae:	46bd      	mov	sp, r7
 80046b0:	b014      	add	sp, #80	@ 0x50
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	fffffe5f 	.word	0xfffffe5f

080046b8 <memset>:
 80046b8:	0003      	movs	r3, r0
 80046ba:	1882      	adds	r2, r0, r2
 80046bc:	4293      	cmp	r3, r2
 80046be:	d100      	bne.n	80046c2 <memset+0xa>
 80046c0:	4770      	bx	lr
 80046c2:	7019      	strb	r1, [r3, #0]
 80046c4:	3301      	adds	r3, #1
 80046c6:	e7f9      	b.n	80046bc <memset+0x4>

080046c8 <__libc_init_array>:
 80046c8:	b570      	push	{r4, r5, r6, lr}
 80046ca:	2600      	movs	r6, #0
 80046cc:	4c0c      	ldr	r4, [pc, #48]	@ (8004700 <__libc_init_array+0x38>)
 80046ce:	4d0d      	ldr	r5, [pc, #52]	@ (8004704 <__libc_init_array+0x3c>)
 80046d0:	1b64      	subs	r4, r4, r5
 80046d2:	10a4      	asrs	r4, r4, #2
 80046d4:	42a6      	cmp	r6, r4
 80046d6:	d109      	bne.n	80046ec <__libc_init_array+0x24>
 80046d8:	2600      	movs	r6, #0
 80046da:	f000 f819 	bl	8004710 <_init>
 80046de:	4c0a      	ldr	r4, [pc, #40]	@ (8004708 <__libc_init_array+0x40>)
 80046e0:	4d0a      	ldr	r5, [pc, #40]	@ (800470c <__libc_init_array+0x44>)
 80046e2:	1b64      	subs	r4, r4, r5
 80046e4:	10a4      	asrs	r4, r4, #2
 80046e6:	42a6      	cmp	r6, r4
 80046e8:	d105      	bne.n	80046f6 <__libc_init_array+0x2e>
 80046ea:	bd70      	pop	{r4, r5, r6, pc}
 80046ec:	00b3      	lsls	r3, r6, #2
 80046ee:	58eb      	ldr	r3, [r5, r3]
 80046f0:	4798      	blx	r3
 80046f2:	3601      	adds	r6, #1
 80046f4:	e7ee      	b.n	80046d4 <__libc_init_array+0xc>
 80046f6:	00b3      	lsls	r3, r6, #2
 80046f8:	58eb      	ldr	r3, [r5, r3]
 80046fa:	4798      	blx	r3
 80046fc:	3601      	adds	r6, #1
 80046fe:	e7f2      	b.n	80046e6 <__libc_init_array+0x1e>
 8004700:	08004794 	.word	0x08004794
 8004704:	08004794 	.word	0x08004794
 8004708:	08004798 	.word	0x08004798
 800470c:	08004794 	.word	0x08004794

08004710 <_init>:
 8004710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004712:	46c0      	nop			@ (mov r8, r8)
 8004714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004716:	bc08      	pop	{r3}
 8004718:	469e      	mov	lr, r3
 800471a:	4770      	bx	lr

0800471c <_fini>:
 800471c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800471e:	46c0      	nop			@ (mov r8, r8)
 8004720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004722:	bc08      	pop	{r3}
 8004724:	469e      	mov	lr, r3
 8004726:	4770      	bx	lr
